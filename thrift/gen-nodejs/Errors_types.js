//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var Types_ttypes = require('./Types_types.js');


var ttypes = module.exports = {};
ttypes.EDAMErrorCode = {
  'UNKNOWN' : 1,
  'BAD_DATA_FORMAT' : 2,
  'PERMISSION_DENIED' : 3,
  'INTERNAL_ERROR' : 4,
  'DATA_REQUIRED' : 5,
  'LIMIT_REACHED' : 6,
  'QUOTA_REACHED' : 7,
  'INVALID_AUTH' : 8,
  'AUTH_EXPIRED' : 9,
  'DATA_CONFLICT' : 10,
  'ENML_VALIDATION' : 11,
  'SHARD_UNAVAILABLE' : 12,
  'LEN_TOO_SHORT' : 13,
  'LEN_TOO_LONG' : 14,
  'TOO_FEW' : 15,
  'TOO_MANY' : 16,
  'UNSUPPORTED_OPERATION' : 17,
  'TAKEN_DOWN' : 18,
  'RATE_LIMIT_REACHED' : 19,
  'BUSINESS_SECURITY_LOGIN_REQUIRED' : 20,
  'DEVICE_LIMIT_REACHED' : 21,
  'OPENID_ALREADY_TAKEN' : 22,
  'INVALID_OPENID_TOKEN' : 23,
  'USER_NOT_ASSOCIATED' : 24,
  'USER_NOT_REGISTERED' : 25,
  'USER_ALREADY_ASSOCIATED' : 26,
  'ACCOUNT_CLEAR' : 27,
  'SSO_AUTHENTICATION_REQUIRED' : 28
};
ttypes.EDAMInvalidContactReason = {
  'BAD_ADDRESS' : 0,
  'DUPLICATE_CONTACT' : 1,
  'NO_CONNECTION' : 2
};
var EDAMUserException = module.exports.EDAMUserException = function(args) {
  Thrift.TException.call(this, "EDAMUserException");
  this.name = "EDAMUserException";
  this.errorCode = null;
  this.parameter = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field errorCode is unset!');
    }
    if (args.parameter !== undefined && args.parameter !== null) {
      this.parameter = args.parameter;
    }
  }
};
Thrift.inherits(EDAMUserException, Thrift.TException);
EDAMUserException.prototype.name = 'EDAMUserException';
EDAMUserException.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parameter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EDAMUserException.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('EDAMUserException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.parameter !== null && this.parameter !== undefined) {
    output.writeFieldBegin('parameter', Thrift.Type.STRING, 2);
    output.writeString(this.parameter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EDAMSystemException = module.exports.EDAMSystemException = function(args) {
  Thrift.TException.call(this, "EDAMSystemException");
  this.name = "EDAMSystemException";
  this.errorCode = null;
  this.message = null;
  this.rateLimitDuration = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field errorCode is unset!');
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.rateLimitDuration !== undefined && args.rateLimitDuration !== null) {
      this.rateLimitDuration = args.rateLimitDuration;
    }
  }
};
Thrift.inherits(EDAMSystemException, Thrift.TException);
EDAMSystemException.prototype.name = 'EDAMSystemException';
EDAMSystemException.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.rateLimitDuration = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EDAMSystemException.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('EDAMSystemException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.rateLimitDuration !== null && this.rateLimitDuration !== undefined) {
    output.writeFieldBegin('rateLimitDuration', Thrift.Type.I32, 3);
    output.writeI32(this.rateLimitDuration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EDAMNotFoundException = module.exports.EDAMNotFoundException = function(args) {
  Thrift.TException.call(this, "EDAMNotFoundException");
  this.name = "EDAMNotFoundException";
  this.identifier = null;
  this.key = null;
  if (args) {
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
Thrift.inherits(EDAMNotFoundException, Thrift.TException);
EDAMNotFoundException.prototype.name = 'EDAMNotFoundException';
EDAMNotFoundException.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EDAMNotFoundException.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('EDAMNotFoundException');
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 1);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EDAMInvalidContactsException = module.exports.EDAMInvalidContactsException = function(args) {
  Thrift.TException.call(this, "EDAMInvalidContactsException");
  this.name = "EDAMInvalidContactsException";
  this.contacts = null;
  this.parameter = null;
  this.reasons = null;
  if (args) {
    if (args.contacts !== undefined && args.contacts !== null) {
      this.contacts = Thrift.copyList(args.contacts, [Types_ttypes.Contact]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contacts is unset!');
    }
    if (args.parameter !== undefined && args.parameter !== null) {
      this.parameter = args.parameter;
    }
    if (args.reasons !== undefined && args.reasons !== null) {
      this.reasons = Thrift.copyList(args.reasons, [null]);
    }
  }
};
Thrift.inherits(EDAMInvalidContactsException, Thrift.TException);
EDAMInvalidContactsException.prototype.name = 'EDAMInvalidContactsException';
EDAMInvalidContactsException.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.contacts = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new Types_ttypes.Contact();
          elem3[Symbol.for("read")](input);
          this.contacts.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parameter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.reasons = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = input.readI32();
          this.reasons.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EDAMInvalidContactsException.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('EDAMInvalidContactsException');
  if (this.contacts !== null && this.contacts !== undefined) {
    output.writeFieldBegin('contacts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.contacts.length);
    for (var iter8 in this.contacts) {
      if (this.contacts.hasOwnProperty(iter8)) {
        iter8 = this.contacts[iter8];
        iter8[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parameter !== null && this.parameter !== undefined) {
    output.writeFieldBegin('parameter', Thrift.Type.STRING, 2);
    output.writeString(this.parameter);
    output.writeFieldEnd();
  }
  if (this.reasons !== null && this.reasons !== undefined) {
    output.writeFieldBegin('reasons', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.reasons.length);
    for (var iter9 in this.reasons) {
      if (this.reasons.hasOwnProperty(iter9)) {
        iter9 = this.reasons[iter9];
        output.writeI32(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

