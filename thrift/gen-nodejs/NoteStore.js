//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var UserStore_ttypes = require('./UserStore_types.js');
var Types_ttypes = require('./Types_types.js');
var Errors_ttypes = require('./Errors_types.js');
var Limits_ttypes = require('./Limits_types.js');


var ttypes = require('./NoteStore_types');
//HELPER FUNCTIONS AND STRUCTURES

var NoteStore_getSyncState_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_getSyncState_args.prototype = {};
NoteStore_getSyncState_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSyncState_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getSyncState_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getSyncState_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SyncState(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getSyncState_result.prototype = {};
NoteStore_getSyncState_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SyncState();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSyncState_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getSyncState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getFilteredSyncChunk_args = function(args) {
  this.authenticationToken = null;
  this.afterUSN = null;
  this.maxEntries = null;
  this.filter = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.afterUSN !== undefined && args.afterUSN !== null) {
      this.afterUSN = args.afterUSN;
    }
    if (args.maxEntries !== undefined && args.maxEntries !== null) {
      this.maxEntries = args.maxEntries;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.SyncChunkFilter(args.filter);
    }
  }
};
NoteStore_getFilteredSyncChunk_args.prototype = {};
NoteStore_getFilteredSyncChunk_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.afterUSN = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxEntries = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.SyncChunkFilter();
        this.filter[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getFilteredSyncChunk_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getFilteredSyncChunk_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.afterUSN !== null && this.afterUSN !== undefined) {
    output.writeFieldBegin('afterUSN', Thrift.Type.I32, 2);
    output.writeI32(this.afterUSN);
    output.writeFieldEnd();
  }
  if (this.maxEntries !== null && this.maxEntries !== undefined) {
    output.writeFieldBegin('maxEntries', Thrift.Type.I32, 3);
    output.writeI32(this.maxEntries);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getFilteredSyncChunk_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SyncChunk(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getFilteredSyncChunk_result.prototype = {};
NoteStore_getFilteredSyncChunk_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SyncChunk();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getFilteredSyncChunk_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getFilteredSyncChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getLinkedNotebookSyncState_args = function(args) {
  this.authenticationToken = null;
  this.linkedNotebook = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.linkedNotebook !== undefined && args.linkedNotebook !== null) {
      this.linkedNotebook = new Types_ttypes.LinkedNotebook(args.linkedNotebook);
    }
  }
};
NoteStore_getLinkedNotebookSyncState_args.prototype = {};
NoteStore_getLinkedNotebookSyncState_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new Types_ttypes.LinkedNotebook();
        this.linkedNotebook[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncState_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncState_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.linkedNotebook !== null && this.linkedNotebook !== undefined) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2);
    this.linkedNotebook[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getLinkedNotebookSyncState_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SyncState(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getLinkedNotebookSyncState_result.prototype = {};
NoteStore_getLinkedNotebookSyncState_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SyncState();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncState_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getLinkedNotebookSyncChunk_args = function(args) {
  this.authenticationToken = null;
  this.linkedNotebook = null;
  this.afterUSN = null;
  this.maxEntries = null;
  this.fullSyncOnly = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.linkedNotebook !== undefined && args.linkedNotebook !== null) {
      this.linkedNotebook = new Types_ttypes.LinkedNotebook(args.linkedNotebook);
    }
    if (args.afterUSN !== undefined && args.afterUSN !== null) {
      this.afterUSN = args.afterUSN;
    }
    if (args.maxEntries !== undefined && args.maxEntries !== null) {
      this.maxEntries = args.maxEntries;
    }
    if (args.fullSyncOnly !== undefined && args.fullSyncOnly !== null) {
      this.fullSyncOnly = args.fullSyncOnly;
    }
  }
};
NoteStore_getLinkedNotebookSyncChunk_args.prototype = {};
NoteStore_getLinkedNotebookSyncChunk_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new Types_ttypes.LinkedNotebook();
        this.linkedNotebook[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.afterUSN = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxEntries = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.fullSyncOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncChunk_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncChunk_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.linkedNotebook !== null && this.linkedNotebook !== undefined) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2);
    this.linkedNotebook[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.afterUSN !== null && this.afterUSN !== undefined) {
    output.writeFieldBegin('afterUSN', Thrift.Type.I32, 3);
    output.writeI32(this.afterUSN);
    output.writeFieldEnd();
  }
  if (this.maxEntries !== null && this.maxEntries !== undefined) {
    output.writeFieldBegin('maxEntries', Thrift.Type.I32, 4);
    output.writeI32(this.maxEntries);
    output.writeFieldEnd();
  }
  if (this.fullSyncOnly !== null && this.fullSyncOnly !== undefined) {
    output.writeFieldBegin('fullSyncOnly', Thrift.Type.BOOL, 5);
    output.writeBool(this.fullSyncOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getLinkedNotebookSyncChunk_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SyncChunk(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getLinkedNotebookSyncChunk_result.prototype = {};
NoteStore_getLinkedNotebookSyncChunk_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SyncChunk();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getLinkedNotebookSyncChunk_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listNotebooks_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listNotebooks_args.prototype = {};
NoteStore_listNotebooks_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listNotebooks_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listNotebooks_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listNotebooks_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Notebook]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listNotebooks_result.prototype = {};
NoteStore_listNotebooks_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3240 = input.readListBegin();
        var _size239 = _rtmp3240.size || 0;
        for (var _i241 = 0; _i241 < _size239; ++_i241) {
          var elem242 = null;
          elem242 = new Types_ttypes.Notebook();
          elem242[Symbol.for("read")](input);
          this.success.push(elem242);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listNotebooks_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listNotebooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter243 in this.success) {
      if (this.success.hasOwnProperty(iter243)) {
        iter243 = this.success[iter243];
        iter243[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listAccessibleBusinessNotebooks_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listAccessibleBusinessNotebooks_args.prototype = {};
NoteStore_listAccessibleBusinessNotebooks_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listAccessibleBusinessNotebooks_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listAccessibleBusinessNotebooks_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listAccessibleBusinessNotebooks_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Notebook]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listAccessibleBusinessNotebooks_result.prototype = {};
NoteStore_listAccessibleBusinessNotebooks_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3245 = input.readListBegin();
        var _size244 = _rtmp3245.size || 0;
        for (var _i246 = 0; _i246 < _size244; ++_i246) {
          var elem247 = null;
          elem247 = new Types_ttypes.Notebook();
          elem247[Symbol.for("read")](input);
          this.success.push(elem247);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listAccessibleBusinessNotebooks_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listAccessibleBusinessNotebooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter248 in this.success) {
      if (this.success.hasOwnProperty(iter248)) {
        iter248 = this.success[iter248];
        iter248[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNotebook_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getNotebook_args.prototype = {};
NoteStore_getNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Notebook(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNotebook_result.prototype = {};
NoteStore_getNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Notebook();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getDefaultNotebook_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_getDefaultNotebook_args.prototype = {};
NoteStore_getDefaultNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getDefaultNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getDefaultNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getDefaultNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Notebook(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getDefaultNotebook_result.prototype = {};
NoteStore_getDefaultNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Notebook();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getDefaultNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getDefaultNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createNotebook_args = function(args) {
  this.authenticationToken = null;
  this.notebook = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebook !== undefined && args.notebook !== null) {
      this.notebook = new Types_ttypes.Notebook(args.notebook);
    }
  }
};
NoteStore_createNotebook_args.prototype = {};
NoteStore_createNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notebook = new Types_ttypes.Notebook();
        this.notebook[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebook !== null && this.notebook !== undefined) {
    output.writeFieldBegin('notebook', Thrift.Type.STRUCT, 2);
    this.notebook[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Notebook(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_createNotebook_result.prototype = {};
NoteStore_createNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Notebook();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateNotebook_args = function(args) {
  this.authenticationToken = null;
  this.notebook = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebook !== undefined && args.notebook !== null) {
      this.notebook = new Types_ttypes.Notebook(args.notebook);
    }
  }
};
NoteStore_updateNotebook_args.prototype = {};
NoteStore_updateNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notebook = new Types_ttypes.Notebook();
        this.notebook[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebook !== null && this.notebook !== undefined) {
    output.writeFieldBegin('notebook', Thrift.Type.STRUCT, 2);
    this.notebook[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_updateNotebook_result.prototype = {};
NoteStore_updateNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_expungeNotebook_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_expungeNotebook_args.prototype = {};
NoteStore_expungeNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_expungeNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_expungeNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_expungeNotebook_result.prototype = {};
NoteStore_expungeNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_expungeNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listTags_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listTags_args.prototype = {};
NoteStore_listTags_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listTags_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listTags_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listTags_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Tag]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listTags_result.prototype = {};
NoteStore_listTags_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3250 = input.readListBegin();
        var _size249 = _rtmp3250.size || 0;
        for (var _i251 = 0; _i251 < _size249; ++_i251) {
          var elem252 = null;
          elem252 = new Types_ttypes.Tag();
          elem252[Symbol.for("read")](input);
          this.success.push(elem252);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listTags_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listTags_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter253 in this.success) {
      if (this.success.hasOwnProperty(iter253)) {
        iter253 = this.success[iter253];
        iter253[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listTagsByNotebook_args = function(args) {
  this.authenticationToken = null;
  this.notebookGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebookGuid !== undefined && args.notebookGuid !== null) {
      this.notebookGuid = args.notebookGuid;
    }
  }
};
NoteStore_listTagsByNotebook_args.prototype = {};
NoteStore_listTagsByNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listTagsByNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listTagsByNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 2);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listTagsByNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Tag]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_listTagsByNotebook_result.prototype = {};
NoteStore_listTagsByNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3255 = input.readListBegin();
        var _size254 = _rtmp3255.size || 0;
        for (var _i256 = 0; _i256 < _size254; ++_i256) {
          var elem257 = null;
          elem257 = new Types_ttypes.Tag();
          elem257[Symbol.for("read")](input);
          this.success.push(elem257);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listTagsByNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listTagsByNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter258 in this.success) {
      if (this.success.hasOwnProperty(iter258)) {
        iter258 = this.success[iter258];
        iter258[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getTag_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getTag_args.prototype = {};
NoteStore_getTag_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getTag_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getTag_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getTag_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Tag(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getTag_result.prototype = {};
NoteStore_getTag_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Tag();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getTag_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createTag_args = function(args) {
  this.authenticationToken = null;
  this.tag = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = new Types_ttypes.Tag(args.tag);
    }
  }
};
NoteStore_createTag_args.prototype = {};
NoteStore_createTag_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tag = new Types_ttypes.Tag();
        this.tag[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createTag_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createTag_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRUCT, 2);
    this.tag[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createTag_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Tag(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_createTag_result.prototype = {};
NoteStore_createTag_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Tag();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createTag_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateTag_args = function(args) {
  this.authenticationToken = null;
  this.tag = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = new Types_ttypes.Tag(args.tag);
    }
  }
};
NoteStore_updateTag_args.prototype = {};
NoteStore_updateTag_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tag = new Types_ttypes.Tag();
        this.tag[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateTag_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateTag_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRUCT, 2);
    this.tag[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateTag_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_updateTag_result.prototype = {};
NoteStore_updateTag_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateTag_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_untagAll_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_untagAll_args.prototype = {};
NoteStore_untagAll_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_untagAll_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_untagAll_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_untagAll_result = function(args) {
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_untagAll_result.prototype = {};
NoteStore_untagAll_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_untagAll_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_untagAll_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_expungeTag_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_expungeTag_args.prototype = {};
NoteStore_expungeTag_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeTag_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_expungeTag_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_expungeTag_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_expungeTag_result.prototype = {};
NoteStore_expungeTag_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeTag_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_expungeTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listSearches_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listSearches_args.prototype = {};
NoteStore_listSearches_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listSearches_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listSearches_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listSearches_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.SavedSearch]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listSearches_result.prototype = {};
NoteStore_listSearches_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3260 = input.readListBegin();
        var _size259 = _rtmp3260.size || 0;
        for (var _i261 = 0; _i261 < _size259; ++_i261) {
          var elem262 = null;
          elem262 = new Types_ttypes.SavedSearch();
          elem262[Symbol.for("read")](input);
          this.success.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listSearches_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listSearches_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter263 in this.success) {
      if (this.success.hasOwnProperty(iter263)) {
        iter263 = this.success[iter263];
        iter263[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getSearch_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getSearch_args.prototype = {};
NoteStore_getSearch_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSearch_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getSearch_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getSearch_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.SavedSearch(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getSearch_result.prototype = {};
NoteStore_getSearch_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.SavedSearch();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSearch_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getSearch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createSearch_args = function(args) {
  this.authenticationToken = null;
  this.search = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.search !== undefined && args.search !== null) {
      this.search = new Types_ttypes.SavedSearch(args.search);
    }
  }
};
NoteStore_createSearch_args.prototype = {};
NoteStore_createSearch_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.search = new Types_ttypes.SavedSearch();
        this.search[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createSearch_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createSearch_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.search !== null && this.search !== undefined) {
    output.writeFieldBegin('search', Thrift.Type.STRUCT, 2);
    this.search[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createSearch_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.SavedSearch(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_createSearch_result.prototype = {};
NoteStore_createSearch_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.SavedSearch();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createSearch_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createSearch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateSearch_args = function(args) {
  this.authenticationToken = null;
  this.search = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.search !== undefined && args.search !== null) {
      this.search = new Types_ttypes.SavedSearch(args.search);
    }
  }
};
NoteStore_updateSearch_args.prototype = {};
NoteStore_updateSearch_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.search = new Types_ttypes.SavedSearch();
        this.search[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateSearch_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateSearch_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.search !== null && this.search !== undefined) {
    output.writeFieldBegin('search', Thrift.Type.STRUCT, 2);
    this.search[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateSearch_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_updateSearch_result.prototype = {};
NoteStore_updateSearch_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateSearch_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateSearch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_expungeSearch_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_expungeSearch_args.prototype = {};
NoteStore_expungeSearch_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeSearch_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_expungeSearch_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_expungeSearch_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_expungeSearch_result.prototype = {};
NoteStore_expungeSearch_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeSearch_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_expungeSearch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_findNoteOffset_args = function(args) {
  this.authenticationToken = null;
  this.filter = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.NoteFilter(args.filter);
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_findNoteOffset_args.prototype = {};
NoteStore_findNoteOffset_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.NoteFilter();
        this.filter[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNoteOffset_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_findNoteOffset_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 3);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_findNoteOffset_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_findNoteOffset_result.prototype = {};
NoteStore_findNoteOffset_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNoteOffset_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_findNoteOffset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_findNotesMetadata_args = function(args) {
  this.authenticationToken = null;
  this.filter = null;
  this.offset = null;
  this.maxNotes = null;
  this.resultSpec = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.NoteFilter(args.filter);
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.maxNotes !== undefined && args.maxNotes !== null) {
      this.maxNotes = args.maxNotes;
    }
    if (args.resultSpec !== undefined && args.resultSpec !== null) {
      this.resultSpec = new ttypes.NotesMetadataResultSpec(args.resultSpec);
    }
  }
};
NoteStore_findNotesMetadata_args.prototype = {};
NoteStore_findNotesMetadata_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.NoteFilter();
        this.filter[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxNotes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSpec = new ttypes.NotesMetadataResultSpec();
        this.resultSpec[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNotesMetadata_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_findNotesMetadata_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.maxNotes !== null && this.maxNotes !== undefined) {
    output.writeFieldBegin('maxNotes', Thrift.Type.I32, 4);
    output.writeI32(this.maxNotes);
    output.writeFieldEnd();
  }
  if (this.resultSpec !== null && this.resultSpec !== undefined) {
    output.writeFieldBegin('resultSpec', Thrift.Type.STRUCT, 5);
    this.resultSpec[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_findNotesMetadata_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NotesMetadataList(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_findNotesMetadata_result.prototype = {};
NoteStore_findNotesMetadata_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NotesMetadataList();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNotesMetadata_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_findNotesMetadata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_findNoteCounts_args = function(args) {
  this.authenticationToken = null;
  this.filter = null;
  this.withTrash = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.NoteFilter(args.filter);
    }
    if (args.withTrash !== undefined && args.withTrash !== null) {
      this.withTrash = args.withTrash;
    }
  }
};
NoteStore_findNoteCounts_args.prototype = {};
NoteStore_findNoteCounts_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.NoteFilter();
        this.filter[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withTrash = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNoteCounts_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_findNoteCounts_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.withTrash !== null && this.withTrash !== undefined) {
    output.writeFieldBegin('withTrash', Thrift.Type.BOOL, 3);
    output.writeBool(this.withTrash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_findNoteCounts_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NoteCollectionCounts(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_findNoteCounts_result.prototype = {};
NoteStore_findNoteCounts_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NoteCollectionCounts();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findNoteCounts_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_findNoteCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteWithResultSpec_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.resultSpec = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.resultSpec !== undefined && args.resultSpec !== null) {
      this.resultSpec = new ttypes.NoteResultSpec(args.resultSpec);
    }
  }
};
NoteStore_getNoteWithResultSpec_args.prototype = {};
NoteStore_getNoteWithResultSpec_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSpec = new ttypes.NoteResultSpec();
        this.resultSpec[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteWithResultSpec_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteWithResultSpec_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.resultSpec !== null && this.resultSpec !== undefined) {
    output.writeFieldBegin('resultSpec', Thrift.Type.STRUCT, 3);
    this.resultSpec[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteWithResultSpec_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Note(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteWithResultSpec_result.prototype = {};
NoteStore_getNoteWithResultSpec_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Note();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteWithResultSpec_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteWithResultSpec_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNote_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.withContent = null;
  this.withResourcesData = null;
  this.withResourcesRecognition = null;
  this.withResourcesAlternateData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.withContent !== undefined && args.withContent !== null) {
      this.withContent = args.withContent;
    }
    if (args.withResourcesData !== undefined && args.withResourcesData !== null) {
      this.withResourcesData = args.withResourcesData;
    }
    if (args.withResourcesRecognition !== undefined && args.withResourcesRecognition !== null) {
      this.withResourcesRecognition = args.withResourcesRecognition;
    }
    if (args.withResourcesAlternateData !== undefined && args.withResourcesAlternateData !== null) {
      this.withResourcesAlternateData = args.withResourcesAlternateData;
    }
  }
};
NoteStore_getNote_args.prototype = {};
NoteStore_getNote_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withContent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesRecognition = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesAlternateData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNote_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.withContent !== null && this.withContent !== undefined) {
    output.writeFieldBegin('withContent', Thrift.Type.BOOL, 3);
    output.writeBool(this.withContent);
    output.writeFieldEnd();
  }
  if (this.withResourcesData !== null && this.withResourcesData !== undefined) {
    output.writeFieldBegin('withResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withResourcesData);
    output.writeFieldEnd();
  }
  if (this.withResourcesRecognition !== null && this.withResourcesRecognition !== undefined) {
    output.writeFieldBegin('withResourcesRecognition', Thrift.Type.BOOL, 5);
    output.writeBool(this.withResourcesRecognition);
    output.writeFieldEnd();
  }
  if (this.withResourcesAlternateData !== null && this.withResourcesAlternateData !== undefined) {
    output.writeFieldBegin('withResourcesAlternateData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withResourcesAlternateData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Note(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNote_result.prototype = {};
NoteStore_getNote_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Note();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNote_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteApplicationData_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getNoteApplicationData_args.prototype = {};
NoteStore_getNoteApplicationData_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteApplicationData_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteApplicationData_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteApplicationData_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.LazyMap(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteApplicationData_result.prototype = {};
NoteStore_getNoteApplicationData_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.LazyMap();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteApplicationData_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteApplicationData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
NoteStore_getNoteApplicationDataEntry_args.prototype = {};
NoteStore_getNoteApplicationDataEntry_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteApplicationDataEntry_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteApplicationDataEntry_result.prototype = {};
NoteStore_getNoteApplicationDataEntry_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteApplicationDataEntry_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_setNoteApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  this.value = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
NoteStore_setNoteApplicationDataEntry_args.prototype = {};
NoteStore_setNoteApplicationDataEntry_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setNoteApplicationDataEntry_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_setNoteApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_setNoteApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_setNoteApplicationDataEntry_result.prototype = {};
NoteStore_setNoteApplicationDataEntry_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setNoteApplicationDataEntry_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_setNoteApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_unsetNoteApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
NoteStore_unsetNoteApplicationDataEntry_args.prototype = {};
NoteStore_unsetNoteApplicationDataEntry_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_unsetNoteApplicationDataEntry_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_unsetNoteApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_unsetNoteApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_unsetNoteApplicationDataEntry_result.prototype = {};
NoteStore_unsetNoteApplicationDataEntry_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_unsetNoteApplicationDataEntry_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_unsetNoteApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteContent_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getNoteContent_args.prototype = {};
NoteStore_getNoteContent_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteContent_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteContent_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteContent_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteContent_result.prototype = {};
NoteStore_getNoteContent_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteContent_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteContent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteSearchText_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.noteOnly = null;
  this.tokenizeForIndexing = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.noteOnly !== undefined && args.noteOnly !== null) {
      this.noteOnly = args.noteOnly;
    }
    if (args.tokenizeForIndexing !== undefined && args.tokenizeForIndexing !== null) {
      this.tokenizeForIndexing = args.tokenizeForIndexing;
    }
  }
};
NoteStore_getNoteSearchText_args.prototype = {};
NoteStore_getNoteSearchText_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noteOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.tokenizeForIndexing = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteSearchText_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteSearchText_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.noteOnly !== null && this.noteOnly !== undefined) {
    output.writeFieldBegin('noteOnly', Thrift.Type.BOOL, 3);
    output.writeBool(this.noteOnly);
    output.writeFieldEnd();
  }
  if (this.tokenizeForIndexing !== null && this.tokenizeForIndexing !== undefined) {
    output.writeFieldBegin('tokenizeForIndexing', Thrift.Type.BOOL, 4);
    output.writeBool(this.tokenizeForIndexing);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteSearchText_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteSearchText_result.prototype = {};
NoteStore_getNoteSearchText_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteSearchText_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteSearchText_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceSearchText_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceSearchText_args.prototype = {};
NoteStore_getResourceSearchText_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceSearchText_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceSearchText_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceSearchText_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceSearchText_result.prototype = {};
NoteStore_getResourceSearchText_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceSearchText_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceSearchText_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteTagNames_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getNoteTagNames_args.prototype = {};
NoteStore_getNoteTagNames_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteTagNames_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteTagNames_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteTagNames_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteTagNames_result.prototype = {};
NoteStore_getNoteTagNames_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3265 = input.readListBegin();
        var _size264 = _rtmp3265.size || 0;
        for (var _i266 = 0; _i266 < _size264; ++_i266) {
          var elem267 = null;
          elem267 = input.readString();
          this.success.push(elem267);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteTagNames_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteTagNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter268 in this.success) {
      if (this.success.hasOwnProperty(iter268)) {
        iter268 = this.success[iter268];
        output.writeString(iter268);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createNote_args = function(args) {
  this.authenticationToken = null;
  this.note = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.note !== undefined && args.note !== null) {
      this.note = new Types_ttypes.Note(args.note);
    }
  }
};
NoteStore_createNote_args.prototype = {};
NoteStore_createNote_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Types_ttypes.Note();
        this.note[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createNote_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Note(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_createNote_result.prototype = {};
NoteStore_createNote_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Note();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createNote_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateNote_args = function(args) {
  this.authenticationToken = null;
  this.note = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.note !== undefined && args.note !== null) {
      this.note = new Types_ttypes.Note(args.note);
    }
  }
};
NoteStore_updateNote_args.prototype = {};
NoteStore_updateNote_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Types_ttypes.Note();
        this.note[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNote_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Note(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_updateNote_result.prototype = {};
NoteStore_updateNote_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Note();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNote_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_deleteNote_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_deleteNote_args.prototype = {};
NoteStore_deleteNote_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_deleteNote_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_deleteNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_deleteNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_deleteNote_result.prototype = {};
NoteStore_deleteNote_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_deleteNote_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_deleteNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_expungeNote_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_expungeNote_args.prototype = {};
NoteStore_expungeNote_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeNote_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_expungeNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_expungeNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_expungeNote_result.prototype = {};
NoteStore_expungeNote_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeNote_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_expungeNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_copyNote_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  this.toNotebookGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined && args.noteGuid !== null) {
      this.noteGuid = args.noteGuid;
    }
    if (args.toNotebookGuid !== undefined && args.toNotebookGuid !== null) {
      this.toNotebookGuid = args.toNotebookGuid;
    }
  }
};
NoteStore_copyNote_args.prototype = {};
NoteStore_copyNote_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.toNotebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_copyNote_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_copyNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.toNotebookGuid !== null && this.toNotebookGuid !== undefined) {
    output.writeFieldBegin('toNotebookGuid', Thrift.Type.STRING, 3);
    output.writeString(this.toNotebookGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_copyNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Note(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_copyNote_result.prototype = {};
NoteStore_copyNote_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Note();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_copyNote_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_copyNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listNoteVersions_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined && args.noteGuid !== null) {
      this.noteGuid = args.noteGuid;
    }
  }
};
NoteStore_listNoteVersions_args.prototype = {};
NoteStore_listNoteVersions_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listNoteVersions_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listNoteVersions_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listNoteVersions_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.NoteVersionId]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_listNoteVersions_result.prototype = {};
NoteStore_listNoteVersions_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3270 = input.readListBegin();
        var _size269 = _rtmp3270.size || 0;
        for (var _i271 = 0; _i271 < _size269; ++_i271) {
          var elem272 = null;
          elem272 = new ttypes.NoteVersionId();
          elem272[Symbol.for("read")](input);
          this.success.push(elem272);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listNoteVersions_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listNoteVersions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter273 in this.success) {
      if (this.success.hasOwnProperty(iter273)) {
        iter273 = this.success[iter273];
        iter273[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteVersion_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  this.updateSequenceNum = null;
  this.withResourcesData = null;
  this.withResourcesRecognition = null;
  this.withResourcesAlternateData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined && args.noteGuid !== null) {
      this.noteGuid = args.noteGuid;
    }
    if (args.updateSequenceNum !== undefined && args.updateSequenceNum !== null) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.withResourcesData !== undefined && args.withResourcesData !== null) {
      this.withResourcesData = args.withResourcesData;
    }
    if (args.withResourcesRecognition !== undefined && args.withResourcesRecognition !== null) {
      this.withResourcesRecognition = args.withResourcesRecognition;
    }
    if (args.withResourcesAlternateData !== undefined && args.withResourcesAlternateData !== null) {
      this.withResourcesAlternateData = args.withResourcesAlternateData;
    }
  }
};
NoteStore_getNoteVersion_args.prototype = {};
NoteStore_getNoteVersion_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesRecognition = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesAlternateData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteVersion_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteVersion_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 3);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.withResourcesData !== null && this.withResourcesData !== undefined) {
    output.writeFieldBegin('withResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withResourcesData);
    output.writeFieldEnd();
  }
  if (this.withResourcesRecognition !== null && this.withResourcesRecognition !== undefined) {
    output.writeFieldBegin('withResourcesRecognition', Thrift.Type.BOOL, 5);
    output.writeBool(this.withResourcesRecognition);
    output.writeFieldEnd();
  }
  if (this.withResourcesAlternateData !== null && this.withResourcesAlternateData !== undefined) {
    output.writeFieldBegin('withResourcesAlternateData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withResourcesAlternateData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNoteVersion_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Note(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getNoteVersion_result.prototype = {};
NoteStore_getNoteVersion_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Note();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNoteVersion_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNoteVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResource_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.withData = null;
  this.withRecognition = null;
  this.withAttributes = null;
  this.withAlternateData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.withData !== undefined && args.withData !== null) {
      this.withData = args.withData;
    }
    if (args.withRecognition !== undefined && args.withRecognition !== null) {
      this.withRecognition = args.withRecognition;
    }
    if (args.withAttributes !== undefined && args.withAttributes !== null) {
      this.withAttributes = args.withAttributes;
    }
    if (args.withAlternateData !== undefined && args.withAlternateData !== null) {
      this.withAlternateData = args.withAlternateData;
    }
  }
};
NoteStore_getResource_args.prototype = {};
NoteStore_getResource_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withRecognition = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withAttributes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withAlternateData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResource_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResource_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.withData !== null && this.withData !== undefined) {
    output.writeFieldBegin('withData', Thrift.Type.BOOL, 3);
    output.writeBool(this.withData);
    output.writeFieldEnd();
  }
  if (this.withRecognition !== null && this.withRecognition !== undefined) {
    output.writeFieldBegin('withRecognition', Thrift.Type.BOOL, 4);
    output.writeBool(this.withRecognition);
    output.writeFieldEnd();
  }
  if (this.withAttributes !== null && this.withAttributes !== undefined) {
    output.writeFieldBegin('withAttributes', Thrift.Type.BOOL, 5);
    output.writeBool(this.withAttributes);
    output.writeFieldEnd();
  }
  if (this.withAlternateData !== null && this.withAlternateData !== undefined) {
    output.writeFieldBegin('withAlternateData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withAlternateData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResource_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Resource(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResource_result.prototype = {};
NoteStore_getResource_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Resource();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResource_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceApplicationData_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceApplicationData_args.prototype = {};
NoteStore_getResourceApplicationData_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceApplicationData_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceApplicationData_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceApplicationData_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.LazyMap(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceApplicationData_result.prototype = {};
NoteStore_getResourceApplicationData_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.LazyMap();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceApplicationData_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceApplicationData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
NoteStore_getResourceApplicationDataEntry_args.prototype = {};
NoteStore_getResourceApplicationDataEntry_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceApplicationDataEntry_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceApplicationDataEntry_result.prototype = {};
NoteStore_getResourceApplicationDataEntry_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceApplicationDataEntry_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_setResourceApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  this.value = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
NoteStore_setResourceApplicationDataEntry_args.prototype = {};
NoteStore_setResourceApplicationDataEntry_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setResourceApplicationDataEntry_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_setResourceApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_setResourceApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_setResourceApplicationDataEntry_result.prototype = {};
NoteStore_setResourceApplicationDataEntry_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setResourceApplicationDataEntry_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_setResourceApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_unsetResourceApplicationDataEntry_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  this.key = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
NoteStore_unsetResourceApplicationDataEntry_args.prototype = {};
NoteStore_unsetResourceApplicationDataEntry_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_unsetResourceApplicationDataEntry_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_unsetResourceApplicationDataEntry_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_unsetResourceApplicationDataEntry_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_unsetResourceApplicationDataEntry_result.prototype = {};
NoteStore_unsetResourceApplicationDataEntry_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_unsetResourceApplicationDataEntry_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_unsetResourceApplicationDataEntry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateResource_args = function(args) {
  this.authenticationToken = null;
  this.resource = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.resource !== undefined && args.resource !== null) {
      this.resource = new Types_ttypes.Resource(args.resource);
    }
  }
};
NoteStore_updateResource_args.prototype = {};
NoteStore_updateResource_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.resource = new Types_ttypes.Resource();
        this.resource[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateResource_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateResource_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.STRUCT, 2);
    this.resource[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateResource_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_updateResource_result.prototype = {};
NoteStore_updateResource_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateResource_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceData_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceData_args.prototype = {};
NoteStore_getResourceData_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceData_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceData_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceData_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceData_result.prototype = {};
NoteStore_getResourceData_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceData_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceByHash_args = function(args) {
  this.authenticationToken = null;
  this.noteGuid = null;
  this.contentHash = null;
  this.withData = null;
  this.withRecognition = null;
  this.withAlternateData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.noteGuid !== undefined && args.noteGuid !== null) {
      this.noteGuid = args.noteGuid;
    }
    if (args.contentHash !== undefined && args.contentHash !== null) {
      this.contentHash = args.contentHash;
    }
    if (args.withData !== undefined && args.withData !== null) {
      this.withData = args.withData;
    }
    if (args.withRecognition !== undefined && args.withRecognition !== null) {
      this.withRecognition = args.withRecognition;
    }
    if (args.withAlternateData !== undefined && args.withAlternateData !== null) {
      this.withAlternateData = args.withAlternateData;
    }
  }
};
NoteStore_getResourceByHash_args.prototype = {};
NoteStore_getResourceByHash_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contentHash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withRecognition = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withAlternateData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceByHash_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceByHash_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.contentHash !== null && this.contentHash !== undefined) {
    output.writeFieldBegin('contentHash', Thrift.Type.STRING, 3);
    output.writeBinary(this.contentHash);
    output.writeFieldEnd();
  }
  if (this.withData !== null && this.withData !== undefined) {
    output.writeFieldBegin('withData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withData);
    output.writeFieldEnd();
  }
  if (this.withRecognition !== null && this.withRecognition !== undefined) {
    output.writeFieldBegin('withRecognition', Thrift.Type.BOOL, 5);
    output.writeBool(this.withRecognition);
    output.writeFieldEnd();
  }
  if (this.withAlternateData !== null && this.withAlternateData !== undefined) {
    output.writeFieldBegin('withAlternateData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withAlternateData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceByHash_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Resource(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceByHash_result.prototype = {};
NoteStore_getResourceByHash_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Resource();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceByHash_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceByHash_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceRecognition_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceRecognition_args.prototype = {};
NoteStore_getResourceRecognition_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceRecognition_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceRecognition_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceRecognition_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceRecognition_result.prototype = {};
NoteStore_getResourceRecognition_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceRecognition_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceRecognition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceAlternateData_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceAlternateData_args.prototype = {};
NoteStore_getResourceAlternateData_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceAlternateData_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceAlternateData_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceAlternateData_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceAlternateData_result.prototype = {};
NoteStore_getResourceAlternateData_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceAlternateData_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceAlternateData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceAttributes_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_getResourceAttributes_args.prototype = {};
NoteStore_getResourceAttributes_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceAttributes_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceAttributes_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getResourceAttributes_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.ResourceAttributes(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getResourceAttributes_result.prototype = {};
NoteStore_getResourceAttributes_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.ResourceAttributes();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getResourceAttributes_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getResourceAttributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getPublicNotebook_args = function(args) {
  this.userId = null;
  this.publicUri = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.publicUri !== undefined && args.publicUri !== null) {
      this.publicUri = args.publicUri;
    }
  }
};
NoteStore_getPublicNotebook_args.prototype = {};
NoteStore_getPublicNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.publicUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getPublicNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getPublicNotebook_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.publicUri !== null && this.publicUri !== undefined) {
    output.writeFieldBegin('publicUri', Thrift.Type.STRING, 2);
    output.writeString(this.publicUri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getPublicNotebook_result = function(args) {
  this.success = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Notebook(args.success);
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_getPublicNotebook_result.prototype = {};
NoteStore_getPublicNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Notebook();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getPublicNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getPublicNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_shareNotebook_args = function(args) {
  this.authenticationToken = null;
  this.sharedNotebook = null;
  this.message = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.sharedNotebook !== undefined && args.sharedNotebook !== null) {
      this.sharedNotebook = new Types_ttypes.SharedNotebook(args.sharedNotebook);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
NoteStore_shareNotebook_args.prototype = {};
NoteStore_shareNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedNotebook = new Types_ttypes.SharedNotebook();
        this.sharedNotebook[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_shareNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_shareNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.sharedNotebook !== null && this.sharedNotebook !== undefined) {
    output.writeFieldBegin('sharedNotebook', Thrift.Type.STRUCT, 2);
    this.sharedNotebook[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_shareNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.SharedNotebook(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_shareNotebook_result.prototype = {};
NoteStore_shareNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.SharedNotebook();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_shareNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_shareNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createOrUpdateNotebookShares_args = function(args) {
  this.authenticationToken = null;
  this.shareTemplate = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.shareTemplate !== undefined && args.shareTemplate !== null) {
      this.shareTemplate = new ttypes.NotebookShareTemplate(args.shareTemplate);
    }
  }
};
NoteStore_createOrUpdateNotebookShares_args.prototype = {};
NoteStore_createOrUpdateNotebookShares_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.shareTemplate = new ttypes.NotebookShareTemplate();
        this.shareTemplate[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createOrUpdateNotebookShares_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createOrUpdateNotebookShares_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.shareTemplate !== null && this.shareTemplate !== undefined) {
    output.writeFieldBegin('shareTemplate', Thrift.Type.STRUCT, 2);
    this.shareTemplate[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createOrUpdateNotebookShares_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  this.invalidContactsException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMInvalidContactsException) {
    this.invalidContactsException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CreateOrUpdateNotebookSharesResult(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.invalidContactsException !== undefined && args.invalidContactsException !== null) {
      this.invalidContactsException = args.invalidContactsException;
    }
  }
};
NoteStore_createOrUpdateNotebookShares_result.prototype = {};
NoteStore_createOrUpdateNotebookShares_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CreateOrUpdateNotebookSharesResult();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.invalidContactsException = new Errors_ttypes.EDAMInvalidContactsException();
        this.invalidContactsException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createOrUpdateNotebookShares_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createOrUpdateNotebookShares_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.invalidContactsException !== null && this.invalidContactsException !== undefined) {
    output.writeFieldBegin('invalidContactsException', Thrift.Type.STRUCT, 4);
    this.invalidContactsException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateSharedNotebook_args = function(args) {
  this.authenticationToken = null;
  this.sharedNotebook = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.sharedNotebook !== undefined && args.sharedNotebook !== null) {
      this.sharedNotebook = new Types_ttypes.SharedNotebook(args.sharedNotebook);
    }
  }
};
NoteStore_updateSharedNotebook_args.prototype = {};
NoteStore_updateSharedNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedNotebook = new Types_ttypes.SharedNotebook();
        this.sharedNotebook[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateSharedNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateSharedNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.sharedNotebook !== null && this.sharedNotebook !== undefined) {
    output.writeFieldBegin('sharedNotebook', Thrift.Type.STRUCT, 2);
    this.sharedNotebook[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateSharedNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_updateSharedNotebook_result.prototype = {};
NoteStore_updateSharedNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateSharedNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateSharedNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_setNotebookRecipientSettings_args = function(args) {
  this.authenticationToken = null;
  this.notebookGuid = null;
  this.recipientSettings = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebookGuid !== undefined && args.notebookGuid !== null) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.recipientSettings !== undefined && args.recipientSettings !== null) {
      this.recipientSettings = new Types_ttypes.NotebookRecipientSettings(args.recipientSettings);
    }
  }
};
NoteStore_setNotebookRecipientSettings_args.prototype = {};
NoteStore_setNotebookRecipientSettings_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.recipientSettings = new Types_ttypes.NotebookRecipientSettings();
        this.recipientSettings[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setNotebookRecipientSettings_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_setNotebookRecipientSettings_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 2);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.recipientSettings !== null && this.recipientSettings !== undefined) {
    output.writeFieldBegin('recipientSettings', Thrift.Type.STRUCT, 3);
    this.recipientSettings[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_setNotebookRecipientSettings_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Notebook(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_setNotebookRecipientSettings_result.prototype = {};
NoteStore_setNotebookRecipientSettings_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Notebook();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_setNotebookRecipientSettings_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_setNotebookRecipientSettings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listSharedNotebooks_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listSharedNotebooks_args.prototype = {};
NoteStore_listSharedNotebooks_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listSharedNotebooks_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listSharedNotebooks_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listSharedNotebooks_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.SharedNotebook]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listSharedNotebooks_result.prototype = {};
NoteStore_listSharedNotebooks_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3275 = input.readListBegin();
        var _size274 = _rtmp3275.size || 0;
        for (var _i276 = 0; _i276 < _size274; ++_i276) {
          var elem277 = null;
          elem277 = new Types_ttypes.SharedNotebook();
          elem277[Symbol.for("read")](input);
          this.success.push(elem277);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listSharedNotebooks_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listSharedNotebooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter278 in this.success) {
      if (this.success.hasOwnProperty(iter278)) {
        iter278 = this.success[iter278];
        iter278[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createLinkedNotebook_args = function(args) {
  this.authenticationToken = null;
  this.linkedNotebook = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.linkedNotebook !== undefined && args.linkedNotebook !== null) {
      this.linkedNotebook = new Types_ttypes.LinkedNotebook(args.linkedNotebook);
    }
  }
};
NoteStore_createLinkedNotebook_args.prototype = {};
NoteStore_createLinkedNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new Types_ttypes.LinkedNotebook();
        this.linkedNotebook[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createLinkedNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createLinkedNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.linkedNotebook !== null && this.linkedNotebook !== undefined) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2);
    this.linkedNotebook[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_createLinkedNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.LinkedNotebook(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_createLinkedNotebook_result.prototype = {};
NoteStore_createLinkedNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.LinkedNotebook();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_createLinkedNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_createLinkedNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateLinkedNotebook_args = function(args) {
  this.authenticationToken = null;
  this.linkedNotebook = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.linkedNotebook !== undefined && args.linkedNotebook !== null) {
      this.linkedNotebook = new Types_ttypes.LinkedNotebook(args.linkedNotebook);
    }
  }
};
NoteStore_updateLinkedNotebook_args.prototype = {};
NoteStore_updateLinkedNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new Types_ttypes.LinkedNotebook();
        this.linkedNotebook[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateLinkedNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateLinkedNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.linkedNotebook !== null && this.linkedNotebook !== undefined) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2);
    this.linkedNotebook[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateLinkedNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_updateLinkedNotebook_result.prototype = {};
NoteStore_updateLinkedNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateLinkedNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateLinkedNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listLinkedNotebooks_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_listLinkedNotebooks_args.prototype = {};
NoteStore_listLinkedNotebooks_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listLinkedNotebooks_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listLinkedNotebooks_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_listLinkedNotebooks_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.LinkedNotebook]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_listLinkedNotebooks_result.prototype = {};
NoteStore_listLinkedNotebooks_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3280 = input.readListBegin();
        var _size279 = _rtmp3280.size || 0;
        for (var _i281 = 0; _i281 < _size279; ++_i281) {
          var elem282 = null;
          elem282 = new Types_ttypes.LinkedNotebook();
          elem282[Symbol.for("read")](input);
          this.success.push(elem282);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_listLinkedNotebooks_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_listLinkedNotebooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter283 in this.success) {
      if (this.success.hasOwnProperty(iter283)) {
        iter283 = this.success[iter283];
        iter283[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_expungeLinkedNotebook_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_expungeLinkedNotebook_args.prototype = {};
NoteStore_expungeLinkedNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeLinkedNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_expungeLinkedNotebook_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_expungeLinkedNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_expungeLinkedNotebook_result.prototype = {};
NoteStore_expungeLinkedNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_expungeLinkedNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_expungeLinkedNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_authenticateToSharedNotebook_args = function(args) {
  this.shareKeyOrGlobalId = null;
  this.authenticationToken = null;
  if (args) {
    if (args.shareKeyOrGlobalId !== undefined && args.shareKeyOrGlobalId !== null) {
      this.shareKeyOrGlobalId = args.shareKeyOrGlobalId;
    }
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_authenticateToSharedNotebook_args.prototype = {};
NoteStore_authenticateToSharedNotebook_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.shareKeyOrGlobalId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_authenticateToSharedNotebook_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_authenticateToSharedNotebook_args');
  if (this.shareKeyOrGlobalId !== null && this.shareKeyOrGlobalId !== undefined) {
    output.writeFieldBegin('shareKeyOrGlobalId', Thrift.Type.STRING, 1);
    output.writeString(this.shareKeyOrGlobalId);
    output.writeFieldEnd();
  }
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 2);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_authenticateToSharedNotebook_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UserStore_ttypes.AuthenticationResult(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_authenticateToSharedNotebook_result.prototype = {};
NoteStore_authenticateToSharedNotebook_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UserStore_ttypes.AuthenticationResult();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_authenticateToSharedNotebook_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_authenticateToSharedNotebook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getSharedNotebookByAuth_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_getSharedNotebookByAuth_args.prototype = {};
NoteStore_getSharedNotebookByAuth_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSharedNotebookByAuth_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getSharedNotebookByAuth_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getSharedNotebookByAuth_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.SharedNotebook(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getSharedNotebookByAuth_result.prototype = {};
NoteStore_getSharedNotebookByAuth_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.SharedNotebook();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getSharedNotebookByAuth_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getSharedNotebookByAuth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_emailNote_args = function(args) {
  this.authenticationToken = null;
  this.parameters = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = new ttypes.NoteEmailParameters(args.parameters);
    }
  }
};
NoteStore_emailNote_args.prototype = {};
NoteStore_emailNote_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.parameters = new ttypes.NoteEmailParameters();
        this.parameters[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_emailNote_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_emailNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.STRUCT, 2);
    this.parameters[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_emailNote_result = function(args) {
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_emailNote_result.prototype = {};
NoteStore_emailNote_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_emailNote_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_emailNote_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_shareNote_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_shareNote_args.prototype = {};
NoteStore_shareNote_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_shareNote_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_shareNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_shareNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_shareNote_result.prototype = {};
NoteStore_shareNote_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_shareNote_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_shareNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_stopSharingNote_args = function(args) {
  this.authenticationToken = null;
  this.guid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
  }
};
NoteStore_stopSharingNote_args.prototype = {};
NoteStore_stopSharingNote_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_stopSharingNote_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_stopSharingNote_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_stopSharingNote_result = function(args) {
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_stopSharingNote_result.prototype = {};
NoteStore_stopSharingNote_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_stopSharingNote_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_stopSharingNote_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_authenticateToSharedNote_args = function(args) {
  this.guid = null;
  this.noteKey = null;
  this.authenticationToken = null;
  if (args) {
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.noteKey !== undefined && args.noteKey !== null) {
      this.noteKey = args.noteKey;
    }
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
NoteStore_authenticateToSharedNote_args.prototype = {};
NoteStore_authenticateToSharedNote_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.noteKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_authenticateToSharedNote_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_authenticateToSharedNote_args');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.noteKey !== null && this.noteKey !== undefined) {
    output.writeFieldBegin('noteKey', Thrift.Type.STRING, 2);
    output.writeString(this.noteKey);
    output.writeFieldEnd();
  }
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 3);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_authenticateToSharedNote_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UserStore_ttypes.AuthenticationResult(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_authenticateToSharedNote_result.prototype = {};
NoteStore_authenticateToSharedNote_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UserStore_ttypes.AuthenticationResult();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_authenticateToSharedNote_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_authenticateToSharedNote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_findRelated_args = function(args) {
  this.authenticationToken = null;
  this.query = null;
  this.resultSpec = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new ttypes.RelatedQuery(args.query);
    }
    if (args.resultSpec !== undefined && args.resultSpec !== null) {
      this.resultSpec = new ttypes.RelatedResultSpec(args.resultSpec);
    }
  }
};
NoteStore_findRelated_args.prototype = {};
NoteStore_findRelated_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ttypes.RelatedQuery();
        this.query[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSpec = new ttypes.RelatedResultSpec();
        this.resultSpec[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findRelated_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_findRelated_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.resultSpec !== null && this.resultSpec !== undefined) {
    output.writeFieldBegin('resultSpec', Thrift.Type.STRUCT, 3);
    this.resultSpec[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_findRelated_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RelatedResult(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
NoteStore_findRelated_result.prototype = {};
NoteStore_findRelated_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RelatedResult();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_findRelated_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_findRelated_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateNoteIfUsnMatches_args = function(args) {
  this.authenticationToken = null;
  this.note = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.note !== undefined && args.note !== null) {
      this.note = new Types_ttypes.Note(args.note);
    }
  }
};
NoteStore_updateNoteIfUsnMatches_args.prototype = {};
NoteStore_updateNoteIfUsnMatches_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Types_ttypes.Note();
        this.note[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNoteIfUsnMatches_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateNoteIfUsnMatches_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_updateNoteIfUsnMatches_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UpdateNoteIfUsnMatchesResult(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_updateNoteIfUsnMatches_result.prototype = {};
NoteStore_updateNoteIfUsnMatches_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UpdateNoteIfUsnMatchesResult();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_updateNoteIfUsnMatches_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_updateNoteIfUsnMatches_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_manageNotebookShares_args = function(args) {
  this.authenticationToken = null;
  this.parameters = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = new ttypes.ManageNotebookSharesParameters(args.parameters);
    }
  }
};
NoteStore_manageNotebookShares_args.prototype = {};
NoteStore_manageNotebookShares_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.parameters = new ttypes.ManageNotebookSharesParameters();
        this.parameters[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_manageNotebookShares_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_manageNotebookShares_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.STRUCT, 2);
    this.parameters[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_manageNotebookShares_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ManageNotebookSharesResult(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_manageNotebookShares_result.prototype = {};
NoteStore_manageNotebookShares_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ManageNotebookSharesResult();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_manageNotebookShares_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_manageNotebookShares_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNotebookShares_args = function(args) {
  this.authenticationToken = null;
  this.notebookGuid = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notebookGuid !== undefined && args.notebookGuid !== null) {
      this.notebookGuid = args.notebookGuid;
    }
  }
};
NoteStore_getNotebookShares_args.prototype = {};
NoteStore_getNotebookShares_args.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNotebookShares_args.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNotebookShares_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 2);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStore_getNotebookShares_result = function(args) {
  this.success = null;
  this.userException = null;
  this.notFoundException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ShareRelationships(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
NoteStore_getNotebookShares_result.prototype = {};
NoteStore_getNotebookShares_result.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ShareRelationships();
        this.success[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException();
        this.systemException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteStore_getNotebookShares_result.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteStore_getNotebookShares_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3);
    this.systemException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteStoreClient = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
NoteStoreClient.prototype = {};
NoteStoreClient.prototype.seqid = function() { return this._seqid; };
NoteStoreClient.prototype.new_seqid = function() { return this._seqid += 1; };

NoteStoreClient.prototype.getSyncState = function(authenticationToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSyncState(authenticationToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSyncState(authenticationToken);
  }
};

NoteStoreClient.prototype.send_getSyncState = function(authenticationToken) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken
  };
  var args = new NoteStore_getSyncState_args(params);
  try {
    output.writeMessageBegin('getSyncState', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getSyncState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getSyncState_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSyncState failed: unknown result');
};

NoteStoreClient.prototype.getFilteredSyncChunk = function(authenticationToken, afterUSN, maxEntries, filter, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter);
  }
};

NoteStoreClient.prototype.send_getFilteredSyncChunk = function(authenticationToken, afterUSN, maxEntries, filter) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    afterUSN: afterUSN,
    maxEntries: maxEntries,
    filter: filter
  };
  var args = new NoteStore_getFilteredSyncChunk_args(params);
  try {
    output.writeMessageBegin('getFilteredSyncChunk', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getFilteredSyncChunk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getFilteredSyncChunk_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFilteredSyncChunk failed: unknown result');
};

NoteStoreClient.prototype.getLinkedNotebookSyncState = function(authenticationToken, linkedNotebook, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLinkedNotebookSyncState(authenticationToken, linkedNotebook);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLinkedNotebookSyncState(authenticationToken, linkedNotebook);
  }
};

NoteStoreClient.prototype.send_getLinkedNotebookSyncState = function(authenticationToken, linkedNotebook) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    linkedNotebook: linkedNotebook
  };
  var args = new NoteStore_getLinkedNotebookSyncState_args(params);
  try {
    output.writeMessageBegin('getLinkedNotebookSyncState', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getLinkedNotebookSyncState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getLinkedNotebookSyncState_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLinkedNotebookSyncState failed: unknown result');
};

NoteStoreClient.prototype.getLinkedNotebookSyncChunk = function(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly);
  }
};

NoteStoreClient.prototype.send_getLinkedNotebookSyncChunk = function(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    linkedNotebook: linkedNotebook,
    afterUSN: afterUSN,
    maxEntries: maxEntries,
    fullSyncOnly: fullSyncOnly
  };
  var args = new NoteStore_getLinkedNotebookSyncChunk_args(params);
  try {
    output.writeMessageBegin('getLinkedNotebookSyncChunk', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getLinkedNotebookSyncChunk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getLinkedNotebookSyncChunk_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLinkedNotebookSyncChunk failed: unknown result');
};

NoteStoreClient.prototype.listNotebooks = function(authenticationToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listNotebooks(authenticationToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listNotebooks(authenticationToken);
  }
};

NoteStoreClient.prototype.send_listNotebooks = function(authenticationToken) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken
  };
  var args = new NoteStore_listNotebooks_args(params);
  try {
    output.writeMessageBegin('listNotebooks', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_listNotebooks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_listNotebooks_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listNotebooks failed: unknown result');
};

NoteStoreClient.prototype.listAccessibleBusinessNotebooks = function(authenticationToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listAccessibleBusinessNotebooks(authenticationToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listAccessibleBusinessNotebooks(authenticationToken);
  }
};

NoteStoreClient.prototype.send_listAccessibleBusinessNotebooks = function(authenticationToken) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken
  };
  var args = new NoteStore_listAccessibleBusinessNotebooks_args(params);
  try {
    output.writeMessageBegin('listAccessibleBusinessNotebooks', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_listAccessibleBusinessNotebooks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_listAccessibleBusinessNotebooks_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listAccessibleBusinessNotebooks failed: unknown result');
};

NoteStoreClient.prototype.getNotebook = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNotebook(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNotebook(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getNotebook = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getNotebook_args(params);
  try {
    output.writeMessageBegin('getNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNotebook failed: unknown result');
};

NoteStoreClient.prototype.getDefaultNotebook = function(authenticationToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDefaultNotebook(authenticationToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDefaultNotebook(authenticationToken);
  }
};

NoteStoreClient.prototype.send_getDefaultNotebook = function(authenticationToken) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken
  };
  var args = new NoteStore_getDefaultNotebook_args(params);
  try {
    output.writeMessageBegin('getDefaultNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getDefaultNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getDefaultNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDefaultNotebook failed: unknown result');
};

NoteStoreClient.prototype.createNotebook = function(authenticationToken, notebook, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createNotebook(authenticationToken, notebook);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createNotebook(authenticationToken, notebook);
  }
};

NoteStoreClient.prototype.send_createNotebook = function(authenticationToken, notebook) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    notebook: notebook
  };
  var args = new NoteStore_createNotebook_args(params);
  try {
    output.writeMessageBegin('createNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_createNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_createNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createNotebook failed: unknown result');
};

NoteStoreClient.prototype.updateNotebook = function(authenticationToken, notebook, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateNotebook(authenticationToken, notebook);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateNotebook(authenticationToken, notebook);
  }
};

NoteStoreClient.prototype.send_updateNotebook = function(authenticationToken, notebook) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    notebook: notebook
  };
  var args = new NoteStore_updateNotebook_args(params);
  try {
    output.writeMessageBegin('updateNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_updateNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_updateNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateNotebook failed: unknown result');
};

NoteStoreClient.prototype.expungeNotebook = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_expungeNotebook(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_expungeNotebook(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_expungeNotebook = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_expungeNotebook_args(params);
  try {
    output.writeMessageBegin('expungeNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_expungeNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_expungeNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('expungeNotebook failed: unknown result');
};

NoteStoreClient.prototype.listTags = function(authenticationToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listTags(authenticationToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listTags(authenticationToken);
  }
};

NoteStoreClient.prototype.send_listTags = function(authenticationToken) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken
  };
  var args = new NoteStore_listTags_args(params);
  try {
    output.writeMessageBegin('listTags', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_listTags = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_listTags_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listTags failed: unknown result');
};

NoteStoreClient.prototype.listTagsByNotebook = function(authenticationToken, notebookGuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listTagsByNotebook(authenticationToken, notebookGuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listTagsByNotebook(authenticationToken, notebookGuid);
  }
};

NoteStoreClient.prototype.send_listTagsByNotebook = function(authenticationToken, notebookGuid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    notebookGuid: notebookGuid
  };
  var args = new NoteStore_listTagsByNotebook_args(params);
  try {
    output.writeMessageBegin('listTagsByNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_listTagsByNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_listTagsByNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listTagsByNotebook failed: unknown result');
};

NoteStoreClient.prototype.getTag = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTag(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTag(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getTag = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getTag_args(params);
  try {
    output.writeMessageBegin('getTag', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getTag_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTag failed: unknown result');
};

NoteStoreClient.prototype.createTag = function(authenticationToken, tag, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createTag(authenticationToken, tag);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createTag(authenticationToken, tag);
  }
};

NoteStoreClient.prototype.send_createTag = function(authenticationToken, tag) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    tag: tag
  };
  var args = new NoteStore_createTag_args(params);
  try {
    output.writeMessageBegin('createTag', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_createTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_createTag_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createTag failed: unknown result');
};

NoteStoreClient.prototype.updateTag = function(authenticationToken, tag, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateTag(authenticationToken, tag);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateTag(authenticationToken, tag);
  }
};

NoteStoreClient.prototype.send_updateTag = function(authenticationToken, tag) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    tag: tag
  };
  var args = new NoteStore_updateTag_args(params);
  try {
    output.writeMessageBegin('updateTag', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_updateTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_updateTag_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateTag failed: unknown result');
};

NoteStoreClient.prototype.untagAll = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_untagAll(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_untagAll(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_untagAll = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_untagAll_args(params);
  try {
    output.writeMessageBegin('untagAll', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_untagAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_untagAll_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  callback(null);
};

NoteStoreClient.prototype.expungeTag = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_expungeTag(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_expungeTag(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_expungeTag = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_expungeTag_args(params);
  try {
    output.writeMessageBegin('expungeTag', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_expungeTag = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_expungeTag_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('expungeTag failed: unknown result');
};

NoteStoreClient.prototype.listSearches = function(authenticationToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listSearches(authenticationToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listSearches(authenticationToken);
  }
};

NoteStoreClient.prototype.send_listSearches = function(authenticationToken) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken
  };
  var args = new NoteStore_listSearches_args(params);
  try {
    output.writeMessageBegin('listSearches', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_listSearches = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_listSearches_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listSearches failed: unknown result');
};

NoteStoreClient.prototype.getSearch = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSearch(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSearch(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getSearch = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getSearch_args(params);
  try {
    output.writeMessageBegin('getSearch', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getSearch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getSearch_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSearch failed: unknown result');
};

NoteStoreClient.prototype.createSearch = function(authenticationToken, search, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createSearch(authenticationToken, search);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createSearch(authenticationToken, search);
  }
};

NoteStoreClient.prototype.send_createSearch = function(authenticationToken, search) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    search: search
  };
  var args = new NoteStore_createSearch_args(params);
  try {
    output.writeMessageBegin('createSearch', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_createSearch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_createSearch_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createSearch failed: unknown result');
};

NoteStoreClient.prototype.updateSearch = function(authenticationToken, search, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSearch(authenticationToken, search);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSearch(authenticationToken, search);
  }
};

NoteStoreClient.prototype.send_updateSearch = function(authenticationToken, search) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    search: search
  };
  var args = new NoteStore_updateSearch_args(params);
  try {
    output.writeMessageBegin('updateSearch', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_updateSearch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_updateSearch_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateSearch failed: unknown result');
};

NoteStoreClient.prototype.expungeSearch = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_expungeSearch(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_expungeSearch(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_expungeSearch = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_expungeSearch_args(params);
  try {
    output.writeMessageBegin('expungeSearch', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_expungeSearch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_expungeSearch_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('expungeSearch failed: unknown result');
};

NoteStoreClient.prototype.findNoteOffset = function(authenticationToken, filter, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findNoteOffset(authenticationToken, filter, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findNoteOffset(authenticationToken, filter, guid);
  }
};

NoteStoreClient.prototype.send_findNoteOffset = function(authenticationToken, filter, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    filter: filter,
    guid: guid
  };
  var args = new NoteStore_findNoteOffset_args(params);
  try {
    output.writeMessageBegin('findNoteOffset', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_findNoteOffset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_findNoteOffset_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findNoteOffset failed: unknown result');
};

NoteStoreClient.prototype.findNotesMetadata = function(authenticationToken, filter, offset, maxNotes, resultSpec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec);
  }
};

NoteStoreClient.prototype.send_findNotesMetadata = function(authenticationToken, filter, offset, maxNotes, resultSpec) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    filter: filter,
    offset: offset,
    maxNotes: maxNotes,
    resultSpec: resultSpec
  };
  var args = new NoteStore_findNotesMetadata_args(params);
  try {
    output.writeMessageBegin('findNotesMetadata', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_findNotesMetadata = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_findNotesMetadata_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findNotesMetadata failed: unknown result');
};

NoteStoreClient.prototype.findNoteCounts = function(authenticationToken, filter, withTrash, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findNoteCounts(authenticationToken, filter, withTrash);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findNoteCounts(authenticationToken, filter, withTrash);
  }
};

NoteStoreClient.prototype.send_findNoteCounts = function(authenticationToken, filter, withTrash) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    filter: filter,
    withTrash: withTrash
  };
  var args = new NoteStore_findNoteCounts_args(params);
  try {
    output.writeMessageBegin('findNoteCounts', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_findNoteCounts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_findNoteCounts_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findNoteCounts failed: unknown result');
};

NoteStoreClient.prototype.getNoteWithResultSpec = function(authenticationToken, guid, resultSpec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNoteWithResultSpec(authenticationToken, guid, resultSpec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNoteWithResultSpec(authenticationToken, guid, resultSpec);
  }
};

NoteStoreClient.prototype.send_getNoteWithResultSpec = function(authenticationToken, guid, resultSpec) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid,
    resultSpec: resultSpec
  };
  var args = new NoteStore_getNoteWithResultSpec_args(params);
  try {
    output.writeMessageBegin('getNoteWithResultSpec', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getNoteWithResultSpec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getNoteWithResultSpec_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNoteWithResultSpec failed: unknown result');
};

NoteStoreClient.prototype.getNote = function(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
  }
};

NoteStoreClient.prototype.send_getNote = function(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid,
    withContent: withContent,
    withResourcesData: withResourcesData,
    withResourcesRecognition: withResourcesRecognition,
    withResourcesAlternateData: withResourcesAlternateData
  };
  var args = new NoteStore_getNote_args(params);
  try {
    output.writeMessageBegin('getNote', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getNote_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNote failed: unknown result');
};

NoteStoreClient.prototype.getNoteApplicationData = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNoteApplicationData(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNoteApplicationData(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getNoteApplicationData = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getNoteApplicationData_args(params);
  try {
    output.writeMessageBegin('getNoteApplicationData', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getNoteApplicationData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getNoteApplicationData_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNoteApplicationData failed: unknown result');
};

NoteStoreClient.prototype.getNoteApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNoteApplicationDataEntry(authenticationToken, guid, key);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNoteApplicationDataEntry(authenticationToken, guid, key);
  }
};

NoteStoreClient.prototype.send_getNoteApplicationDataEntry = function(authenticationToken, guid, key) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid,
    key: key
  };
  var args = new NoteStore_getNoteApplicationDataEntry_args(params);
  try {
    output.writeMessageBegin('getNoteApplicationDataEntry', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getNoteApplicationDataEntry = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getNoteApplicationDataEntry_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNoteApplicationDataEntry failed: unknown result');
};

NoteStoreClient.prototype.setNoteApplicationDataEntry = function(authenticationToken, guid, key, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setNoteApplicationDataEntry(authenticationToken, guid, key, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setNoteApplicationDataEntry(authenticationToken, guid, key, value);
  }
};

NoteStoreClient.prototype.send_setNoteApplicationDataEntry = function(authenticationToken, guid, key, value) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid,
    key: key,
    value: value
  };
  var args = new NoteStore_setNoteApplicationDataEntry_args(params);
  try {
    output.writeMessageBegin('setNoteApplicationDataEntry', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_setNoteApplicationDataEntry = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_setNoteApplicationDataEntry_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setNoteApplicationDataEntry failed: unknown result');
};

NoteStoreClient.prototype.unsetNoteApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unsetNoteApplicationDataEntry(authenticationToken, guid, key);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unsetNoteApplicationDataEntry(authenticationToken, guid, key);
  }
};

NoteStoreClient.prototype.send_unsetNoteApplicationDataEntry = function(authenticationToken, guid, key) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid,
    key: key
  };
  var args = new NoteStore_unsetNoteApplicationDataEntry_args(params);
  try {
    output.writeMessageBegin('unsetNoteApplicationDataEntry', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_unsetNoteApplicationDataEntry = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_unsetNoteApplicationDataEntry_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('unsetNoteApplicationDataEntry failed: unknown result');
};

NoteStoreClient.prototype.getNoteContent = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNoteContent(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNoteContent(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getNoteContent = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getNoteContent_args(params);
  try {
    output.writeMessageBegin('getNoteContent', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getNoteContent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getNoteContent_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNoteContent failed: unknown result');
};

NoteStoreClient.prototype.getNoteSearchText = function(authenticationToken, guid, noteOnly, tokenizeForIndexing, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing);
  }
};

NoteStoreClient.prototype.send_getNoteSearchText = function(authenticationToken, guid, noteOnly, tokenizeForIndexing) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid,
    noteOnly: noteOnly,
    tokenizeForIndexing: tokenizeForIndexing
  };
  var args = new NoteStore_getNoteSearchText_args(params);
  try {
    output.writeMessageBegin('getNoteSearchText', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getNoteSearchText = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getNoteSearchText_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNoteSearchText failed: unknown result');
};

NoteStoreClient.prototype.getResourceSearchText = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getResourceSearchText(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getResourceSearchText(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getResourceSearchText = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getResourceSearchText_args(params);
  try {
    output.writeMessageBegin('getResourceSearchText', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getResourceSearchText = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getResourceSearchText_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getResourceSearchText failed: unknown result');
};

NoteStoreClient.prototype.getNoteTagNames = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNoteTagNames(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNoteTagNames(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getNoteTagNames = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getNoteTagNames_args(params);
  try {
    output.writeMessageBegin('getNoteTagNames', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getNoteTagNames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getNoteTagNames_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNoteTagNames failed: unknown result');
};

NoteStoreClient.prototype.createNote = function(authenticationToken, note, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createNote(authenticationToken, note);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createNote(authenticationToken, note);
  }
};

NoteStoreClient.prototype.send_createNote = function(authenticationToken, note) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    note: note
  };
  var args = new NoteStore_createNote_args(params);
  try {
    output.writeMessageBegin('createNote', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_createNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_createNote_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createNote failed: unknown result');
};

NoteStoreClient.prototype.updateNote = function(authenticationToken, note, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateNote(authenticationToken, note);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateNote(authenticationToken, note);
  }
};

NoteStoreClient.prototype.send_updateNote = function(authenticationToken, note) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    note: note
  };
  var args = new NoteStore_updateNote_args(params);
  try {
    output.writeMessageBegin('updateNote', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_updateNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_updateNote_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateNote failed: unknown result');
};

NoteStoreClient.prototype.deleteNote = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteNote(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteNote(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_deleteNote = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_deleteNote_args(params);
  try {
    output.writeMessageBegin('deleteNote', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_deleteNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_deleteNote_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteNote failed: unknown result');
};

NoteStoreClient.prototype.expungeNote = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_expungeNote(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_expungeNote(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_expungeNote = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_expungeNote_args(params);
  try {
    output.writeMessageBegin('expungeNote', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_expungeNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_expungeNote_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('expungeNote failed: unknown result');
};

NoteStoreClient.prototype.copyNote = function(authenticationToken, noteGuid, toNotebookGuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_copyNote(authenticationToken, noteGuid, toNotebookGuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_copyNote(authenticationToken, noteGuid, toNotebookGuid);
  }
};

NoteStoreClient.prototype.send_copyNote = function(authenticationToken, noteGuid, toNotebookGuid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    noteGuid: noteGuid,
    toNotebookGuid: toNotebookGuid
  };
  var args = new NoteStore_copyNote_args(params);
  try {
    output.writeMessageBegin('copyNote', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_copyNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_copyNote_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('copyNote failed: unknown result');
};

NoteStoreClient.prototype.listNoteVersions = function(authenticationToken, noteGuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listNoteVersions(authenticationToken, noteGuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listNoteVersions(authenticationToken, noteGuid);
  }
};

NoteStoreClient.prototype.send_listNoteVersions = function(authenticationToken, noteGuid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    noteGuid: noteGuid
  };
  var args = new NoteStore_listNoteVersions_args(params);
  try {
    output.writeMessageBegin('listNoteVersions', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_listNoteVersions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_listNoteVersions_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listNoteVersions failed: unknown result');
};

NoteStoreClient.prototype.getNoteVersion = function(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
  }
};

NoteStoreClient.prototype.send_getNoteVersion = function(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    noteGuid: noteGuid,
    updateSequenceNum: updateSequenceNum,
    withResourcesData: withResourcesData,
    withResourcesRecognition: withResourcesRecognition,
    withResourcesAlternateData: withResourcesAlternateData
  };
  var args = new NoteStore_getNoteVersion_args(params);
  try {
    output.writeMessageBegin('getNoteVersion', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getNoteVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getNoteVersion_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNoteVersion failed: unknown result');
};

NoteStoreClient.prototype.getResource = function(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData);
  }
};

NoteStoreClient.prototype.send_getResource = function(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid,
    withData: withData,
    withRecognition: withRecognition,
    withAttributes: withAttributes,
    withAlternateData: withAlternateData
  };
  var args = new NoteStore_getResource_args(params);
  try {
    output.writeMessageBegin('getResource', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getResource = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getResource_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getResource failed: unknown result');
};

NoteStoreClient.prototype.getResourceApplicationData = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getResourceApplicationData(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getResourceApplicationData(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getResourceApplicationData = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getResourceApplicationData_args(params);
  try {
    output.writeMessageBegin('getResourceApplicationData', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getResourceApplicationData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getResourceApplicationData_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getResourceApplicationData failed: unknown result');
};

NoteStoreClient.prototype.getResourceApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getResourceApplicationDataEntry(authenticationToken, guid, key);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getResourceApplicationDataEntry(authenticationToken, guid, key);
  }
};

NoteStoreClient.prototype.send_getResourceApplicationDataEntry = function(authenticationToken, guid, key) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid,
    key: key
  };
  var args = new NoteStore_getResourceApplicationDataEntry_args(params);
  try {
    output.writeMessageBegin('getResourceApplicationDataEntry', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getResourceApplicationDataEntry = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getResourceApplicationDataEntry_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getResourceApplicationDataEntry failed: unknown result');
};

NoteStoreClient.prototype.setResourceApplicationDataEntry = function(authenticationToken, guid, key, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setResourceApplicationDataEntry(authenticationToken, guid, key, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setResourceApplicationDataEntry(authenticationToken, guid, key, value);
  }
};

NoteStoreClient.prototype.send_setResourceApplicationDataEntry = function(authenticationToken, guid, key, value) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid,
    key: key,
    value: value
  };
  var args = new NoteStore_setResourceApplicationDataEntry_args(params);
  try {
    output.writeMessageBegin('setResourceApplicationDataEntry', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_setResourceApplicationDataEntry = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_setResourceApplicationDataEntry_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setResourceApplicationDataEntry failed: unknown result');
};

NoteStoreClient.prototype.unsetResourceApplicationDataEntry = function(authenticationToken, guid, key, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unsetResourceApplicationDataEntry(authenticationToken, guid, key);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unsetResourceApplicationDataEntry(authenticationToken, guid, key);
  }
};

NoteStoreClient.prototype.send_unsetResourceApplicationDataEntry = function(authenticationToken, guid, key) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid,
    key: key
  };
  var args = new NoteStore_unsetResourceApplicationDataEntry_args(params);
  try {
    output.writeMessageBegin('unsetResourceApplicationDataEntry', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_unsetResourceApplicationDataEntry = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_unsetResourceApplicationDataEntry_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('unsetResourceApplicationDataEntry failed: unknown result');
};

NoteStoreClient.prototype.updateResource = function(authenticationToken, resource, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateResource(authenticationToken, resource);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateResource(authenticationToken, resource);
  }
};

NoteStoreClient.prototype.send_updateResource = function(authenticationToken, resource) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    resource: resource
  };
  var args = new NoteStore_updateResource_args(params);
  try {
    output.writeMessageBegin('updateResource', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_updateResource = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_updateResource_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateResource failed: unknown result');
};

NoteStoreClient.prototype.getResourceData = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getResourceData(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getResourceData(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getResourceData = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getResourceData_args(params);
  try {
    output.writeMessageBegin('getResourceData', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getResourceData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getResourceData_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getResourceData failed: unknown result');
};

NoteStoreClient.prototype.getResourceByHash = function(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData);
  }
};

NoteStoreClient.prototype.send_getResourceByHash = function(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    noteGuid: noteGuid,
    contentHash: contentHash,
    withData: withData,
    withRecognition: withRecognition,
    withAlternateData: withAlternateData
  };
  var args = new NoteStore_getResourceByHash_args(params);
  try {
    output.writeMessageBegin('getResourceByHash', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getResourceByHash = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getResourceByHash_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getResourceByHash failed: unknown result');
};

NoteStoreClient.prototype.getResourceRecognition = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getResourceRecognition(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getResourceRecognition(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getResourceRecognition = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getResourceRecognition_args(params);
  try {
    output.writeMessageBegin('getResourceRecognition', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getResourceRecognition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getResourceRecognition_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getResourceRecognition failed: unknown result');
};

NoteStoreClient.prototype.getResourceAlternateData = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getResourceAlternateData(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getResourceAlternateData(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getResourceAlternateData = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getResourceAlternateData_args(params);
  try {
    output.writeMessageBegin('getResourceAlternateData', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getResourceAlternateData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getResourceAlternateData_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getResourceAlternateData failed: unknown result');
};

NoteStoreClient.prototype.getResourceAttributes = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getResourceAttributes(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getResourceAttributes(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_getResourceAttributes = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_getResourceAttributes_args(params);
  try {
    output.writeMessageBegin('getResourceAttributes', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getResourceAttributes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getResourceAttributes_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getResourceAttributes failed: unknown result');
};

NoteStoreClient.prototype.getPublicNotebook = function(userId, publicUri, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPublicNotebook(userId, publicUri);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPublicNotebook(userId, publicUri);
  }
};

NoteStoreClient.prototype.send_getPublicNotebook = function(userId, publicUri) {
  var output = new this.pClass(this.output);
  var params = {
    userId: userId,
    publicUri: publicUri
  };
  var args = new NoteStore_getPublicNotebook_args(params);
  try {
    output.writeMessageBegin('getPublicNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getPublicNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getPublicNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPublicNotebook failed: unknown result');
};

NoteStoreClient.prototype.shareNotebook = function(authenticationToken, sharedNotebook, message, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shareNotebook(authenticationToken, sharedNotebook, message);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shareNotebook(authenticationToken, sharedNotebook, message);
  }
};

NoteStoreClient.prototype.send_shareNotebook = function(authenticationToken, sharedNotebook, message) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    sharedNotebook: sharedNotebook,
    message: message
  };
  var args = new NoteStore_shareNotebook_args(params);
  try {
    output.writeMessageBegin('shareNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_shareNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_shareNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('shareNotebook failed: unknown result');
};

NoteStoreClient.prototype.createOrUpdateNotebookShares = function(authenticationToken, shareTemplate, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createOrUpdateNotebookShares(authenticationToken, shareTemplate);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createOrUpdateNotebookShares(authenticationToken, shareTemplate);
  }
};

NoteStoreClient.prototype.send_createOrUpdateNotebookShares = function(authenticationToken, shareTemplate) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    shareTemplate: shareTemplate
  };
  var args = new NoteStore_createOrUpdateNotebookShares_args(params);
  try {
    output.writeMessageBegin('createOrUpdateNotebookShares', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_createOrUpdateNotebookShares = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_createOrUpdateNotebookShares_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.invalidContactsException) {
    return callback(result.invalidContactsException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createOrUpdateNotebookShares failed: unknown result');
};

NoteStoreClient.prototype.updateSharedNotebook = function(authenticationToken, sharedNotebook, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSharedNotebook(authenticationToken, sharedNotebook);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSharedNotebook(authenticationToken, sharedNotebook);
  }
};

NoteStoreClient.prototype.send_updateSharedNotebook = function(authenticationToken, sharedNotebook) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    sharedNotebook: sharedNotebook
  };
  var args = new NoteStore_updateSharedNotebook_args(params);
  try {
    output.writeMessageBegin('updateSharedNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_updateSharedNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_updateSharedNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateSharedNotebook failed: unknown result');
};

NoteStoreClient.prototype.setNotebookRecipientSettings = function(authenticationToken, notebookGuid, recipientSettings, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setNotebookRecipientSettings(authenticationToken, notebookGuid, recipientSettings);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setNotebookRecipientSettings(authenticationToken, notebookGuid, recipientSettings);
  }
};

NoteStoreClient.prototype.send_setNotebookRecipientSettings = function(authenticationToken, notebookGuid, recipientSettings) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    notebookGuid: notebookGuid,
    recipientSettings: recipientSettings
  };
  var args = new NoteStore_setNotebookRecipientSettings_args(params);
  try {
    output.writeMessageBegin('setNotebookRecipientSettings', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_setNotebookRecipientSettings = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_setNotebookRecipientSettings_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setNotebookRecipientSettings failed: unknown result');
};

NoteStoreClient.prototype.listSharedNotebooks = function(authenticationToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listSharedNotebooks(authenticationToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listSharedNotebooks(authenticationToken);
  }
};

NoteStoreClient.prototype.send_listSharedNotebooks = function(authenticationToken) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken
  };
  var args = new NoteStore_listSharedNotebooks_args(params);
  try {
    output.writeMessageBegin('listSharedNotebooks', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_listSharedNotebooks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_listSharedNotebooks_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listSharedNotebooks failed: unknown result');
};

NoteStoreClient.prototype.createLinkedNotebook = function(authenticationToken, linkedNotebook, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createLinkedNotebook(authenticationToken, linkedNotebook);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createLinkedNotebook(authenticationToken, linkedNotebook);
  }
};

NoteStoreClient.prototype.send_createLinkedNotebook = function(authenticationToken, linkedNotebook) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    linkedNotebook: linkedNotebook
  };
  var args = new NoteStore_createLinkedNotebook_args(params);
  try {
    output.writeMessageBegin('createLinkedNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_createLinkedNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_createLinkedNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createLinkedNotebook failed: unknown result');
};

NoteStoreClient.prototype.updateLinkedNotebook = function(authenticationToken, linkedNotebook, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateLinkedNotebook(authenticationToken, linkedNotebook);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateLinkedNotebook(authenticationToken, linkedNotebook);
  }
};

NoteStoreClient.prototype.send_updateLinkedNotebook = function(authenticationToken, linkedNotebook) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    linkedNotebook: linkedNotebook
  };
  var args = new NoteStore_updateLinkedNotebook_args(params);
  try {
    output.writeMessageBegin('updateLinkedNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_updateLinkedNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_updateLinkedNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateLinkedNotebook failed: unknown result');
};

NoteStoreClient.prototype.listLinkedNotebooks = function(authenticationToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listLinkedNotebooks(authenticationToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listLinkedNotebooks(authenticationToken);
  }
};

NoteStoreClient.prototype.send_listLinkedNotebooks = function(authenticationToken) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken
  };
  var args = new NoteStore_listLinkedNotebooks_args(params);
  try {
    output.writeMessageBegin('listLinkedNotebooks', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_listLinkedNotebooks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_listLinkedNotebooks_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listLinkedNotebooks failed: unknown result');
};

NoteStoreClient.prototype.expungeLinkedNotebook = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_expungeLinkedNotebook(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_expungeLinkedNotebook(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_expungeLinkedNotebook = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_expungeLinkedNotebook_args(params);
  try {
    output.writeMessageBegin('expungeLinkedNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_expungeLinkedNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_expungeLinkedNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('expungeLinkedNotebook failed: unknown result');
};

NoteStoreClient.prototype.authenticateToSharedNotebook = function(shareKeyOrGlobalId, authenticationToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_authenticateToSharedNotebook(shareKeyOrGlobalId, authenticationToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_authenticateToSharedNotebook(shareKeyOrGlobalId, authenticationToken);
  }
};

NoteStoreClient.prototype.send_authenticateToSharedNotebook = function(shareKeyOrGlobalId, authenticationToken) {
  var output = new this.pClass(this.output);
  var params = {
    shareKeyOrGlobalId: shareKeyOrGlobalId,
    authenticationToken: authenticationToken
  };
  var args = new NoteStore_authenticateToSharedNotebook_args(params);
  try {
    output.writeMessageBegin('authenticateToSharedNotebook', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_authenticateToSharedNotebook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_authenticateToSharedNotebook_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('authenticateToSharedNotebook failed: unknown result');
};

NoteStoreClient.prototype.getSharedNotebookByAuth = function(authenticationToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSharedNotebookByAuth(authenticationToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSharedNotebookByAuth(authenticationToken);
  }
};

NoteStoreClient.prototype.send_getSharedNotebookByAuth = function(authenticationToken) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken
  };
  var args = new NoteStore_getSharedNotebookByAuth_args(params);
  try {
    output.writeMessageBegin('getSharedNotebookByAuth', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getSharedNotebookByAuth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getSharedNotebookByAuth_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSharedNotebookByAuth failed: unknown result');
};

NoteStoreClient.prototype.emailNote = function(authenticationToken, parameters, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_emailNote(authenticationToken, parameters);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_emailNote(authenticationToken, parameters);
  }
};

NoteStoreClient.prototype.send_emailNote = function(authenticationToken, parameters) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    parameters: parameters
  };
  var args = new NoteStore_emailNote_args(params);
  try {
    output.writeMessageBegin('emailNote', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_emailNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_emailNote_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  callback(null);
};

NoteStoreClient.prototype.shareNote = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shareNote(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shareNote(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_shareNote = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_shareNote_args(params);
  try {
    output.writeMessageBegin('shareNote', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_shareNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_shareNote_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('shareNote failed: unknown result');
};

NoteStoreClient.prototype.stopSharingNote = function(authenticationToken, guid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stopSharingNote(authenticationToken, guid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stopSharingNote(authenticationToken, guid);
  }
};

NoteStoreClient.prototype.send_stopSharingNote = function(authenticationToken, guid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    guid: guid
  };
  var args = new NoteStore_stopSharingNote_args(params);
  try {
    output.writeMessageBegin('stopSharingNote', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_stopSharingNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_stopSharingNote_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  callback(null);
};

NoteStoreClient.prototype.authenticateToSharedNote = function(guid, noteKey, authenticationToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_authenticateToSharedNote(guid, noteKey, authenticationToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_authenticateToSharedNote(guid, noteKey, authenticationToken);
  }
};

NoteStoreClient.prototype.send_authenticateToSharedNote = function(guid, noteKey, authenticationToken) {
  var output = new this.pClass(this.output);
  var params = {
    guid: guid,
    noteKey: noteKey,
    authenticationToken: authenticationToken
  };
  var args = new NoteStore_authenticateToSharedNote_args(params);
  try {
    output.writeMessageBegin('authenticateToSharedNote', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_authenticateToSharedNote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_authenticateToSharedNote_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('authenticateToSharedNote failed: unknown result');
};

NoteStoreClient.prototype.findRelated = function(authenticationToken, query, resultSpec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findRelated(authenticationToken, query, resultSpec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findRelated(authenticationToken, query, resultSpec);
  }
};

NoteStoreClient.prototype.send_findRelated = function(authenticationToken, query, resultSpec) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    query: query,
    resultSpec: resultSpec
  };
  var args = new NoteStore_findRelated_args(params);
  try {
    output.writeMessageBegin('findRelated', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_findRelated = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_findRelated_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findRelated failed: unknown result');
};

NoteStoreClient.prototype.updateNoteIfUsnMatches = function(authenticationToken, note, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateNoteIfUsnMatches(authenticationToken, note);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateNoteIfUsnMatches(authenticationToken, note);
  }
};

NoteStoreClient.prototype.send_updateNoteIfUsnMatches = function(authenticationToken, note) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    note: note
  };
  var args = new NoteStore_updateNoteIfUsnMatches_args(params);
  try {
    output.writeMessageBegin('updateNoteIfUsnMatches', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_updateNoteIfUsnMatches = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_updateNoteIfUsnMatches_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateNoteIfUsnMatches failed: unknown result');
};

NoteStoreClient.prototype.manageNotebookShares = function(authenticationToken, parameters, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_manageNotebookShares(authenticationToken, parameters);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_manageNotebookShares(authenticationToken, parameters);
  }
};

NoteStoreClient.prototype.send_manageNotebookShares = function(authenticationToken, parameters) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    parameters: parameters
  };
  var args = new NoteStore_manageNotebookShares_args(params);
  try {
    output.writeMessageBegin('manageNotebookShares', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_manageNotebookShares = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_manageNotebookShares_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('manageNotebookShares failed: unknown result');
};

NoteStoreClient.prototype.getNotebookShares = function(authenticationToken, notebookGuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNotebookShares(authenticationToken, notebookGuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNotebookShares(authenticationToken, notebookGuid);
  }
};

NoteStoreClient.prototype.send_getNotebookShares = function(authenticationToken, notebookGuid) {
  var output = new this.pClass(this.output);
  var params = {
    authenticationToken: authenticationToken,
    notebookGuid: notebookGuid
  };
  var args = new NoteStore_getNotebookShares_args(params);
  try {
    output.writeMessageBegin('getNotebookShares', Thrift.MessageType.CALL, this.seqid());
    args[Symbol.for("write")](output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

NoteStoreClient.prototype.recv_getNotebookShares = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x[Symbol.for("read")](input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NoteStore_getNotebookShares_result();
  result[Symbol.for("read")](input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNotebookShares failed: unknown result');
};
exports.Client = NoteStoreClient;
var NoteStoreProcessor = function(handler) {
  this._handler = handler;
};
NoteStoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x[Symbol.for("write")](output);
    output.writeMessageEnd();
    output.flush();
  }
};
NoteStoreProcessor.prototype.process_getSyncState = function(seqid, input, output) {
  var args = new NoteStore_getSyncState_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getSyncState.length === 1) {
    Q.fcall(this._handler.getSyncState.bind(this._handler),
      args.authenticationToken
    ).then(function(result) {
      var result_obj = new NoteStore_getSyncState_result({success: result});
      output.writeMessageBegin("getSyncState", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_getSyncState_result(err);
        output.writeMessageBegin("getSyncState", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSyncState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getSyncState(args.authenticationToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_getSyncState_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSyncState", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSyncState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getFilteredSyncChunk = function(seqid, input, output) {
  var args = new NoteStore_getFilteredSyncChunk_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getFilteredSyncChunk.length === 4) {
    Q.fcall(this._handler.getFilteredSyncChunk.bind(this._handler),
      args.authenticationToken,
      args.afterUSN,
      args.maxEntries,
      args.filter
    ).then(function(result) {
      var result_obj = new NoteStore_getFilteredSyncChunk_result({success: result});
      output.writeMessageBegin("getFilteredSyncChunk", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_getFilteredSyncChunk_result(err);
        output.writeMessageBegin("getFilteredSyncChunk", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFilteredSyncChunk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getFilteredSyncChunk(args.authenticationToken, args.afterUSN, args.maxEntries, args.filter, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_getFilteredSyncChunk_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getFilteredSyncChunk", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getFilteredSyncChunk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getLinkedNotebookSyncState = function(seqid, input, output) {
  var args = new NoteStore_getLinkedNotebookSyncState_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getLinkedNotebookSyncState.length === 2) {
    Q.fcall(this._handler.getLinkedNotebookSyncState.bind(this._handler),
      args.authenticationToken,
      args.linkedNotebook
    ).then(function(result) {
      var result_obj = new NoteStore_getLinkedNotebookSyncState_result({success: result});
      output.writeMessageBegin("getLinkedNotebookSyncState", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getLinkedNotebookSyncState_result(err);
        output.writeMessageBegin("getLinkedNotebookSyncState", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLinkedNotebookSyncState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getLinkedNotebookSyncState(args.authenticationToken, args.linkedNotebook, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getLinkedNotebookSyncState_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLinkedNotebookSyncState", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLinkedNotebookSyncState", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getLinkedNotebookSyncChunk = function(seqid, input, output) {
  var args = new NoteStore_getLinkedNotebookSyncChunk_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getLinkedNotebookSyncChunk.length === 5) {
    Q.fcall(this._handler.getLinkedNotebookSyncChunk.bind(this._handler),
      args.authenticationToken,
      args.linkedNotebook,
      args.afterUSN,
      args.maxEntries,
      args.fullSyncOnly
    ).then(function(result) {
      var result_obj = new NoteStore_getLinkedNotebookSyncChunk_result({success: result});
      output.writeMessageBegin("getLinkedNotebookSyncChunk", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getLinkedNotebookSyncChunk_result(err);
        output.writeMessageBegin("getLinkedNotebookSyncChunk", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLinkedNotebookSyncChunk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getLinkedNotebookSyncChunk(args.authenticationToken, args.linkedNotebook, args.afterUSN, args.maxEntries, args.fullSyncOnly, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getLinkedNotebookSyncChunk_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLinkedNotebookSyncChunk", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLinkedNotebookSyncChunk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_listNotebooks = function(seqid, input, output) {
  var args = new NoteStore_listNotebooks_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.listNotebooks.length === 1) {
    Q.fcall(this._handler.listNotebooks.bind(this._handler),
      args.authenticationToken
    ).then(function(result) {
      var result_obj = new NoteStore_listNotebooks_result({success: result});
      output.writeMessageBegin("listNotebooks", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_listNotebooks_result(err);
        output.writeMessageBegin("listNotebooks", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listNotebooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.listNotebooks(args.authenticationToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_listNotebooks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listNotebooks", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listNotebooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_listAccessibleBusinessNotebooks = function(seqid, input, output) {
  var args = new NoteStore_listAccessibleBusinessNotebooks_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.listAccessibleBusinessNotebooks.length === 1) {
    Q.fcall(this._handler.listAccessibleBusinessNotebooks.bind(this._handler),
      args.authenticationToken
    ).then(function(result) {
      var result_obj = new NoteStore_listAccessibleBusinessNotebooks_result({success: result});
      output.writeMessageBegin("listAccessibleBusinessNotebooks", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_listAccessibleBusinessNotebooks_result(err);
        output.writeMessageBegin("listAccessibleBusinessNotebooks", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listAccessibleBusinessNotebooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.listAccessibleBusinessNotebooks(args.authenticationToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_listAccessibleBusinessNotebooks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listAccessibleBusinessNotebooks", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listAccessibleBusinessNotebooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getNotebook = function(seqid, input, output) {
  var args = new NoteStore_getNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getNotebook.length === 2) {
    Q.fcall(this._handler.getNotebook.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getNotebook_result({success: result});
      output.writeMessageBegin("getNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getNotebook_result(err);
        output.writeMessageBegin("getNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNotebook(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getDefaultNotebook = function(seqid, input, output) {
  var args = new NoteStore_getDefaultNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getDefaultNotebook.length === 1) {
    Q.fcall(this._handler.getDefaultNotebook.bind(this._handler),
      args.authenticationToken
    ).then(function(result) {
      var result_obj = new NoteStore_getDefaultNotebook_result({success: result});
      output.writeMessageBegin("getDefaultNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_getDefaultNotebook_result(err);
        output.writeMessageBegin("getDefaultNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDefaultNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getDefaultNotebook(args.authenticationToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_getDefaultNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDefaultNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDefaultNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_createNotebook = function(seqid, input, output) {
  var args = new NoteStore_createNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.createNotebook.length === 2) {
    Q.fcall(this._handler.createNotebook.bind(this._handler),
      args.authenticationToken,
      args.notebook
    ).then(function(result) {
      var result_obj = new NoteStore_createNotebook_result({success: result});
      output.writeMessageBegin("createNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_createNotebook_result(err);
        output.writeMessageBegin("createNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createNotebook(args.authenticationToken, args.notebook, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_createNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_updateNotebook = function(seqid, input, output) {
  var args = new NoteStore_updateNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.updateNotebook.length === 2) {
    Q.fcall(this._handler.updateNotebook.bind(this._handler),
      args.authenticationToken,
      args.notebook
    ).then(function(result) {
      var result_obj = new NoteStore_updateNotebook_result({success: result});
      output.writeMessageBegin("updateNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_updateNotebook_result(err);
        output.writeMessageBegin("updateNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateNotebook(args.authenticationToken, args.notebook, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_updateNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_expungeNotebook = function(seqid, input, output) {
  var args = new NoteStore_expungeNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.expungeNotebook.length === 2) {
    Q.fcall(this._handler.expungeNotebook.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_expungeNotebook_result({success: result});
      output.writeMessageBegin("expungeNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_expungeNotebook_result(err);
        output.writeMessageBegin("expungeNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("expungeNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.expungeNotebook(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_expungeNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("expungeNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("expungeNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_listTags = function(seqid, input, output) {
  var args = new NoteStore_listTags_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.listTags.length === 1) {
    Q.fcall(this._handler.listTags.bind(this._handler),
      args.authenticationToken
    ).then(function(result) {
      var result_obj = new NoteStore_listTags_result({success: result});
      output.writeMessageBegin("listTags", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_listTags_result(err);
        output.writeMessageBegin("listTags", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listTags", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.listTags(args.authenticationToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_listTags_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listTags", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listTags", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_listTagsByNotebook = function(seqid, input, output) {
  var args = new NoteStore_listTagsByNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.listTagsByNotebook.length === 2) {
    Q.fcall(this._handler.listTagsByNotebook.bind(this._handler),
      args.authenticationToken,
      args.notebookGuid
    ).then(function(result) {
      var result_obj = new NoteStore_listTagsByNotebook_result({success: result});
      output.writeMessageBegin("listTagsByNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_listTagsByNotebook_result(err);
        output.writeMessageBegin("listTagsByNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listTagsByNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.listTagsByNotebook(args.authenticationToken, args.notebookGuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_listTagsByNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listTagsByNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listTagsByNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getTag = function(seqid, input, output) {
  var args = new NoteStore_getTag_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getTag.length === 2) {
    Q.fcall(this._handler.getTag.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getTag_result({success: result});
      output.writeMessageBegin("getTag", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getTag_result(err);
        output.writeMessageBegin("getTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getTag(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getTag_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_createTag = function(seqid, input, output) {
  var args = new NoteStore_createTag_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.createTag.length === 2) {
    Q.fcall(this._handler.createTag.bind(this._handler),
      args.authenticationToken,
      args.tag
    ).then(function(result) {
      var result_obj = new NoteStore_createTag_result({success: result});
      output.writeMessageBegin("createTag", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_createTag_result(err);
        output.writeMessageBegin("createTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createTag(args.authenticationToken, args.tag, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_createTag_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_updateTag = function(seqid, input, output) {
  var args = new NoteStore_updateTag_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.updateTag.length === 2) {
    Q.fcall(this._handler.updateTag.bind(this._handler),
      args.authenticationToken,
      args.tag
    ).then(function(result) {
      var result_obj = new NoteStore_updateTag_result({success: result});
      output.writeMessageBegin("updateTag", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_updateTag_result(err);
        output.writeMessageBegin("updateTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateTag(args.authenticationToken, args.tag, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_updateTag_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_untagAll = function(seqid, input, output) {
  var args = new NoteStore_untagAll_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.untagAll.length === 2) {
    Q.fcall(this._handler.untagAll.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_untagAll_result({success: result});
      output.writeMessageBegin("untagAll", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_untagAll_result(err);
        output.writeMessageBegin("untagAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("untagAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.untagAll(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_untagAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("untagAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("untagAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_expungeTag = function(seqid, input, output) {
  var args = new NoteStore_expungeTag_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.expungeTag.length === 2) {
    Q.fcall(this._handler.expungeTag.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_expungeTag_result({success: result});
      output.writeMessageBegin("expungeTag", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_expungeTag_result(err);
        output.writeMessageBegin("expungeTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("expungeTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.expungeTag(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_expungeTag_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("expungeTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("expungeTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_listSearches = function(seqid, input, output) {
  var args = new NoteStore_listSearches_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.listSearches.length === 1) {
    Q.fcall(this._handler.listSearches.bind(this._handler),
      args.authenticationToken
    ).then(function(result) {
      var result_obj = new NoteStore_listSearches_result({success: result});
      output.writeMessageBegin("listSearches", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_listSearches_result(err);
        output.writeMessageBegin("listSearches", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listSearches", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.listSearches(args.authenticationToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_listSearches_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listSearches", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listSearches", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getSearch = function(seqid, input, output) {
  var args = new NoteStore_getSearch_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getSearch.length === 2) {
    Q.fcall(this._handler.getSearch.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getSearch_result({success: result});
      output.writeMessageBegin("getSearch", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getSearch_result(err);
        output.writeMessageBegin("getSearch", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSearch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getSearch(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getSearch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSearch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSearch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_createSearch = function(seqid, input, output) {
  var args = new NoteStore_createSearch_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.createSearch.length === 2) {
    Q.fcall(this._handler.createSearch.bind(this._handler),
      args.authenticationToken,
      args.search
    ).then(function(result) {
      var result_obj = new NoteStore_createSearch_result({success: result});
      output.writeMessageBegin("createSearch", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_createSearch_result(err);
        output.writeMessageBegin("createSearch", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createSearch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createSearch(args.authenticationToken, args.search, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_createSearch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createSearch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createSearch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_updateSearch = function(seqid, input, output) {
  var args = new NoteStore_updateSearch_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.updateSearch.length === 2) {
    Q.fcall(this._handler.updateSearch.bind(this._handler),
      args.authenticationToken,
      args.search
    ).then(function(result) {
      var result_obj = new NoteStore_updateSearch_result({success: result});
      output.writeMessageBegin("updateSearch", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_updateSearch_result(err);
        output.writeMessageBegin("updateSearch", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSearch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateSearch(args.authenticationToken, args.search, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_updateSearch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateSearch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSearch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_expungeSearch = function(seqid, input, output) {
  var args = new NoteStore_expungeSearch_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.expungeSearch.length === 2) {
    Q.fcall(this._handler.expungeSearch.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_expungeSearch_result({success: result});
      output.writeMessageBegin("expungeSearch", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_expungeSearch_result(err);
        output.writeMessageBegin("expungeSearch", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("expungeSearch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.expungeSearch(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_expungeSearch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("expungeSearch", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("expungeSearch", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_findNoteOffset = function(seqid, input, output) {
  var args = new NoteStore_findNoteOffset_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.findNoteOffset.length === 3) {
    Q.fcall(this._handler.findNoteOffset.bind(this._handler),
      args.authenticationToken,
      args.filter,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_findNoteOffset_result({success: result});
      output.writeMessageBegin("findNoteOffset", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_findNoteOffset_result(err);
        output.writeMessageBegin("findNoteOffset", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findNoteOffset", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.findNoteOffset(args.authenticationToken, args.filter, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_findNoteOffset_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findNoteOffset", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findNoteOffset", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_findNotesMetadata = function(seqid, input, output) {
  var args = new NoteStore_findNotesMetadata_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.findNotesMetadata.length === 5) {
    Q.fcall(this._handler.findNotesMetadata.bind(this._handler),
      args.authenticationToken,
      args.filter,
      args.offset,
      args.maxNotes,
      args.resultSpec
    ).then(function(result) {
      var result_obj = new NoteStore_findNotesMetadata_result({success: result});
      output.writeMessageBegin("findNotesMetadata", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_findNotesMetadata_result(err);
        output.writeMessageBegin("findNotesMetadata", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findNotesMetadata", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.findNotesMetadata(args.authenticationToken, args.filter, args.offset, args.maxNotes, args.resultSpec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_findNotesMetadata_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findNotesMetadata", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findNotesMetadata", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_findNoteCounts = function(seqid, input, output) {
  var args = new NoteStore_findNoteCounts_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.findNoteCounts.length === 3) {
    Q.fcall(this._handler.findNoteCounts.bind(this._handler),
      args.authenticationToken,
      args.filter,
      args.withTrash
    ).then(function(result) {
      var result_obj = new NoteStore_findNoteCounts_result({success: result});
      output.writeMessageBegin("findNoteCounts", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_findNoteCounts_result(err);
        output.writeMessageBegin("findNoteCounts", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findNoteCounts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.findNoteCounts(args.authenticationToken, args.filter, args.withTrash, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_findNoteCounts_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findNoteCounts", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findNoteCounts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getNoteWithResultSpec = function(seqid, input, output) {
  var args = new NoteStore_getNoteWithResultSpec_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getNoteWithResultSpec.length === 3) {
    Q.fcall(this._handler.getNoteWithResultSpec.bind(this._handler),
      args.authenticationToken,
      args.guid,
      args.resultSpec
    ).then(function(result) {
      var result_obj = new NoteStore_getNoteWithResultSpec_result({success: result});
      output.writeMessageBegin("getNoteWithResultSpec", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getNoteWithResultSpec_result(err);
        output.writeMessageBegin("getNoteWithResultSpec", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteWithResultSpec", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNoteWithResultSpec(args.authenticationToken, args.guid, args.resultSpec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getNoteWithResultSpec_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNoteWithResultSpec", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteWithResultSpec", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getNote = function(seqid, input, output) {
  var args = new NoteStore_getNote_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getNote.length === 6) {
    Q.fcall(this._handler.getNote.bind(this._handler),
      args.authenticationToken,
      args.guid,
      args.withContent,
      args.withResourcesData,
      args.withResourcesRecognition,
      args.withResourcesAlternateData
    ).then(function(result) {
      var result_obj = new NoteStore_getNote_result({success: result});
      output.writeMessageBegin("getNote", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getNote_result(err);
        output.writeMessageBegin("getNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNote(args.authenticationToken, args.guid, args.withContent, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getNote_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getNoteApplicationData = function(seqid, input, output) {
  var args = new NoteStore_getNoteApplicationData_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getNoteApplicationData.length === 2) {
    Q.fcall(this._handler.getNoteApplicationData.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getNoteApplicationData_result({success: result});
      output.writeMessageBegin("getNoteApplicationData", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getNoteApplicationData_result(err);
        output.writeMessageBegin("getNoteApplicationData", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteApplicationData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNoteApplicationData(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getNoteApplicationData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNoteApplicationData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteApplicationData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getNoteApplicationDataEntry = function(seqid, input, output) {
  var args = new NoteStore_getNoteApplicationDataEntry_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getNoteApplicationDataEntry.length === 3) {
    Q.fcall(this._handler.getNoteApplicationDataEntry.bind(this._handler),
      args.authenticationToken,
      args.guid,
      args.key
    ).then(function(result) {
      var result_obj = new NoteStore_getNoteApplicationDataEntry_result({success: result});
      output.writeMessageBegin("getNoteApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getNoteApplicationDataEntry_result(err);
        output.writeMessageBegin("getNoteApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNoteApplicationDataEntry(args.authenticationToken, args.guid, args.key, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getNoteApplicationDataEntry_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNoteApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_setNoteApplicationDataEntry = function(seqid, input, output) {
  var args = new NoteStore_setNoteApplicationDataEntry_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.setNoteApplicationDataEntry.length === 4) {
    Q.fcall(this._handler.setNoteApplicationDataEntry.bind(this._handler),
      args.authenticationToken,
      args.guid,
      args.key,
      args.value
    ).then(function(result) {
      var result_obj = new NoteStore_setNoteApplicationDataEntry_result({success: result});
      output.writeMessageBegin("setNoteApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_setNoteApplicationDataEntry_result(err);
        output.writeMessageBegin("setNoteApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setNoteApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setNoteApplicationDataEntry(args.authenticationToken, args.guid, args.key, args.value, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_setNoteApplicationDataEntry_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setNoteApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setNoteApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_unsetNoteApplicationDataEntry = function(seqid, input, output) {
  var args = new NoteStore_unsetNoteApplicationDataEntry_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.unsetNoteApplicationDataEntry.length === 3) {
    Q.fcall(this._handler.unsetNoteApplicationDataEntry.bind(this._handler),
      args.authenticationToken,
      args.guid,
      args.key
    ).then(function(result) {
      var result_obj = new NoteStore_unsetNoteApplicationDataEntry_result({success: result});
      output.writeMessageBegin("unsetNoteApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_unsetNoteApplicationDataEntry_result(err);
        output.writeMessageBegin("unsetNoteApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unsetNoteApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.unsetNoteApplicationDataEntry(args.authenticationToken, args.guid, args.key, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_unsetNoteApplicationDataEntry_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unsetNoteApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unsetNoteApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getNoteContent = function(seqid, input, output) {
  var args = new NoteStore_getNoteContent_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getNoteContent.length === 2) {
    Q.fcall(this._handler.getNoteContent.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getNoteContent_result({success: result});
      output.writeMessageBegin("getNoteContent", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getNoteContent_result(err);
        output.writeMessageBegin("getNoteContent", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteContent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNoteContent(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getNoteContent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNoteContent", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteContent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getNoteSearchText = function(seqid, input, output) {
  var args = new NoteStore_getNoteSearchText_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getNoteSearchText.length === 4) {
    Q.fcall(this._handler.getNoteSearchText.bind(this._handler),
      args.authenticationToken,
      args.guid,
      args.noteOnly,
      args.tokenizeForIndexing
    ).then(function(result) {
      var result_obj = new NoteStore_getNoteSearchText_result({success: result});
      output.writeMessageBegin("getNoteSearchText", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getNoteSearchText_result(err);
        output.writeMessageBegin("getNoteSearchText", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteSearchText", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNoteSearchText(args.authenticationToken, args.guid, args.noteOnly, args.tokenizeForIndexing, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getNoteSearchText_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNoteSearchText", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteSearchText", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getResourceSearchText = function(seqid, input, output) {
  var args = new NoteStore_getResourceSearchText_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getResourceSearchText.length === 2) {
    Q.fcall(this._handler.getResourceSearchText.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getResourceSearchText_result({success: result});
      output.writeMessageBegin("getResourceSearchText", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getResourceSearchText_result(err);
        output.writeMessageBegin("getResourceSearchText", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceSearchText", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getResourceSearchText(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getResourceSearchText_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getResourceSearchText", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceSearchText", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getNoteTagNames = function(seqid, input, output) {
  var args = new NoteStore_getNoteTagNames_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getNoteTagNames.length === 2) {
    Q.fcall(this._handler.getNoteTagNames.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getNoteTagNames_result({success: result});
      output.writeMessageBegin("getNoteTagNames", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getNoteTagNames_result(err);
        output.writeMessageBegin("getNoteTagNames", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteTagNames", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNoteTagNames(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getNoteTagNames_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNoteTagNames", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteTagNames", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_createNote = function(seqid, input, output) {
  var args = new NoteStore_createNote_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.createNote.length === 2) {
    Q.fcall(this._handler.createNote.bind(this._handler),
      args.authenticationToken,
      args.note
    ).then(function(result) {
      var result_obj = new NoteStore_createNote_result({success: result});
      output.writeMessageBegin("createNote", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_createNote_result(err);
        output.writeMessageBegin("createNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createNote(args.authenticationToken, args.note, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_createNote_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_updateNote = function(seqid, input, output) {
  var args = new NoteStore_updateNote_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.updateNote.length === 2) {
    Q.fcall(this._handler.updateNote.bind(this._handler),
      args.authenticationToken,
      args.note
    ).then(function(result) {
      var result_obj = new NoteStore_updateNote_result({success: result});
      output.writeMessageBegin("updateNote", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_updateNote_result(err);
        output.writeMessageBegin("updateNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateNote(args.authenticationToken, args.note, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_updateNote_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_deleteNote = function(seqid, input, output) {
  var args = new NoteStore_deleteNote_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.deleteNote.length === 2) {
    Q.fcall(this._handler.deleteNote.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_deleteNote_result({success: result});
      output.writeMessageBegin("deleteNote", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_deleteNote_result(err);
        output.writeMessageBegin("deleteNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteNote(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_deleteNote_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_expungeNote = function(seqid, input, output) {
  var args = new NoteStore_expungeNote_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.expungeNote.length === 2) {
    Q.fcall(this._handler.expungeNote.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_expungeNote_result({success: result});
      output.writeMessageBegin("expungeNote", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_expungeNote_result(err);
        output.writeMessageBegin("expungeNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("expungeNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.expungeNote(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_expungeNote_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("expungeNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("expungeNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_copyNote = function(seqid, input, output) {
  var args = new NoteStore_copyNote_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.copyNote.length === 3) {
    Q.fcall(this._handler.copyNote.bind(this._handler),
      args.authenticationToken,
      args.noteGuid,
      args.toNotebookGuid
    ).then(function(result) {
      var result_obj = new NoteStore_copyNote_result({success: result});
      output.writeMessageBegin("copyNote", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_copyNote_result(err);
        output.writeMessageBegin("copyNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("copyNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.copyNote(args.authenticationToken, args.noteGuid, args.toNotebookGuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_copyNote_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("copyNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("copyNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_listNoteVersions = function(seqid, input, output) {
  var args = new NoteStore_listNoteVersions_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.listNoteVersions.length === 2) {
    Q.fcall(this._handler.listNoteVersions.bind(this._handler),
      args.authenticationToken,
      args.noteGuid
    ).then(function(result) {
      var result_obj = new NoteStore_listNoteVersions_result({success: result});
      output.writeMessageBegin("listNoteVersions", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_listNoteVersions_result(err);
        output.writeMessageBegin("listNoteVersions", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listNoteVersions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.listNoteVersions(args.authenticationToken, args.noteGuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_listNoteVersions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listNoteVersions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listNoteVersions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getNoteVersion = function(seqid, input, output) {
  var args = new NoteStore_getNoteVersion_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getNoteVersion.length === 6) {
    Q.fcall(this._handler.getNoteVersion.bind(this._handler),
      args.authenticationToken,
      args.noteGuid,
      args.updateSequenceNum,
      args.withResourcesData,
      args.withResourcesRecognition,
      args.withResourcesAlternateData
    ).then(function(result) {
      var result_obj = new NoteStore_getNoteVersion_result({success: result});
      output.writeMessageBegin("getNoteVersion", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getNoteVersion_result(err);
        output.writeMessageBegin("getNoteVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNoteVersion(args.authenticationToken, args.noteGuid, args.updateSequenceNum, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getNoteVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNoteVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNoteVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getResource = function(seqid, input, output) {
  var args = new NoteStore_getResource_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getResource.length === 6) {
    Q.fcall(this._handler.getResource.bind(this._handler),
      args.authenticationToken,
      args.guid,
      args.withData,
      args.withRecognition,
      args.withAttributes,
      args.withAlternateData
    ).then(function(result) {
      var result_obj = new NoteStore_getResource_result({success: result});
      output.writeMessageBegin("getResource", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getResource_result(err);
        output.writeMessageBegin("getResource", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResource", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getResource(args.authenticationToken, args.guid, args.withData, args.withRecognition, args.withAttributes, args.withAlternateData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getResource_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getResource", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResource", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getResourceApplicationData = function(seqid, input, output) {
  var args = new NoteStore_getResourceApplicationData_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getResourceApplicationData.length === 2) {
    Q.fcall(this._handler.getResourceApplicationData.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getResourceApplicationData_result({success: result});
      output.writeMessageBegin("getResourceApplicationData", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getResourceApplicationData_result(err);
        output.writeMessageBegin("getResourceApplicationData", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceApplicationData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getResourceApplicationData(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getResourceApplicationData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getResourceApplicationData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceApplicationData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getResourceApplicationDataEntry = function(seqid, input, output) {
  var args = new NoteStore_getResourceApplicationDataEntry_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getResourceApplicationDataEntry.length === 3) {
    Q.fcall(this._handler.getResourceApplicationDataEntry.bind(this._handler),
      args.authenticationToken,
      args.guid,
      args.key
    ).then(function(result) {
      var result_obj = new NoteStore_getResourceApplicationDataEntry_result({success: result});
      output.writeMessageBegin("getResourceApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getResourceApplicationDataEntry_result(err);
        output.writeMessageBegin("getResourceApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getResourceApplicationDataEntry(args.authenticationToken, args.guid, args.key, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getResourceApplicationDataEntry_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getResourceApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_setResourceApplicationDataEntry = function(seqid, input, output) {
  var args = new NoteStore_setResourceApplicationDataEntry_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.setResourceApplicationDataEntry.length === 4) {
    Q.fcall(this._handler.setResourceApplicationDataEntry.bind(this._handler),
      args.authenticationToken,
      args.guid,
      args.key,
      args.value
    ).then(function(result) {
      var result_obj = new NoteStore_setResourceApplicationDataEntry_result({success: result});
      output.writeMessageBegin("setResourceApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_setResourceApplicationDataEntry_result(err);
        output.writeMessageBegin("setResourceApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setResourceApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setResourceApplicationDataEntry(args.authenticationToken, args.guid, args.key, args.value, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_setResourceApplicationDataEntry_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setResourceApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setResourceApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_unsetResourceApplicationDataEntry = function(seqid, input, output) {
  var args = new NoteStore_unsetResourceApplicationDataEntry_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.unsetResourceApplicationDataEntry.length === 3) {
    Q.fcall(this._handler.unsetResourceApplicationDataEntry.bind(this._handler),
      args.authenticationToken,
      args.guid,
      args.key
    ).then(function(result) {
      var result_obj = new NoteStore_unsetResourceApplicationDataEntry_result({success: result});
      output.writeMessageBegin("unsetResourceApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_unsetResourceApplicationDataEntry_result(err);
        output.writeMessageBegin("unsetResourceApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unsetResourceApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.unsetResourceApplicationDataEntry(args.authenticationToken, args.guid, args.key, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_unsetResourceApplicationDataEntry_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unsetResourceApplicationDataEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unsetResourceApplicationDataEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_updateResource = function(seqid, input, output) {
  var args = new NoteStore_updateResource_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.updateResource.length === 2) {
    Q.fcall(this._handler.updateResource.bind(this._handler),
      args.authenticationToken,
      args.resource
    ).then(function(result) {
      var result_obj = new NoteStore_updateResource_result({success: result});
      output.writeMessageBegin("updateResource", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_updateResource_result(err);
        output.writeMessageBegin("updateResource", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateResource", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateResource(args.authenticationToken, args.resource, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_updateResource_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateResource", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateResource", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getResourceData = function(seqid, input, output) {
  var args = new NoteStore_getResourceData_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getResourceData.length === 2) {
    Q.fcall(this._handler.getResourceData.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getResourceData_result({success: result});
      output.writeMessageBegin("getResourceData", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getResourceData_result(err);
        output.writeMessageBegin("getResourceData", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getResourceData(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getResourceData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getResourceData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getResourceByHash = function(seqid, input, output) {
  var args = new NoteStore_getResourceByHash_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getResourceByHash.length === 6) {
    Q.fcall(this._handler.getResourceByHash.bind(this._handler),
      args.authenticationToken,
      args.noteGuid,
      args.contentHash,
      args.withData,
      args.withRecognition,
      args.withAlternateData
    ).then(function(result) {
      var result_obj = new NoteStore_getResourceByHash_result({success: result});
      output.writeMessageBegin("getResourceByHash", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getResourceByHash_result(err);
        output.writeMessageBegin("getResourceByHash", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceByHash", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getResourceByHash(args.authenticationToken, args.noteGuid, args.contentHash, args.withData, args.withRecognition, args.withAlternateData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getResourceByHash_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getResourceByHash", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceByHash", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getResourceRecognition = function(seqid, input, output) {
  var args = new NoteStore_getResourceRecognition_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getResourceRecognition.length === 2) {
    Q.fcall(this._handler.getResourceRecognition.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getResourceRecognition_result({success: result});
      output.writeMessageBegin("getResourceRecognition", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getResourceRecognition_result(err);
        output.writeMessageBegin("getResourceRecognition", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceRecognition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getResourceRecognition(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getResourceRecognition_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getResourceRecognition", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceRecognition", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getResourceAlternateData = function(seqid, input, output) {
  var args = new NoteStore_getResourceAlternateData_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getResourceAlternateData.length === 2) {
    Q.fcall(this._handler.getResourceAlternateData.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getResourceAlternateData_result({success: result});
      output.writeMessageBegin("getResourceAlternateData", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getResourceAlternateData_result(err);
        output.writeMessageBegin("getResourceAlternateData", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceAlternateData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getResourceAlternateData(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getResourceAlternateData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getResourceAlternateData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceAlternateData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getResourceAttributes = function(seqid, input, output) {
  var args = new NoteStore_getResourceAttributes_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getResourceAttributes.length === 2) {
    Q.fcall(this._handler.getResourceAttributes.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_getResourceAttributes_result({success: result});
      output.writeMessageBegin("getResourceAttributes", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getResourceAttributes_result(err);
        output.writeMessageBegin("getResourceAttributes", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceAttributes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getResourceAttributes(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getResourceAttributes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getResourceAttributes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getResourceAttributes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getPublicNotebook = function(seqid, input, output) {
  var args = new NoteStore_getPublicNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getPublicNotebook.length === 2) {
    Q.fcall(this._handler.getPublicNotebook.bind(this._handler),
      args.userId,
      args.publicUri
    ).then(function(result) {
      var result_obj = new NoteStore_getPublicNotebook_result({success: result});
      output.writeMessageBegin("getPublicNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_getPublicNotebook_result(err);
        output.writeMessageBegin("getPublicNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPublicNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getPublicNotebook(args.userId, args.publicUri, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_getPublicNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPublicNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPublicNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_shareNotebook = function(seqid, input, output) {
  var args = new NoteStore_shareNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.shareNotebook.length === 3) {
    Q.fcall(this._handler.shareNotebook.bind(this._handler),
      args.authenticationToken,
      args.sharedNotebook,
      args.message
    ).then(function(result) {
      var result_obj = new NoteStore_shareNotebook_result({success: result});
      output.writeMessageBegin("shareNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_shareNotebook_result(err);
        output.writeMessageBegin("shareNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shareNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shareNotebook(args.authenticationToken, args.sharedNotebook, args.message, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_shareNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shareNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shareNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_createOrUpdateNotebookShares = function(seqid, input, output) {
  var args = new NoteStore_createOrUpdateNotebookShares_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.createOrUpdateNotebookShares.length === 2) {
    Q.fcall(this._handler.createOrUpdateNotebookShares.bind(this._handler),
      args.authenticationToken,
      args.shareTemplate
    ).then(function(result) {
      var result_obj = new NoteStore_createOrUpdateNotebookShares_result({success: result});
      output.writeMessageBegin("createOrUpdateNotebookShares", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMInvalidContactsException) {
        result = new NoteStore_createOrUpdateNotebookShares_result(err);
        output.writeMessageBegin("createOrUpdateNotebookShares", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createOrUpdateNotebookShares", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createOrUpdateNotebookShares(args.authenticationToken, args.shareTemplate, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMInvalidContactsException) {
        result_obj = new NoteStore_createOrUpdateNotebookShares_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createOrUpdateNotebookShares", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createOrUpdateNotebookShares", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_updateSharedNotebook = function(seqid, input, output) {
  var args = new NoteStore_updateSharedNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.updateSharedNotebook.length === 2) {
    Q.fcall(this._handler.updateSharedNotebook.bind(this._handler),
      args.authenticationToken,
      args.sharedNotebook
    ).then(function(result) {
      var result_obj = new NoteStore_updateSharedNotebook_result({success: result});
      output.writeMessageBegin("updateSharedNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_updateSharedNotebook_result(err);
        output.writeMessageBegin("updateSharedNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSharedNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateSharedNotebook(args.authenticationToken, args.sharedNotebook, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_updateSharedNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateSharedNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSharedNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_setNotebookRecipientSettings = function(seqid, input, output) {
  var args = new NoteStore_setNotebookRecipientSettings_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.setNotebookRecipientSettings.length === 3) {
    Q.fcall(this._handler.setNotebookRecipientSettings.bind(this._handler),
      args.authenticationToken,
      args.notebookGuid,
      args.recipientSettings
    ).then(function(result) {
      var result_obj = new NoteStore_setNotebookRecipientSettings_result({success: result});
      output.writeMessageBegin("setNotebookRecipientSettings", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_setNotebookRecipientSettings_result(err);
        output.writeMessageBegin("setNotebookRecipientSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setNotebookRecipientSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setNotebookRecipientSettings(args.authenticationToken, args.notebookGuid, args.recipientSettings, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_setNotebookRecipientSettings_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setNotebookRecipientSettings", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setNotebookRecipientSettings", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_listSharedNotebooks = function(seqid, input, output) {
  var args = new NoteStore_listSharedNotebooks_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.listSharedNotebooks.length === 1) {
    Q.fcall(this._handler.listSharedNotebooks.bind(this._handler),
      args.authenticationToken
    ).then(function(result) {
      var result_obj = new NoteStore_listSharedNotebooks_result({success: result});
      output.writeMessageBegin("listSharedNotebooks", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_listSharedNotebooks_result(err);
        output.writeMessageBegin("listSharedNotebooks", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listSharedNotebooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.listSharedNotebooks(args.authenticationToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_listSharedNotebooks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listSharedNotebooks", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listSharedNotebooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_createLinkedNotebook = function(seqid, input, output) {
  var args = new NoteStore_createLinkedNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.createLinkedNotebook.length === 2) {
    Q.fcall(this._handler.createLinkedNotebook.bind(this._handler),
      args.authenticationToken,
      args.linkedNotebook
    ).then(function(result) {
      var result_obj = new NoteStore_createLinkedNotebook_result({success: result});
      output.writeMessageBegin("createLinkedNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_createLinkedNotebook_result(err);
        output.writeMessageBegin("createLinkedNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createLinkedNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createLinkedNotebook(args.authenticationToken, args.linkedNotebook, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_createLinkedNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createLinkedNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createLinkedNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_updateLinkedNotebook = function(seqid, input, output) {
  var args = new NoteStore_updateLinkedNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.updateLinkedNotebook.length === 2) {
    Q.fcall(this._handler.updateLinkedNotebook.bind(this._handler),
      args.authenticationToken,
      args.linkedNotebook
    ).then(function(result) {
      var result_obj = new NoteStore_updateLinkedNotebook_result({success: result});
      output.writeMessageBegin("updateLinkedNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_updateLinkedNotebook_result(err);
        output.writeMessageBegin("updateLinkedNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateLinkedNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateLinkedNotebook(args.authenticationToken, args.linkedNotebook, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_updateLinkedNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateLinkedNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateLinkedNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_listLinkedNotebooks = function(seqid, input, output) {
  var args = new NoteStore_listLinkedNotebooks_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.listLinkedNotebooks.length === 1) {
    Q.fcall(this._handler.listLinkedNotebooks.bind(this._handler),
      args.authenticationToken
    ).then(function(result) {
      var result_obj = new NoteStore_listLinkedNotebooks_result({success: result});
      output.writeMessageBegin("listLinkedNotebooks", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_listLinkedNotebooks_result(err);
        output.writeMessageBegin("listLinkedNotebooks", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listLinkedNotebooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.listLinkedNotebooks(args.authenticationToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_listLinkedNotebooks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listLinkedNotebooks", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listLinkedNotebooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_expungeLinkedNotebook = function(seqid, input, output) {
  var args = new NoteStore_expungeLinkedNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.expungeLinkedNotebook.length === 2) {
    Q.fcall(this._handler.expungeLinkedNotebook.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_expungeLinkedNotebook_result({success: result});
      output.writeMessageBegin("expungeLinkedNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_expungeLinkedNotebook_result(err);
        output.writeMessageBegin("expungeLinkedNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("expungeLinkedNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.expungeLinkedNotebook(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_expungeLinkedNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("expungeLinkedNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("expungeLinkedNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_authenticateToSharedNotebook = function(seqid, input, output) {
  var args = new NoteStore_authenticateToSharedNotebook_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.authenticateToSharedNotebook.length === 2) {
    Q.fcall(this._handler.authenticateToSharedNotebook.bind(this._handler),
      args.shareKeyOrGlobalId,
      args.authenticationToken
    ).then(function(result) {
      var result_obj = new NoteStore_authenticateToSharedNotebook_result({success: result});
      output.writeMessageBegin("authenticateToSharedNotebook", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_authenticateToSharedNotebook_result(err);
        output.writeMessageBegin("authenticateToSharedNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authenticateToSharedNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.authenticateToSharedNotebook(args.shareKeyOrGlobalId, args.authenticationToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_authenticateToSharedNotebook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("authenticateToSharedNotebook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authenticateToSharedNotebook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getSharedNotebookByAuth = function(seqid, input, output) {
  var args = new NoteStore_getSharedNotebookByAuth_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getSharedNotebookByAuth.length === 1) {
    Q.fcall(this._handler.getSharedNotebookByAuth.bind(this._handler),
      args.authenticationToken
    ).then(function(result) {
      var result_obj = new NoteStore_getSharedNotebookByAuth_result({success: result});
      output.writeMessageBegin("getSharedNotebookByAuth", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_getSharedNotebookByAuth_result(err);
        output.writeMessageBegin("getSharedNotebookByAuth", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSharedNotebookByAuth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getSharedNotebookByAuth(args.authenticationToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_getSharedNotebookByAuth_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSharedNotebookByAuth", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSharedNotebookByAuth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_emailNote = function(seqid, input, output) {
  var args = new NoteStore_emailNote_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.emailNote.length === 2) {
    Q.fcall(this._handler.emailNote.bind(this._handler),
      args.authenticationToken,
      args.parameters
    ).then(function(result) {
      var result_obj = new NoteStore_emailNote_result({success: result});
      output.writeMessageBegin("emailNote", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_emailNote_result(err);
        output.writeMessageBegin("emailNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("emailNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.emailNote(args.authenticationToken, args.parameters, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_emailNote_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("emailNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("emailNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_shareNote = function(seqid, input, output) {
  var args = new NoteStore_shareNote_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.shareNote.length === 2) {
    Q.fcall(this._handler.shareNote.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_shareNote_result({success: result});
      output.writeMessageBegin("shareNote", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_shareNote_result(err);
        output.writeMessageBegin("shareNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shareNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.shareNote(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_shareNote_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shareNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shareNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_stopSharingNote = function(seqid, input, output) {
  var args = new NoteStore_stopSharingNote_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.stopSharingNote.length === 2) {
    Q.fcall(this._handler.stopSharingNote.bind(this._handler),
      args.authenticationToken,
      args.guid
    ).then(function(result) {
      var result_obj = new NoteStore_stopSharingNote_result({success: result});
      output.writeMessageBegin("stopSharingNote", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_stopSharingNote_result(err);
        output.writeMessageBegin("stopSharingNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stopSharingNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.stopSharingNote(args.authenticationToken, args.guid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_stopSharingNote_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stopSharingNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stopSharingNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_authenticateToSharedNote = function(seqid, input, output) {
  var args = new NoteStore_authenticateToSharedNote_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.authenticateToSharedNote.length === 3) {
    Q.fcall(this._handler.authenticateToSharedNote.bind(this._handler),
      args.guid,
      args.noteKey,
      args.authenticationToken
    ).then(function(result) {
      var result_obj = new NoteStore_authenticateToSharedNote_result({success: result});
      output.writeMessageBegin("authenticateToSharedNote", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_authenticateToSharedNote_result(err);
        output.writeMessageBegin("authenticateToSharedNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authenticateToSharedNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.authenticateToSharedNote(args.guid, args.noteKey, args.authenticationToken, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_authenticateToSharedNote_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("authenticateToSharedNote", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authenticateToSharedNote", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_findRelated = function(seqid, input, output) {
  var args = new NoteStore_findRelated_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.findRelated.length === 3) {
    Q.fcall(this._handler.findRelated.bind(this._handler),
      args.authenticationToken,
      args.query,
      args.resultSpec
    ).then(function(result) {
      var result_obj = new NoteStore_findRelated_result({success: result});
      output.writeMessageBegin("findRelated", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result = new NoteStore_findRelated_result(err);
        output.writeMessageBegin("findRelated", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findRelated", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.findRelated(args.authenticationToken, args.query, args.resultSpec, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMSystemException || err instanceof Errors_ttypes.EDAMNotFoundException) {
        result_obj = new NoteStore_findRelated_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findRelated", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findRelated", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_updateNoteIfUsnMatches = function(seqid, input, output) {
  var args = new NoteStore_updateNoteIfUsnMatches_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.updateNoteIfUsnMatches.length === 2) {
    Q.fcall(this._handler.updateNoteIfUsnMatches.bind(this._handler),
      args.authenticationToken,
      args.note
    ).then(function(result) {
      var result_obj = new NoteStore_updateNoteIfUsnMatches_result({success: result});
      output.writeMessageBegin("updateNoteIfUsnMatches", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_updateNoteIfUsnMatches_result(err);
        output.writeMessageBegin("updateNoteIfUsnMatches", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateNoteIfUsnMatches", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateNoteIfUsnMatches(args.authenticationToken, args.note, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_updateNoteIfUsnMatches_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateNoteIfUsnMatches", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateNoteIfUsnMatches", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_manageNotebookShares = function(seqid, input, output) {
  var args = new NoteStore_manageNotebookShares_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.manageNotebookShares.length === 2) {
    Q.fcall(this._handler.manageNotebookShares.bind(this._handler),
      args.authenticationToken,
      args.parameters
    ).then(function(result) {
      var result_obj = new NoteStore_manageNotebookShares_result({success: result});
      output.writeMessageBegin("manageNotebookShares", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_manageNotebookShares_result(err);
        output.writeMessageBegin("manageNotebookShares", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("manageNotebookShares", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.manageNotebookShares(args.authenticationToken, args.parameters, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_manageNotebookShares_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("manageNotebookShares", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("manageNotebookShares", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
NoteStoreProcessor.prototype.process_getNotebookShares = function(seqid, input, output) {
  var args = new NoteStore_getNotebookShares_args();
  args[Symbol.for("read")](input);
  input.readMessageEnd();
  if (this._handler.getNotebookShares.length === 2) {
    Q.fcall(this._handler.getNotebookShares.bind(this._handler),
      args.authenticationToken,
      args.notebookGuid
    ).then(function(result) {
      var result_obj = new NoteStore_getNotebookShares_result({success: result});
      output.writeMessageBegin("getNotebookShares", Thrift.MessageType.REPLY, seqid);
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result = new NoteStore_getNotebookShares_result(err);
        output.writeMessageBegin("getNotebookShares", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNotebookShares", Thrift.MessageType.EXCEPTION, seqid);
      }
      result[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNotebookShares(args.authenticationToken, args.notebookGuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.EDAMUserException || err instanceof Errors_ttypes.EDAMNotFoundException || err instanceof Errors_ttypes.EDAMSystemException) {
        result_obj = new NoteStore_getNotebookShares_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNotebookShares", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNotebookShares", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj[Symbol.for("write")](output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
exports.Processor = NoteStoreProcessor;
