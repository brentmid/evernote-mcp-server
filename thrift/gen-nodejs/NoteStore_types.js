//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var UserStore_ttypes = require('./UserStore_types.js');
var Types_ttypes = require('./Types_types.js');
var Errors_ttypes = require('./Errors_types.js');
var Limits_ttypes = require('./Limits_types.js');


var ttypes = module.exports = {};
ttypes.ShareRelationshipPrivilegeLevel = {
  'READ_NOTEBOOK' : 0,
  'READ_NOTEBOOK_PLUS_ACTIVITY' : 10,
  'MODIFY_NOTEBOOK_PLUS_ACTIVITY' : 20,
  'FULL_ACCESS' : 30
};
var SyncState = module.exports.SyncState = function(args) {
  this.currentTime = null;
  this.fullSyncBefore = null;
  this.updateCount = null;
  this.uploaded = null;
  this.userLastUpdated = null;
  this.userMaxMessageEventId = null;
  if (args) {
    if (args.currentTime !== undefined && args.currentTime !== null) {
      this.currentTime = args.currentTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currentTime is unset!');
    }
    if (args.fullSyncBefore !== undefined && args.fullSyncBefore !== null) {
      this.fullSyncBefore = args.fullSyncBefore;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fullSyncBefore is unset!');
    }
    if (args.updateCount !== undefined && args.updateCount !== null) {
      this.updateCount = args.updateCount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field updateCount is unset!');
    }
    if (args.uploaded !== undefined && args.uploaded !== null) {
      this.uploaded = args.uploaded;
    }
    if (args.userLastUpdated !== undefined && args.userLastUpdated !== null) {
      this.userLastUpdated = args.userLastUpdated;
    }
    if (args.userMaxMessageEventId !== undefined && args.userMaxMessageEventId !== null) {
      this.userMaxMessageEventId = args.userMaxMessageEventId;
    }
  }
};
SyncState.prototype = {};
SyncState.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fullSyncBefore = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.uploaded = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.userLastUpdated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.userMaxMessageEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncState.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('SyncState');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.fullSyncBefore !== null && this.fullSyncBefore !== undefined) {
    output.writeFieldBegin('fullSyncBefore', Thrift.Type.I64, 2);
    output.writeI64(this.fullSyncBefore);
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.uploaded !== null && this.uploaded !== undefined) {
    output.writeFieldBegin('uploaded', Thrift.Type.I64, 4);
    output.writeI64(this.uploaded);
    output.writeFieldEnd();
  }
  if (this.userLastUpdated !== null && this.userLastUpdated !== undefined) {
    output.writeFieldBegin('userLastUpdated', Thrift.Type.I64, 5);
    output.writeI64(this.userLastUpdated);
    output.writeFieldEnd();
  }
  if (this.userMaxMessageEventId !== null && this.userMaxMessageEventId !== undefined) {
    output.writeFieldBegin('userMaxMessageEventId', Thrift.Type.I64, 6);
    output.writeI64(this.userMaxMessageEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SyncChunk = module.exports.SyncChunk = function(args) {
  this.currentTime = null;
  this.chunkHighUSN = null;
  this.updateCount = null;
  this.notes = null;
  this.notebooks = null;
  this.tags = null;
  this.searches = null;
  this.resources = null;
  this.expungedNotes = null;
  this.expungedNotebooks = null;
  this.expungedTags = null;
  this.expungedSearches = null;
  this.linkedNotebooks = null;
  this.expungedLinkedNotebooks = null;
  if (args) {
    if (args.currentTime !== undefined && args.currentTime !== null) {
      this.currentTime = args.currentTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currentTime is unset!');
    }
    if (args.chunkHighUSN !== undefined && args.chunkHighUSN !== null) {
      this.chunkHighUSN = args.chunkHighUSN;
    }
    if (args.updateCount !== undefined && args.updateCount !== null) {
      this.updateCount = args.updateCount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field updateCount is unset!');
    }
    if (args.notes !== undefined && args.notes !== null) {
      this.notes = Thrift.copyList(args.notes, [Types_ttypes.Note]);
    }
    if (args.notebooks !== undefined && args.notebooks !== null) {
      this.notebooks = Thrift.copyList(args.notebooks, [Types_ttypes.Notebook]);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [Types_ttypes.Tag]);
    }
    if (args.searches !== undefined && args.searches !== null) {
      this.searches = Thrift.copyList(args.searches, [Types_ttypes.SavedSearch]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [Types_ttypes.Resource]);
    }
    if (args.expungedNotes !== undefined && args.expungedNotes !== null) {
      this.expungedNotes = Thrift.copyList(args.expungedNotes, [null]);
    }
    if (args.expungedNotebooks !== undefined && args.expungedNotebooks !== null) {
      this.expungedNotebooks = Thrift.copyList(args.expungedNotebooks, [null]);
    }
    if (args.expungedTags !== undefined && args.expungedTags !== null) {
      this.expungedTags = Thrift.copyList(args.expungedTags, [null]);
    }
    if (args.expungedSearches !== undefined && args.expungedSearches !== null) {
      this.expungedSearches = Thrift.copyList(args.expungedSearches, [null]);
    }
    if (args.linkedNotebooks !== undefined && args.linkedNotebooks !== null) {
      this.linkedNotebooks = Thrift.copyList(args.linkedNotebooks, [Types_ttypes.LinkedNotebook]);
    }
    if (args.expungedLinkedNotebooks !== undefined && args.expungedLinkedNotebooks !== null) {
      this.expungedLinkedNotebooks = Thrift.copyList(args.expungedLinkedNotebooks, [null]);
    }
  }
};
SyncChunk.prototype = {};
SyncChunk.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.chunkHighUSN = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.notes = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new Types_ttypes.Note();
          elem3[Symbol.for("read")](input);
          this.notes.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.notebooks = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = new Types_ttypes.Notebook();
          elem7[Symbol.for("read")](input);
          this.notebooks.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.tags = [];
        var _rtmp39 = input.readListBegin();
        var _size8 = _rtmp39.size || 0;
        for (var _i10 = 0; _i10 < _size8; ++_i10) {
          var elem11 = null;
          elem11 = new Types_ttypes.Tag();
          elem11[Symbol.for("read")](input);
          this.tags.push(elem11);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.searches = [];
        var _rtmp313 = input.readListBegin();
        var _size12 = _rtmp313.size || 0;
        for (var _i14 = 0; _i14 < _size12; ++_i14) {
          var elem15 = null;
          elem15 = new Types_ttypes.SavedSearch();
          elem15[Symbol.for("read")](input);
          this.searches.push(elem15);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.resources = [];
        var _rtmp317 = input.readListBegin();
        var _size16 = _rtmp317.size || 0;
        for (var _i18 = 0; _i18 < _size16; ++_i18) {
          var elem19 = null;
          elem19 = new Types_ttypes.Resource();
          elem19[Symbol.for("read")](input);
          this.resources.push(elem19);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.expungedNotes = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = input.readString();
          this.expungedNotes.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.expungedNotebooks = [];
        var _rtmp325 = input.readListBegin();
        var _size24 = _rtmp325.size || 0;
        for (var _i26 = 0; _i26 < _size24; ++_i26) {
          var elem27 = null;
          elem27 = input.readString();
          this.expungedNotebooks.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        this.expungedTags = [];
        var _rtmp329 = input.readListBegin();
        var _size28 = _rtmp329.size || 0;
        for (var _i30 = 0; _i30 < _size28; ++_i30) {
          var elem31 = null;
          elem31 = input.readString();
          this.expungedTags.push(elem31);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        this.expungedSearches = [];
        var _rtmp333 = input.readListBegin();
        var _size32 = _rtmp333.size || 0;
        for (var _i34 = 0; _i34 < _size32; ++_i34) {
          var elem35 = null;
          elem35 = input.readString();
          this.expungedSearches.push(elem35);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        this.linkedNotebooks = [];
        var _rtmp337 = input.readListBegin();
        var _size36 = _rtmp337.size || 0;
        for (var _i38 = 0; _i38 < _size36; ++_i38) {
          var elem39 = null;
          elem39 = new Types_ttypes.LinkedNotebook();
          elem39[Symbol.for("read")](input);
          this.linkedNotebooks.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        this.expungedLinkedNotebooks = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = input.readString();
          this.expungedLinkedNotebooks.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunk.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('SyncChunk');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.chunkHighUSN !== null && this.chunkHighUSN !== undefined) {
    output.writeFieldBegin('chunkHighUSN', Thrift.Type.I32, 2);
    output.writeI32(this.chunkHighUSN);
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter44 in this.notes) {
      if (this.notes.hasOwnProperty(iter44)) {
        iter44 = this.notes[iter44];
        iter44[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notebooks !== null && this.notebooks !== undefined) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length);
    for (var iter45 in this.notebooks) {
      if (this.notebooks.hasOwnProperty(iter45)) {
        iter45 = this.notebooks[iter45];
        iter45[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter46 in this.tags) {
      if (this.tags.hasOwnProperty(iter46)) {
        iter46 = this.tags[iter46];
        iter46[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searches !== null && this.searches !== undefined) {
    output.writeFieldBegin('searches', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.searches.length);
    for (var iter47 in this.searches) {
      if (this.searches.hasOwnProperty(iter47)) {
        iter47 = this.searches[iter47];
        iter47[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter48 in this.resources) {
      if (this.resources.hasOwnProperty(iter48)) {
        iter48 = this.resources[iter48];
        iter48[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotes !== null && this.expungedNotes !== undefined) {
    output.writeFieldBegin('expungedNotes', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotes.length);
    for (var iter49 in this.expungedNotes) {
      if (this.expungedNotes.hasOwnProperty(iter49)) {
        iter49 = this.expungedNotes[iter49];
        output.writeString(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedNotebooks !== null && this.expungedNotebooks !== undefined) {
    output.writeFieldBegin('expungedNotebooks', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.expungedNotebooks.length);
    for (var iter50 in this.expungedNotebooks) {
      if (this.expungedNotebooks.hasOwnProperty(iter50)) {
        iter50 = this.expungedNotebooks[iter50];
        output.writeString(iter50);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedTags !== null && this.expungedTags !== undefined) {
    output.writeFieldBegin('expungedTags', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.expungedTags.length);
    for (var iter51 in this.expungedTags) {
      if (this.expungedTags.hasOwnProperty(iter51)) {
        iter51 = this.expungedTags[iter51];
        output.writeString(iter51);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedSearches !== null && this.expungedSearches !== undefined) {
    output.writeFieldBegin('expungedSearches', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.expungedSearches.length);
    for (var iter52 in this.expungedSearches) {
      if (this.expungedSearches.hasOwnProperty(iter52)) {
        iter52 = this.expungedSearches[iter52];
        output.writeString(iter52);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkedNotebooks !== null && this.linkedNotebooks !== undefined) {
    output.writeFieldBegin('linkedNotebooks', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkedNotebooks.length);
    for (var iter53 in this.linkedNotebooks) {
      if (this.linkedNotebooks.hasOwnProperty(iter53)) {
        iter53 = this.linkedNotebooks[iter53];
        iter53[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expungedLinkedNotebooks !== null && this.expungedLinkedNotebooks !== undefined) {
    output.writeFieldBegin('expungedLinkedNotebooks', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.expungedLinkedNotebooks.length);
    for (var iter54 in this.expungedLinkedNotebooks) {
      if (this.expungedLinkedNotebooks.hasOwnProperty(iter54)) {
        iter54 = this.expungedLinkedNotebooks[iter54];
        output.writeString(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SyncChunkFilter = module.exports.SyncChunkFilter = function(args) {
  this.includeNotes = null;
  this.includeNoteResources = null;
  this.includeNoteAttributes = null;
  this.includeNotebooks = null;
  this.includeTags = null;
  this.includeSearches = null;
  this.includeResources = null;
  this.includeLinkedNotebooks = null;
  this.includeExpunged = null;
  this.includeNoteApplicationDataFullMap = null;
  this.includeResourceApplicationDataFullMap = null;
  this.includeNoteResourceApplicationDataFullMap = null;
  this.includeSharedNotes = null;
  this.omitSharedNotebooks = null;
  this.requireNoteContentClass = null;
  this.notebookGuids = null;
  if (args) {
    if (args.includeNotes !== undefined && args.includeNotes !== null) {
      this.includeNotes = args.includeNotes;
    }
    if (args.includeNoteResources !== undefined && args.includeNoteResources !== null) {
      this.includeNoteResources = args.includeNoteResources;
    }
    if (args.includeNoteAttributes !== undefined && args.includeNoteAttributes !== null) {
      this.includeNoteAttributes = args.includeNoteAttributes;
    }
    if (args.includeNotebooks !== undefined && args.includeNotebooks !== null) {
      this.includeNotebooks = args.includeNotebooks;
    }
    if (args.includeTags !== undefined && args.includeTags !== null) {
      this.includeTags = args.includeTags;
    }
    if (args.includeSearches !== undefined && args.includeSearches !== null) {
      this.includeSearches = args.includeSearches;
    }
    if (args.includeResources !== undefined && args.includeResources !== null) {
      this.includeResources = args.includeResources;
    }
    if (args.includeLinkedNotebooks !== undefined && args.includeLinkedNotebooks !== null) {
      this.includeLinkedNotebooks = args.includeLinkedNotebooks;
    }
    if (args.includeExpunged !== undefined && args.includeExpunged !== null) {
      this.includeExpunged = args.includeExpunged;
    }
    if (args.includeNoteApplicationDataFullMap !== undefined && args.includeNoteApplicationDataFullMap !== null) {
      this.includeNoteApplicationDataFullMap = args.includeNoteApplicationDataFullMap;
    }
    if (args.includeResourceApplicationDataFullMap !== undefined && args.includeResourceApplicationDataFullMap !== null) {
      this.includeResourceApplicationDataFullMap = args.includeResourceApplicationDataFullMap;
    }
    if (args.includeNoteResourceApplicationDataFullMap !== undefined && args.includeNoteResourceApplicationDataFullMap !== null) {
      this.includeNoteResourceApplicationDataFullMap = args.includeNoteResourceApplicationDataFullMap;
    }
    if (args.includeSharedNotes !== undefined && args.includeSharedNotes !== null) {
      this.includeSharedNotes = args.includeSharedNotes;
    }
    if (args.omitSharedNotebooks !== undefined && args.omitSharedNotebooks !== null) {
      this.omitSharedNotebooks = args.omitSharedNotebooks;
    }
    if (args.requireNoteContentClass !== undefined && args.requireNoteContentClass !== null) {
      this.requireNoteContentClass = args.requireNoteContentClass;
    }
    if (args.notebookGuids !== undefined && args.notebookGuids !== null) {
      this.notebookGuids = Thrift.copyList(args.notebookGuids, [null]);
    }
  }
};
SyncChunkFilter.prototype = {};
SyncChunkFilter.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResources = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteAttributes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebooks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTags = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSearches = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResources = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLinkedNotebooks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.includeExpunged = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteApplicationDataFullMap = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourceApplicationDataFullMap = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteResourceApplicationDataFullMap = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSharedNotes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.omitSharedNotebooks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.requireNoteContentClass = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.SET) {
        this.notebookGuids = [];
        var _rtmp356 = input.readSetBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = input.readString();
          this.notebookGuids.push(elem58);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncChunkFilter.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('SyncChunkFilter');
  if (this.includeNotes !== null && this.includeNotes !== undefined) {
    output.writeFieldBegin('includeNotes', Thrift.Type.BOOL, 1);
    output.writeBool(this.includeNotes);
    output.writeFieldEnd();
  }
  if (this.includeNoteResources !== null && this.includeNoteResources !== undefined) {
    output.writeFieldBegin('includeNoteResources', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeNoteResources);
    output.writeFieldEnd();
  }
  if (this.includeNoteAttributes !== null && this.includeNoteAttributes !== undefined) {
    output.writeFieldBegin('includeNoteAttributes', Thrift.Type.BOOL, 3);
    output.writeBool(this.includeNoteAttributes);
    output.writeFieldEnd();
  }
  if (this.includeNotebooks !== null && this.includeNotebooks !== undefined) {
    output.writeFieldBegin('includeNotebooks', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeTags !== null && this.includeTags !== undefined) {
    output.writeFieldBegin('includeTags', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeTags);
    output.writeFieldEnd();
  }
  if (this.includeSearches !== null && this.includeSearches !== undefined) {
    output.writeFieldBegin('includeSearches', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeSearches);
    output.writeFieldEnd();
  }
  if (this.includeResources !== null && this.includeResources !== undefined) {
    output.writeFieldBegin('includeResources', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeResources);
    output.writeFieldEnd();
  }
  if (this.includeLinkedNotebooks !== null && this.includeLinkedNotebooks !== undefined) {
    output.writeFieldBegin('includeLinkedNotebooks', Thrift.Type.BOOL, 8);
    output.writeBool(this.includeLinkedNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeExpunged !== null && this.includeExpunged !== undefined) {
    output.writeFieldBegin('includeExpunged', Thrift.Type.BOOL, 9);
    output.writeBool(this.includeExpunged);
    output.writeFieldEnd();
  }
  if (this.includeNoteApplicationDataFullMap !== null && this.includeNoteApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeNoteApplicationDataFullMap', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeNoteApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeResourceApplicationDataFullMap !== null && this.includeResourceApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeResourceApplicationDataFullMap', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeNoteResourceApplicationDataFullMap !== null && this.includeNoteResourceApplicationDataFullMap !== undefined) {
    output.writeFieldBegin('includeNoteResourceApplicationDataFullMap', Thrift.Type.BOOL, 13);
    output.writeBool(this.includeNoteResourceApplicationDataFullMap);
    output.writeFieldEnd();
  }
  if (this.includeSharedNotes !== null && this.includeSharedNotes !== undefined) {
    output.writeFieldBegin('includeSharedNotes', Thrift.Type.BOOL, 17);
    output.writeBool(this.includeSharedNotes);
    output.writeFieldEnd();
  }
  if (this.omitSharedNotebooks !== null && this.omitSharedNotebooks !== undefined) {
    output.writeFieldBegin('omitSharedNotebooks', Thrift.Type.BOOL, 16);
    output.writeBool(this.omitSharedNotebooks);
    output.writeFieldEnd();
  }
  if (this.requireNoteContentClass !== null && this.requireNoteContentClass !== undefined) {
    output.writeFieldBegin('requireNoteContentClass', Thrift.Type.STRING, 11);
    output.writeString(this.requireNoteContentClass);
    output.writeFieldEnd();
  }
  if (this.notebookGuids !== null && this.notebookGuids !== undefined) {
    output.writeFieldBegin('notebookGuids', Thrift.Type.SET, 15);
    output.writeSetBegin(Thrift.Type.STRING, this.notebookGuids.length);
    for (var iter59 in this.notebookGuids) {
      if (this.notebookGuids.hasOwnProperty(iter59)) {
        iter59 = this.notebookGuids[iter59];
        output.writeString(iter59);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteFilter = module.exports.NoteFilter = function(args) {
  this.order = null;
  this.ascending = null;
  this.words = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.timeZone = null;
  this.inactive = null;
  this.emphasized = null;
  this.includeAllReadableNotebooks = null;
  this.includeAllReadableWorkspaces = null;
  this.context = null;
  this.rawWords = null;
  this.searchContextBytes = null;
  if (args) {
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
    if (args.ascending !== undefined && args.ascending !== null) {
      this.ascending = args.ascending;
    }
    if (args.words !== undefined && args.words !== null) {
      this.words = args.words;
    }
    if (args.notebookGuid !== undefined && args.notebookGuid !== null) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined && args.tagGuids !== null) {
      this.tagGuids = Thrift.copyList(args.tagGuids, [null]);
    }
    if (args.timeZone !== undefined && args.timeZone !== null) {
      this.timeZone = args.timeZone;
    }
    if (args.inactive !== undefined && args.inactive !== null) {
      this.inactive = args.inactive;
    }
    if (args.emphasized !== undefined && args.emphasized !== null) {
      this.emphasized = args.emphasized;
    }
    if (args.includeAllReadableNotebooks !== undefined && args.includeAllReadableNotebooks !== null) {
      this.includeAllReadableNotebooks = args.includeAllReadableNotebooks;
    }
    if (args.includeAllReadableWorkspaces !== undefined && args.includeAllReadableWorkspaces !== null) {
      this.includeAllReadableWorkspaces = args.includeAllReadableWorkspaces;
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = args.context;
    }
    if (args.rawWords !== undefined && args.rawWords !== null) {
      this.rawWords = args.rawWords;
    }
    if (args.searchContextBytes !== undefined && args.searchContextBytes !== null) {
      this.searchContextBytes = args.searchContextBytes;
    }
  }
};
NoteFilter.prototype = {};
NoteFilter.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.words = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.tagGuids = [];
        var _rtmp361 = input.readListBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = input.readString();
          this.tagGuids.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.inactive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.emphasized = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAllReadableNotebooks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAllReadableWorkspaces = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.context = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.rawWords = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.searchContextBytes = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteFilter.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteFilter');
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 1);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.ascending !== null && this.ascending !== undefined) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 2);
    output.writeBool(this.ascending);
    output.writeFieldEnd();
  }
  if (this.words !== null && this.words !== undefined) {
    output.writeFieldBegin('words', Thrift.Type.STRING, 3);
    output.writeString(this.words);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 4);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter64 in this.tagGuids) {
      if (this.tagGuids.hasOwnProperty(iter64)) {
        iter64 = this.tagGuids[iter64];
        output.writeString(iter64);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeZone !== null && this.timeZone !== undefined) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 6);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  if (this.inactive !== null && this.inactive !== undefined) {
    output.writeFieldBegin('inactive', Thrift.Type.BOOL, 7);
    output.writeBool(this.inactive);
    output.writeFieldEnd();
  }
  if (this.emphasized !== null && this.emphasized !== undefined) {
    output.writeFieldBegin('emphasized', Thrift.Type.STRING, 8);
    output.writeString(this.emphasized);
    output.writeFieldEnd();
  }
  if (this.includeAllReadableNotebooks !== null && this.includeAllReadableNotebooks !== undefined) {
    output.writeFieldBegin('includeAllReadableNotebooks', Thrift.Type.BOOL, 9);
    output.writeBool(this.includeAllReadableNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeAllReadableWorkspaces !== null && this.includeAllReadableWorkspaces !== undefined) {
    output.writeFieldBegin('includeAllReadableWorkspaces', Thrift.Type.BOOL, 15);
    output.writeBool(this.includeAllReadableWorkspaces);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRING, 10);
    output.writeString(this.context);
    output.writeFieldEnd();
  }
  if (this.rawWords !== null && this.rawWords !== undefined) {
    output.writeFieldBegin('rawWords', Thrift.Type.STRING, 11);
    output.writeString(this.rawWords);
    output.writeFieldEnd();
  }
  if (this.searchContextBytes !== null && this.searchContextBytes !== undefined) {
    output.writeFieldBegin('searchContextBytes', Thrift.Type.STRING, 12);
    output.writeBinary(this.searchContextBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteList = module.exports.NoteList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  this.searchContextBytes = null;
  this.debugInfo = null;
  if (args) {
    if (args.startIndex !== undefined && args.startIndex !== null) {
      this.startIndex = args.startIndex;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startIndex is unset!');
    }
    if (args.totalNotes !== undefined && args.totalNotes !== null) {
      this.totalNotes = args.totalNotes;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field totalNotes is unset!');
    }
    if (args.notes !== undefined && args.notes !== null) {
      this.notes = Thrift.copyList(args.notes, [Types_ttypes.Note]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field notes is unset!');
    }
    if (args.stoppedWords !== undefined && args.stoppedWords !== null) {
      this.stoppedWords = Thrift.copyList(args.stoppedWords, [null]);
    }
    if (args.searchedWords !== undefined && args.searchedWords !== null) {
      this.searchedWords = Thrift.copyList(args.searchedWords, [null]);
    }
    if (args.updateCount !== undefined && args.updateCount !== null) {
      this.updateCount = args.updateCount;
    }
    if (args.searchContextBytes !== undefined && args.searchContextBytes !== null) {
      this.searchContextBytes = args.searchContextBytes;
    }
    if (args.debugInfo !== undefined && args.debugInfo !== null) {
      this.debugInfo = args.debugInfo;
    }
  }
};
NoteList.prototype = {};
NoteList.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.notes = [];
        var _rtmp366 = input.readListBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var elem68 = null;
          elem68 = new Types_ttypes.Note();
          elem68[Symbol.for("read")](input);
          this.notes.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.stoppedWords = [];
        var _rtmp370 = input.readListBegin();
        var _size69 = _rtmp370.size || 0;
        for (var _i71 = 0; _i71 < _size69; ++_i71) {
          var elem72 = null;
          elem72 = input.readString();
          this.stoppedWords.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.searchedWords = [];
        var _rtmp374 = input.readListBegin();
        var _size73 = _rtmp374.size || 0;
        for (var _i75 = 0; _i75 < _size73; ++_i75) {
          var elem76 = null;
          elem76 = input.readString();
          this.searchedWords.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.searchContextBytes = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.debugInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteList.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteList');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes !== null && this.totalNotes !== undefined) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter77 in this.notes) {
      if (this.notes.hasOwnProperty(iter77)) {
        iter77 = this.notes[iter77];
        iter77[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords !== null && this.stoppedWords !== undefined) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter78 in this.stoppedWords) {
      if (this.stoppedWords.hasOwnProperty(iter78)) {
        iter78 = this.stoppedWords[iter78];
        output.writeString(iter78);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords !== null && this.searchedWords !== undefined) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter79 in this.searchedWords) {
      if (this.searchedWords.hasOwnProperty(iter79)) {
        iter79 = this.searchedWords[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.searchContextBytes !== null && this.searchContextBytes !== undefined) {
    output.writeFieldBegin('searchContextBytes', Thrift.Type.STRING, 7);
    output.writeBinary(this.searchContextBytes);
    output.writeFieldEnd();
  }
  if (this.debugInfo !== null && this.debugInfo !== undefined) {
    output.writeFieldBegin('debugInfo', Thrift.Type.STRING, 8);
    output.writeString(this.debugInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteMetadata = module.exports.NoteMetadata = function(args) {
  this.guid = null;
  this.title = null;
  this.contentLength = null;
  this.created = null;
  this.updated = null;
  this.deleted = null;
  this.updateSequenceNum = null;
  this.notebookGuid = null;
  this.tagGuids = null;
  this.attributes = null;
  this.largestResourceMime = null;
  this.largestResourceSize = null;
  if (args) {
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field guid is unset!');
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.contentLength !== undefined && args.contentLength !== null) {
      this.contentLength = args.contentLength;
    }
    if (args.created !== undefined && args.created !== null) {
      this.created = args.created;
    }
    if (args.updated !== undefined && args.updated !== null) {
      this.updated = args.updated;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.updateSequenceNum !== undefined && args.updateSequenceNum !== null) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.notebookGuid !== undefined && args.notebookGuid !== null) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.tagGuids !== undefined && args.tagGuids !== null) {
      this.tagGuids = Thrift.copyList(args.tagGuids, [null]);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = new Types_ttypes.NoteAttributes(args.attributes);
    }
    if (args.largestResourceMime !== undefined && args.largestResourceMime !== null) {
      this.largestResourceMime = args.largestResourceMime;
    }
    if (args.largestResourceSize !== undefined && args.largestResourceSize !== null) {
      this.largestResourceSize = args.largestResourceSize;
    }
  }
};
NoteMetadata.prototype = {};
NoteMetadata.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.contentLength = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        this.tagGuids = [];
        var _rtmp381 = input.readListBegin();
        var _size80 = _rtmp381.size || 0;
        for (var _i82 = 0; _i82 < _size80; ++_i82) {
          var elem83 = null;
          elem83 = input.readString();
          this.tagGuids.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new Types_ttypes.NoteAttributes();
        this.attributes[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.largestResourceMime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.largestResourceSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteMetadata.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteMetadata');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.contentLength !== null && this.contentLength !== undefined) {
    output.writeFieldBegin('contentLength', Thrift.Type.I32, 5);
    output.writeI32(this.contentLength);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I64, 6);
    output.writeI64(this.created);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 7);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 8);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 10);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 11);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.tagGuids !== null && this.tagGuids !== undefined) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length);
    for (var iter84 in this.tagGuids) {
      if (this.tagGuids.hasOwnProperty(iter84)) {
        iter84 = this.tagGuids[iter84];
        output.writeString(iter84);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 14);
    this.attributes[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.largestResourceMime !== null && this.largestResourceMime !== undefined) {
    output.writeFieldBegin('largestResourceMime', Thrift.Type.STRING, 20);
    output.writeString(this.largestResourceMime);
    output.writeFieldEnd();
  }
  if (this.largestResourceSize !== null && this.largestResourceSize !== undefined) {
    output.writeFieldBegin('largestResourceSize', Thrift.Type.I32, 21);
    output.writeI32(this.largestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NotesMetadataList = module.exports.NotesMetadataList = function(args) {
  this.startIndex = null;
  this.totalNotes = null;
  this.notes = null;
  this.stoppedWords = null;
  this.searchedWords = null;
  this.updateCount = null;
  this.searchContextBytes = null;
  this.debugInfo = null;
  if (args) {
    if (args.startIndex !== undefined && args.startIndex !== null) {
      this.startIndex = args.startIndex;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startIndex is unset!');
    }
    if (args.totalNotes !== undefined && args.totalNotes !== null) {
      this.totalNotes = args.totalNotes;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field totalNotes is unset!');
    }
    if (args.notes !== undefined && args.notes !== null) {
      this.notes = Thrift.copyList(args.notes, [ttypes.NoteMetadata]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field notes is unset!');
    }
    if (args.stoppedWords !== undefined && args.stoppedWords !== null) {
      this.stoppedWords = Thrift.copyList(args.stoppedWords, [null]);
    }
    if (args.searchedWords !== undefined && args.searchedWords !== null) {
      this.searchedWords = Thrift.copyList(args.searchedWords, [null]);
    }
    if (args.updateCount !== undefined && args.updateCount !== null) {
      this.updateCount = args.updateCount;
    }
    if (args.searchContextBytes !== undefined && args.searchContextBytes !== null) {
      this.searchContextBytes = args.searchContextBytes;
    }
    if (args.debugInfo !== undefined && args.debugInfo !== null) {
      this.debugInfo = args.debugInfo;
    }
  }
};
NotesMetadataList.prototype = {};
NotesMetadataList.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.notes = [];
        var _rtmp386 = input.readListBegin();
        var _size85 = _rtmp386.size || 0;
        for (var _i87 = 0; _i87 < _size85; ++_i87) {
          var elem88 = null;
          elem88 = new ttypes.NoteMetadata();
          elem88[Symbol.for("read")](input);
          this.notes.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.stoppedWords = [];
        var _rtmp390 = input.readListBegin();
        var _size89 = _rtmp390.size || 0;
        for (var _i91 = 0; _i91 < _size89; ++_i91) {
          var elem92 = null;
          elem92 = input.readString();
          this.stoppedWords.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.searchedWords = [];
        var _rtmp394 = input.readListBegin();
        var _size93 = _rtmp394.size || 0;
        for (var _i95 = 0; _i95 < _size93; ++_i95) {
          var elem96 = null;
          elem96 = input.readString();
          this.searchedWords.push(elem96);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.searchContextBytes = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.debugInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataList.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NotesMetadataList');
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1);
    output.writeI32(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.totalNotes !== null && this.totalNotes !== undefined) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2);
    output.writeI32(this.totalNotes);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter97 in this.notes) {
      if (this.notes.hasOwnProperty(iter97)) {
        iter97 = this.notes[iter97];
        iter97[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stoppedWords !== null && this.stoppedWords !== undefined) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length);
    for (var iter98 in this.stoppedWords) {
      if (this.stoppedWords.hasOwnProperty(iter98)) {
        iter98 = this.stoppedWords[iter98];
        output.writeString(iter98);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.searchedWords !== null && this.searchedWords !== undefined) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length);
    for (var iter99 in this.searchedWords) {
      if (this.searchedWords.hasOwnProperty(iter99)) {
        iter99 = this.searchedWords[iter99];
        output.writeString(iter99);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updateCount !== null && this.updateCount !== undefined) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6);
    output.writeI32(this.updateCount);
    output.writeFieldEnd();
  }
  if (this.searchContextBytes !== null && this.searchContextBytes !== undefined) {
    output.writeFieldBegin('searchContextBytes', Thrift.Type.STRING, 7);
    output.writeBinary(this.searchContextBytes);
    output.writeFieldEnd();
  }
  if (this.debugInfo !== null && this.debugInfo !== undefined) {
    output.writeFieldBegin('debugInfo', Thrift.Type.STRING, 9);
    output.writeString(this.debugInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NotesMetadataResultSpec = module.exports.NotesMetadataResultSpec = function(args) {
  this.includeTitle = null;
  this.includeContentLength = null;
  this.includeCreated = null;
  this.includeUpdated = null;
  this.includeDeleted = null;
  this.includeUpdateSequenceNum = null;
  this.includeNotebookGuid = null;
  this.includeTagGuids = null;
  this.includeAttributes = null;
  this.includeLargestResourceMime = null;
  this.includeLargestResourceSize = null;
  if (args) {
    if (args.includeTitle !== undefined && args.includeTitle !== null) {
      this.includeTitle = args.includeTitle;
    }
    if (args.includeContentLength !== undefined && args.includeContentLength !== null) {
      this.includeContentLength = args.includeContentLength;
    }
    if (args.includeCreated !== undefined && args.includeCreated !== null) {
      this.includeCreated = args.includeCreated;
    }
    if (args.includeUpdated !== undefined && args.includeUpdated !== null) {
      this.includeUpdated = args.includeUpdated;
    }
    if (args.includeDeleted !== undefined && args.includeDeleted !== null) {
      this.includeDeleted = args.includeDeleted;
    }
    if (args.includeUpdateSequenceNum !== undefined && args.includeUpdateSequenceNum !== null) {
      this.includeUpdateSequenceNum = args.includeUpdateSequenceNum;
    }
    if (args.includeNotebookGuid !== undefined && args.includeNotebookGuid !== null) {
      this.includeNotebookGuid = args.includeNotebookGuid;
    }
    if (args.includeTagGuids !== undefined && args.includeTagGuids !== null) {
      this.includeTagGuids = args.includeTagGuids;
    }
    if (args.includeAttributes !== undefined && args.includeAttributes !== null) {
      this.includeAttributes = args.includeAttributes;
    }
    if (args.includeLargestResourceMime !== undefined && args.includeLargestResourceMime !== null) {
      this.includeLargestResourceMime = args.includeLargestResourceMime;
    }
    if (args.includeLargestResourceSize !== undefined && args.includeLargestResourceSize !== null) {
      this.includeLargestResourceSize = args.includeLargestResourceSize;
    }
  }
};
NotesMetadataResultSpec.prototype = {};
NotesMetadataResultSpec.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTitle = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContentLength = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeCreated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.includeDeleted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdateSequenceNum = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebookGuid = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.includeTagGuids = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAttributes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceMime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceSize = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotesMetadataResultSpec.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NotesMetadataResultSpec');
  if (this.includeTitle !== null && this.includeTitle !== undefined) {
    output.writeFieldBegin('includeTitle', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeTitle);
    output.writeFieldEnd();
  }
  if (this.includeContentLength !== null && this.includeContentLength !== undefined) {
    output.writeFieldBegin('includeContentLength', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeContentLength);
    output.writeFieldEnd();
  }
  if (this.includeCreated !== null && this.includeCreated !== undefined) {
    output.writeFieldBegin('includeCreated', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeCreated);
    output.writeFieldEnd();
  }
  if (this.includeUpdated !== null && this.includeUpdated !== undefined) {
    output.writeFieldBegin('includeUpdated', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeUpdated);
    output.writeFieldEnd();
  }
  if (this.includeDeleted !== null && this.includeDeleted !== undefined) {
    output.writeFieldBegin('includeDeleted', Thrift.Type.BOOL, 8);
    output.writeBool(this.includeDeleted);
    output.writeFieldEnd();
  }
  if (this.includeUpdateSequenceNum !== null && this.includeUpdateSequenceNum !== undefined) {
    output.writeFieldBegin('includeUpdateSequenceNum', Thrift.Type.BOOL, 10);
    output.writeBool(this.includeUpdateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.includeNotebookGuid !== null && this.includeNotebookGuid !== undefined) {
    output.writeFieldBegin('includeNotebookGuid', Thrift.Type.BOOL, 11);
    output.writeBool(this.includeNotebookGuid);
    output.writeFieldEnd();
  }
  if (this.includeTagGuids !== null && this.includeTagGuids !== undefined) {
    output.writeFieldBegin('includeTagGuids', Thrift.Type.BOOL, 12);
    output.writeBool(this.includeTagGuids);
    output.writeFieldEnd();
  }
  if (this.includeAttributes !== null && this.includeAttributes !== undefined) {
    output.writeFieldBegin('includeAttributes', Thrift.Type.BOOL, 14);
    output.writeBool(this.includeAttributes);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceMime !== null && this.includeLargestResourceMime !== undefined) {
    output.writeFieldBegin('includeLargestResourceMime', Thrift.Type.BOOL, 20);
    output.writeBool(this.includeLargestResourceMime);
    output.writeFieldEnd();
  }
  if (this.includeLargestResourceSize !== null && this.includeLargestResourceSize !== undefined) {
    output.writeFieldBegin('includeLargestResourceSize', Thrift.Type.BOOL, 21);
    output.writeBool(this.includeLargestResourceSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteCollectionCounts = module.exports.NoteCollectionCounts = function(args) {
  this.notebookCounts = null;
  this.tagCounts = null;
  this.trashCount = null;
  if (args) {
    if (args.notebookCounts !== undefined && args.notebookCounts !== null) {
      this.notebookCounts = Thrift.copyMap(args.notebookCounts, [null]);
    }
    if (args.tagCounts !== undefined && args.tagCounts !== null) {
      this.tagCounts = Thrift.copyMap(args.tagCounts, [null]);
    }
    if (args.trashCount !== undefined && args.trashCount !== null) {
      this.trashCount = args.trashCount;
    }
  }
};
NoteCollectionCounts.prototype = {};
NoteCollectionCounts.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.notebookCounts = {};
        var _rtmp3101 = input.readMapBegin();
        var _size100 = _rtmp3101.size || 0;
        for (var _i102 = 0; _i102 < _size100; ++_i102) {
          var key103 = null;
          var val104 = null;
          key103 = input.readString();
          val104 = input.readI32();
          this.notebookCounts[key103] = val104;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.tagCounts = {};
        var _rtmp3106 = input.readMapBegin();
        var _size105 = _rtmp3106.size || 0;
        for (var _i107 = 0; _i107 < _size105; ++_i107) {
          var key108 = null;
          var val109 = null;
          key108 = input.readString();
          val109 = input.readI32();
          this.tagCounts[key108] = val109;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.trashCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteCollectionCounts.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteCollectionCounts');
  if (this.notebookCounts !== null && this.notebookCounts !== undefined) {
    output.writeFieldBegin('notebookCounts', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.notebookCounts));
    for (var kiter110 in this.notebookCounts) {
      if (this.notebookCounts.hasOwnProperty(kiter110)) {
        var viter111 = this.notebookCounts[kiter110];
        output.writeString(kiter110);
        output.writeI32(viter111);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tagCounts !== null && this.tagCounts !== undefined) {
    output.writeFieldBegin('tagCounts', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.tagCounts));
    for (var kiter112 in this.tagCounts) {
      if (this.tagCounts.hasOwnProperty(kiter112)) {
        var viter113 = this.tagCounts[kiter112];
        output.writeString(kiter112);
        output.writeI32(viter113);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.trashCount !== null && this.trashCount !== undefined) {
    output.writeFieldBegin('trashCount', Thrift.Type.I32, 3);
    output.writeI32(this.trashCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteResultSpec = module.exports.NoteResultSpec = function(args) {
  this.includeContent = null;
  this.includeResourcesData = null;
  this.includeResourcesRecognition = null;
  this.includeResourcesAlternateData = null;
  this.includeSharedNotes = null;
  this.includeNoteAppDataValues = null;
  this.includeResourceAppDataValues = null;
  this.includeAccountLimits = null;
  if (args) {
    if (args.includeContent !== undefined && args.includeContent !== null) {
      this.includeContent = args.includeContent;
    }
    if (args.includeResourcesData !== undefined && args.includeResourcesData !== null) {
      this.includeResourcesData = args.includeResourcesData;
    }
    if (args.includeResourcesRecognition !== undefined && args.includeResourcesRecognition !== null) {
      this.includeResourcesRecognition = args.includeResourcesRecognition;
    }
    if (args.includeResourcesAlternateData !== undefined && args.includeResourcesAlternateData !== null) {
      this.includeResourcesAlternateData = args.includeResourcesAlternateData;
    }
    if (args.includeSharedNotes !== undefined && args.includeSharedNotes !== null) {
      this.includeSharedNotes = args.includeSharedNotes;
    }
    if (args.includeNoteAppDataValues !== undefined && args.includeNoteAppDataValues !== null) {
      this.includeNoteAppDataValues = args.includeNoteAppDataValues;
    }
    if (args.includeResourceAppDataValues !== undefined && args.includeResourceAppDataValues !== null) {
      this.includeResourceAppDataValues = args.includeResourceAppDataValues;
    }
    if (args.includeAccountLimits !== undefined && args.includeAccountLimits !== null) {
      this.includeAccountLimits = args.includeAccountLimits;
    }
  }
};
NoteResultSpec.prototype = {};
NoteResultSpec.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourcesRecognition = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourcesAlternateData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSharedNotes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeNoteAppDataValues = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResourceAppDataValues = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.includeAccountLimits = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteResultSpec.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteResultSpec');
  if (this.includeContent !== null && this.includeContent !== undefined) {
    output.writeFieldBegin('includeContent', Thrift.Type.BOOL, 1);
    output.writeBool(this.includeContent);
    output.writeFieldEnd();
  }
  if (this.includeResourcesData !== null && this.includeResourcesData !== undefined) {
    output.writeFieldBegin('includeResourcesData', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeResourcesData);
    output.writeFieldEnd();
  }
  if (this.includeResourcesRecognition !== null && this.includeResourcesRecognition !== undefined) {
    output.writeFieldBegin('includeResourcesRecognition', Thrift.Type.BOOL, 3);
    output.writeBool(this.includeResourcesRecognition);
    output.writeFieldEnd();
  }
  if (this.includeResourcesAlternateData !== null && this.includeResourcesAlternateData !== undefined) {
    output.writeFieldBegin('includeResourcesAlternateData', Thrift.Type.BOOL, 4);
    output.writeBool(this.includeResourcesAlternateData);
    output.writeFieldEnd();
  }
  if (this.includeSharedNotes !== null && this.includeSharedNotes !== undefined) {
    output.writeFieldBegin('includeSharedNotes', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeSharedNotes);
    output.writeFieldEnd();
  }
  if (this.includeNoteAppDataValues !== null && this.includeNoteAppDataValues !== undefined) {
    output.writeFieldBegin('includeNoteAppDataValues', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeNoteAppDataValues);
    output.writeFieldEnd();
  }
  if (this.includeResourceAppDataValues !== null && this.includeResourceAppDataValues !== undefined) {
    output.writeFieldBegin('includeResourceAppDataValues', Thrift.Type.BOOL, 7);
    output.writeBool(this.includeResourceAppDataValues);
    output.writeFieldEnd();
  }
  if (this.includeAccountLimits !== null && this.includeAccountLimits !== undefined) {
    output.writeFieldBegin('includeAccountLimits', Thrift.Type.BOOL, 8);
    output.writeBool(this.includeAccountLimits);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteEmailParameters = module.exports.NoteEmailParameters = function(args) {
  this.guid = null;
  this.note = null;
  this.toAddresses = null;
  this.ccAddresses = null;
  this.subject = null;
  this.message = null;
  if (args) {
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.note !== undefined && args.note !== null) {
      this.note = new Types_ttypes.Note(args.note);
    }
    if (args.toAddresses !== undefined && args.toAddresses !== null) {
      this.toAddresses = Thrift.copyList(args.toAddresses, [null]);
    }
    if (args.ccAddresses !== undefined && args.ccAddresses !== null) {
      this.ccAddresses = Thrift.copyList(args.ccAddresses, [null]);
    }
    if (args.subject !== undefined && args.subject !== null) {
      this.subject = args.subject;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
NoteEmailParameters.prototype = {};
NoteEmailParameters.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Types_ttypes.Note();
        this.note[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.toAddresses = [];
        var _rtmp3115 = input.readListBegin();
        var _size114 = _rtmp3115.size || 0;
        for (var _i116 = 0; _i116 < _size114; ++_i116) {
          var elem117 = null;
          elem117 = input.readString();
          this.toAddresses.push(elem117);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.ccAddresses = [];
        var _rtmp3119 = input.readListBegin();
        var _size118 = _rtmp3119.size || 0;
        for (var _i120 = 0; _i120 < _size118; ++_i120) {
          var elem121 = null;
          elem121 = input.readString();
          this.ccAddresses.push(elem121);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteEmailParameters.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteEmailParameters');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2);
    this.note[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.toAddresses !== null && this.toAddresses !== undefined) {
    output.writeFieldBegin('toAddresses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.toAddresses.length);
    for (var iter122 in this.toAddresses) {
      if (this.toAddresses.hasOwnProperty(iter122)) {
        iter122 = this.toAddresses[iter122];
        output.writeString(iter122);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ccAddresses !== null && this.ccAddresses !== undefined) {
    output.writeFieldBegin('ccAddresses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.ccAddresses.length);
    for (var iter123 in this.ccAddresses) {
      if (this.ccAddresses.hasOwnProperty(iter123)) {
        iter123 = this.ccAddresses[iter123];
        output.writeString(iter123);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 5);
    output.writeString(this.subject);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteVersionId = module.exports.NoteVersionId = function(args) {
  this.updateSequenceNum = null;
  this.updated = null;
  this.saved = null;
  this.title = null;
  this.lastEditorId = null;
  if (args) {
    if (args.updateSequenceNum !== undefined && args.updateSequenceNum !== null) {
      this.updateSequenceNum = args.updateSequenceNum;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field updateSequenceNum is unset!');
    }
    if (args.updated !== undefined && args.updated !== null) {
      this.updated = args.updated;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field updated is unset!');
    }
    if (args.saved !== undefined && args.saved !== null) {
      this.saved = args.saved;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field saved is unset!');
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field title is unset!');
    }
    if (args.lastEditorId !== undefined && args.lastEditorId !== null) {
      this.lastEditorId = args.lastEditorId;
    }
  }
};
NoteVersionId.prototype = {};
NoteVersionId.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.saved = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.lastEditorId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteVersionId.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteVersionId');
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 1);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 2);
    output.writeI64(this.updated);
    output.writeFieldEnd();
  }
  if (this.saved !== null && this.saved !== undefined) {
    output.writeFieldBegin('saved', Thrift.Type.I64, 3);
    output.writeI64(this.saved);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.lastEditorId !== null && this.lastEditorId !== undefined) {
    output.writeFieldBegin('lastEditorId', Thrift.Type.I32, 5);
    output.writeI32(this.lastEditorId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RelatedQuery = module.exports.RelatedQuery = function(args) {
  this.noteGuid = null;
  this.plainText = null;
  this.filter = null;
  this.referenceUri = null;
  this.context = null;
  this.cacheKey = null;
  if (args) {
    if (args.noteGuid !== undefined && args.noteGuid !== null) {
      this.noteGuid = args.noteGuid;
    }
    if (args.plainText !== undefined && args.plainText !== null) {
      this.plainText = args.plainText;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.NoteFilter(args.filter);
    }
    if (args.referenceUri !== undefined && args.referenceUri !== null) {
      this.referenceUri = args.referenceUri;
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = args.context;
    }
    if (args.cacheKey !== undefined && args.cacheKey !== null) {
      this.cacheKey = args.cacheKey;
    }
  }
};
RelatedQuery.prototype = {};
RelatedQuery.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.plainText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.NoteFilter();
        this.filter[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.referenceUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.context = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cacheKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedQuery.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('RelatedQuery');
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 1);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.plainText !== null && this.plainText !== undefined) {
    output.writeFieldBegin('plainText', Thrift.Type.STRING, 2);
    output.writeString(this.plainText);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.referenceUri !== null && this.referenceUri !== undefined) {
    output.writeFieldBegin('referenceUri', Thrift.Type.STRING, 4);
    output.writeString(this.referenceUri);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRING, 5);
    output.writeString(this.context);
    output.writeFieldEnd();
  }
  if (this.cacheKey !== null && this.cacheKey !== undefined) {
    output.writeFieldBegin('cacheKey', Thrift.Type.STRING, 6);
    output.writeString(this.cacheKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RelatedResult = module.exports.RelatedResult = function(args) {
  this.notes = null;
  this.notebooks = null;
  this.tags = null;
  this.containingNotebooks = null;
  this.debugInfo = null;
  this.experts = null;
  this.relatedContent = null;
  this.cacheKey = null;
  this.cacheExpires = null;
  if (args) {
    if (args.notes !== undefined && args.notes !== null) {
      this.notes = Thrift.copyList(args.notes, [Types_ttypes.Note]);
    }
    if (args.notebooks !== undefined && args.notebooks !== null) {
      this.notebooks = Thrift.copyList(args.notebooks, [Types_ttypes.Notebook]);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [Types_ttypes.Tag]);
    }
    if (args.containingNotebooks !== undefined && args.containingNotebooks !== null) {
      this.containingNotebooks = Thrift.copyList(args.containingNotebooks, [Types_ttypes.NotebookDescriptor]);
    }
    if (args.debugInfo !== undefined && args.debugInfo !== null) {
      this.debugInfo = args.debugInfo;
    }
    if (args.experts !== undefined && args.experts !== null) {
      this.experts = Thrift.copyList(args.experts, [Types_ttypes.UserProfile]);
    }
    if (args.relatedContent !== undefined && args.relatedContent !== null) {
      this.relatedContent = Thrift.copyList(args.relatedContent, [Types_ttypes.RelatedContent]);
    }
    if (args.cacheKey !== undefined && args.cacheKey !== null) {
      this.cacheKey = args.cacheKey;
    }
    if (args.cacheExpires !== undefined && args.cacheExpires !== null) {
      this.cacheExpires = args.cacheExpires;
    }
  }
};
RelatedResult.prototype = {};
RelatedResult.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.notes = [];
        var _rtmp3125 = input.readListBegin();
        var _size124 = _rtmp3125.size || 0;
        for (var _i126 = 0; _i126 < _size124; ++_i126) {
          var elem127 = null;
          elem127 = new Types_ttypes.Note();
          elem127[Symbol.for("read")](input);
          this.notes.push(elem127);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.notebooks = [];
        var _rtmp3129 = input.readListBegin();
        var _size128 = _rtmp3129.size || 0;
        for (var _i130 = 0; _i130 < _size128; ++_i130) {
          var elem131 = null;
          elem131 = new Types_ttypes.Notebook();
          elem131[Symbol.for("read")](input);
          this.notebooks.push(elem131);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.tags = [];
        var _rtmp3133 = input.readListBegin();
        var _size132 = _rtmp3133.size || 0;
        for (var _i134 = 0; _i134 < _size132; ++_i134) {
          var elem135 = null;
          elem135 = new Types_ttypes.Tag();
          elem135[Symbol.for("read")](input);
          this.tags.push(elem135);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.containingNotebooks = [];
        var _rtmp3137 = input.readListBegin();
        var _size136 = _rtmp3137.size || 0;
        for (var _i138 = 0; _i138 < _size136; ++_i138) {
          var elem139 = null;
          elem139 = new Types_ttypes.NotebookDescriptor();
          elem139[Symbol.for("read")](input);
          this.containingNotebooks.push(elem139);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.debugInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.experts = [];
        var _rtmp3141 = input.readListBegin();
        var _size140 = _rtmp3141.size || 0;
        for (var _i142 = 0; _i142 < _size140; ++_i142) {
          var elem143 = null;
          elem143 = new Types_ttypes.UserProfile();
          elem143[Symbol.for("read")](input);
          this.experts.push(elem143);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.relatedContent = [];
        var _rtmp3145 = input.readListBegin();
        var _size144 = _rtmp3145.size || 0;
        for (var _i146 = 0; _i146 < _size144; ++_i146) {
          var elem147 = null;
          elem147 = new Types_ttypes.RelatedContent();
          elem147[Symbol.for("read")](input);
          this.relatedContent.push(elem147);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.cacheKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.cacheExpires = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedResult.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('RelatedResult');
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.notes.length);
    for (var iter148 in this.notes) {
      if (this.notes.hasOwnProperty(iter148)) {
        iter148 = this.notes[iter148];
        iter148[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notebooks !== null && this.notebooks !== undefined) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length);
    for (var iter149 in this.notebooks) {
      if (this.notebooks.hasOwnProperty(iter149)) {
        iter149 = this.notebooks[iter149];
        iter149[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter150 in this.tags) {
      if (this.tags.hasOwnProperty(iter150)) {
        iter150 = this.tags[iter150];
        iter150[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.containingNotebooks !== null && this.containingNotebooks !== undefined) {
    output.writeFieldBegin('containingNotebooks', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.containingNotebooks.length);
    for (var iter151 in this.containingNotebooks) {
      if (this.containingNotebooks.hasOwnProperty(iter151)) {
        iter151 = this.containingNotebooks[iter151];
        iter151[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.debugInfo !== null && this.debugInfo !== undefined) {
    output.writeFieldBegin('debugInfo', Thrift.Type.STRING, 5);
    output.writeString(this.debugInfo);
    output.writeFieldEnd();
  }
  if (this.experts !== null && this.experts !== undefined) {
    output.writeFieldBegin('experts', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.experts.length);
    for (var iter152 in this.experts) {
      if (this.experts.hasOwnProperty(iter152)) {
        iter152 = this.experts[iter152];
        iter152[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.relatedContent !== null && this.relatedContent !== undefined) {
    output.writeFieldBegin('relatedContent', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.relatedContent.length);
    for (var iter153 in this.relatedContent) {
      if (this.relatedContent.hasOwnProperty(iter153)) {
        iter153 = this.relatedContent[iter153];
        iter153[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cacheKey !== null && this.cacheKey !== undefined) {
    output.writeFieldBegin('cacheKey', Thrift.Type.STRING, 8);
    output.writeString(this.cacheKey);
    output.writeFieldEnd();
  }
  if (this.cacheExpires !== null && this.cacheExpires !== undefined) {
    output.writeFieldBegin('cacheExpires', Thrift.Type.I32, 9);
    output.writeI32(this.cacheExpires);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RelatedResultSpec = module.exports.RelatedResultSpec = function(args) {
  this.maxNotes = null;
  this.maxNotebooks = null;
  this.maxTags = null;
  this.writableNotebooksOnly = null;
  this.includeContainingNotebooks = null;
  this.includeDebugInfo = null;
  this.maxExperts = null;
  this.maxRelatedContent = null;
  this.relatedContentTypes = null;
  if (args) {
    if (args.maxNotes !== undefined && args.maxNotes !== null) {
      this.maxNotes = args.maxNotes;
    }
    if (args.maxNotebooks !== undefined && args.maxNotebooks !== null) {
      this.maxNotebooks = args.maxNotebooks;
    }
    if (args.maxTags !== undefined && args.maxTags !== null) {
      this.maxTags = args.maxTags;
    }
    if (args.writableNotebooksOnly !== undefined && args.writableNotebooksOnly !== null) {
      this.writableNotebooksOnly = args.writableNotebooksOnly;
    }
    if (args.includeContainingNotebooks !== undefined && args.includeContainingNotebooks !== null) {
      this.includeContainingNotebooks = args.includeContainingNotebooks;
    }
    if (args.includeDebugInfo !== undefined && args.includeDebugInfo !== null) {
      this.includeDebugInfo = args.includeDebugInfo;
    }
    if (args.maxExperts !== undefined && args.maxExperts !== null) {
      this.maxExperts = args.maxExperts;
    }
    if (args.maxRelatedContent !== undefined && args.maxRelatedContent !== null) {
      this.maxRelatedContent = args.maxRelatedContent;
    }
    if (args.relatedContentTypes !== undefined && args.relatedContentTypes !== null) {
      this.relatedContentTypes = Thrift.copyList(args.relatedContentTypes, [null]);
    }
  }
};
RelatedResultSpec.prototype = {};
RelatedResultSpec.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.maxNotes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxNotebooks = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxTags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.writableNotebooksOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeContainingNotebooks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.includeDebugInfo = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.maxExperts = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.maxRelatedContent = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        this.relatedContentTypes = [];
        var _rtmp3155 = input.readSetBegin();
        var _size154 = _rtmp3155.size || 0;
        for (var _i156 = 0; _i156 < _size154; ++_i156) {
          var elem157 = null;
          elem157 = input.readI32();
          this.relatedContentTypes.push(elem157);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelatedResultSpec.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('RelatedResultSpec');
  if (this.maxNotes !== null && this.maxNotes !== undefined) {
    output.writeFieldBegin('maxNotes', Thrift.Type.I32, 1);
    output.writeI32(this.maxNotes);
    output.writeFieldEnd();
  }
  if (this.maxNotebooks !== null && this.maxNotebooks !== undefined) {
    output.writeFieldBegin('maxNotebooks', Thrift.Type.I32, 2);
    output.writeI32(this.maxNotebooks);
    output.writeFieldEnd();
  }
  if (this.maxTags !== null && this.maxTags !== undefined) {
    output.writeFieldBegin('maxTags', Thrift.Type.I32, 3);
    output.writeI32(this.maxTags);
    output.writeFieldEnd();
  }
  if (this.writableNotebooksOnly !== null && this.writableNotebooksOnly !== undefined) {
    output.writeFieldBegin('writableNotebooksOnly', Thrift.Type.BOOL, 4);
    output.writeBool(this.writableNotebooksOnly);
    output.writeFieldEnd();
  }
  if (this.includeContainingNotebooks !== null && this.includeContainingNotebooks !== undefined) {
    output.writeFieldBegin('includeContainingNotebooks', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeContainingNotebooks);
    output.writeFieldEnd();
  }
  if (this.includeDebugInfo !== null && this.includeDebugInfo !== undefined) {
    output.writeFieldBegin('includeDebugInfo', Thrift.Type.BOOL, 6);
    output.writeBool(this.includeDebugInfo);
    output.writeFieldEnd();
  }
  if (this.maxExperts !== null && this.maxExperts !== undefined) {
    output.writeFieldBegin('maxExperts', Thrift.Type.I32, 7);
    output.writeI32(this.maxExperts);
    output.writeFieldEnd();
  }
  if (this.maxRelatedContent !== null && this.maxRelatedContent !== undefined) {
    output.writeFieldBegin('maxRelatedContent', Thrift.Type.I32, 8);
    output.writeI32(this.maxRelatedContent);
    output.writeFieldEnd();
  }
  if (this.relatedContentTypes !== null && this.relatedContentTypes !== undefined) {
    output.writeFieldBegin('relatedContentTypes', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.I32, this.relatedContentTypes.length);
    for (var iter158 in this.relatedContentTypes) {
      if (this.relatedContentTypes.hasOwnProperty(iter158)) {
        iter158 = this.relatedContentTypes[iter158];
        output.writeI32(iter158);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateNoteIfUsnMatchesResult = module.exports.UpdateNoteIfUsnMatchesResult = function(args) {
  this.note = null;
  this.updated = null;
  if (args) {
    if (args.note !== undefined && args.note !== null) {
      this.note = new Types_ttypes.Note(args.note);
    }
    if (args.updated !== undefined && args.updated !== null) {
      this.updated = args.updated;
    }
  }
};
UpdateNoteIfUsnMatchesResult.prototype = {};
UpdateNoteIfUsnMatchesResult.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Types_ttypes.Note();
        this.note[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.updated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateNoteIfUsnMatchesResult.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('UpdateNoteIfUsnMatchesResult');
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 1);
    this.note[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.BOOL, 2);
    output.writeBool(this.updated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShareRelationshipRestrictions = module.exports.ShareRelationshipRestrictions = function(args) {
  this.noSetReadOnly = null;
  this.noSetReadPlusActivity = null;
  this.noSetModify = null;
  this.noSetFullAccess = null;
  if (args) {
    if (args.noSetReadOnly !== undefined && args.noSetReadOnly !== null) {
      this.noSetReadOnly = args.noSetReadOnly;
    }
    if (args.noSetReadPlusActivity !== undefined && args.noSetReadPlusActivity !== null) {
      this.noSetReadPlusActivity = args.noSetReadPlusActivity;
    }
    if (args.noSetModify !== undefined && args.noSetModify !== null) {
      this.noSetModify = args.noSetModify;
    }
    if (args.noSetFullAccess !== undefined && args.noSetFullAccess !== null) {
      this.noSetFullAccess = args.noSetFullAccess;
    }
  }
};
ShareRelationshipRestrictions.prototype = {};
ShareRelationshipRestrictions.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetReadOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetReadPlusActivity = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetModify = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetFullAccess = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShareRelationshipRestrictions.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('ShareRelationshipRestrictions');
  if (this.noSetReadOnly !== null && this.noSetReadOnly !== undefined) {
    output.writeFieldBegin('noSetReadOnly', Thrift.Type.BOOL, 1);
    output.writeBool(this.noSetReadOnly);
    output.writeFieldEnd();
  }
  if (this.noSetReadPlusActivity !== null && this.noSetReadPlusActivity !== undefined) {
    output.writeFieldBegin('noSetReadPlusActivity', Thrift.Type.BOOL, 2);
    output.writeBool(this.noSetReadPlusActivity);
    output.writeFieldEnd();
  }
  if (this.noSetModify !== null && this.noSetModify !== undefined) {
    output.writeFieldBegin('noSetModify', Thrift.Type.BOOL, 3);
    output.writeBool(this.noSetModify);
    output.writeFieldEnd();
  }
  if (this.noSetFullAccess !== null && this.noSetFullAccess !== undefined) {
    output.writeFieldBegin('noSetFullAccess', Thrift.Type.BOOL, 4);
    output.writeBool(this.noSetFullAccess);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvitationShareRelationship = module.exports.InvitationShareRelationship = function(args) {
  this.displayName = null;
  this.recipientUserIdentity = null;
  this.privilege = null;
  this.sharerUserId = null;
  if (args) {
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.recipientUserIdentity !== undefined && args.recipientUserIdentity !== null) {
      this.recipientUserIdentity = new Types_ttypes.UserIdentity(args.recipientUserIdentity);
    }
    if (args.privilege !== undefined && args.privilege !== null) {
      this.privilege = args.privilege;
    }
    if (args.sharerUserId !== undefined && args.sharerUserId !== null) {
      this.sharerUserId = args.sharerUserId;
    }
  }
};
InvitationShareRelationship.prototype = {};
InvitationShareRelationship.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.recipientUserIdentity = new Types_ttypes.UserIdentity();
        this.recipientUserIdentity[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvitationShareRelationship.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('InvitationShareRelationship');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.recipientUserIdentity !== null && this.recipientUserIdentity !== undefined) {
    output.writeFieldBegin('recipientUserIdentity', Thrift.Type.STRUCT, 2);
    this.recipientUserIdentity[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.sharerUserId !== null && this.sharerUserId !== undefined) {
    output.writeFieldBegin('sharerUserId', Thrift.Type.I32, 5);
    output.writeI32(this.sharerUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MemberShareRelationship = module.exports.MemberShareRelationship = function(args) {
  this.displayName = null;
  this.recipientUserId = null;
  this.bestPrivilege = null;
  this.individualPrivilege = null;
  this.restrictions = null;
  this.sharerUserId = null;
  if (args) {
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.recipientUserId !== undefined && args.recipientUserId !== null) {
      this.recipientUserId = args.recipientUserId;
    }
    if (args.bestPrivilege !== undefined && args.bestPrivilege !== null) {
      this.bestPrivilege = args.bestPrivilege;
    }
    if (args.individualPrivilege !== undefined && args.individualPrivilege !== null) {
      this.individualPrivilege = args.individualPrivilege;
    }
    if (args.restrictions !== undefined && args.restrictions !== null) {
      this.restrictions = new ttypes.ShareRelationshipRestrictions(args.restrictions);
    }
    if (args.sharerUserId !== undefined && args.sharerUserId !== null) {
      this.sharerUserId = args.sharerUserId;
    }
  }
};
MemberShareRelationship.prototype = {};
MemberShareRelationship.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.recipientUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.bestPrivilege = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.individualPrivilege = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.restrictions = new ttypes.ShareRelationshipRestrictions();
        this.restrictions[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MemberShareRelationship.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('MemberShareRelationship');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.recipientUserId !== null && this.recipientUserId !== undefined) {
    output.writeFieldBegin('recipientUserId', Thrift.Type.I32, 2);
    output.writeI32(this.recipientUserId);
    output.writeFieldEnd();
  }
  if (this.bestPrivilege !== null && this.bestPrivilege !== undefined) {
    output.writeFieldBegin('bestPrivilege', Thrift.Type.I32, 3);
    output.writeI32(this.bestPrivilege);
    output.writeFieldEnd();
  }
  if (this.individualPrivilege !== null && this.individualPrivilege !== undefined) {
    output.writeFieldBegin('individualPrivilege', Thrift.Type.I32, 4);
    output.writeI32(this.individualPrivilege);
    output.writeFieldEnd();
  }
  if (this.restrictions !== null && this.restrictions !== undefined) {
    output.writeFieldBegin('restrictions', Thrift.Type.STRUCT, 5);
    this.restrictions[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.sharerUserId !== null && this.sharerUserId !== undefined) {
    output.writeFieldBegin('sharerUserId', Thrift.Type.I32, 6);
    output.writeI32(this.sharerUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShareRelationships = module.exports.ShareRelationships = function(args) {
  this.invitations = null;
  this.memberships = null;
  this.invitationRestrictions = null;
  if (args) {
    if (args.invitations !== undefined && args.invitations !== null) {
      this.invitations = Thrift.copyList(args.invitations, [ttypes.InvitationShareRelationship]);
    }
    if (args.memberships !== undefined && args.memberships !== null) {
      this.memberships = Thrift.copyList(args.memberships, [ttypes.MemberShareRelationship]);
    }
    if (args.invitationRestrictions !== undefined && args.invitationRestrictions !== null) {
      this.invitationRestrictions = new ttypes.ShareRelationshipRestrictions(args.invitationRestrictions);
    }
  }
};
ShareRelationships.prototype = {};
ShareRelationships.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.invitations = [];
        var _rtmp3160 = input.readListBegin();
        var _size159 = _rtmp3160.size || 0;
        for (var _i161 = 0; _i161 < _size159; ++_i161) {
          var elem162 = null;
          elem162 = new ttypes.InvitationShareRelationship();
          elem162[Symbol.for("read")](input);
          this.invitations.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.memberships = [];
        var _rtmp3164 = input.readListBegin();
        var _size163 = _rtmp3164.size || 0;
        for (var _i165 = 0; _i165 < _size163; ++_i165) {
          var elem166 = null;
          elem166 = new ttypes.MemberShareRelationship();
          elem166[Symbol.for("read")](input);
          this.memberships.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitationRestrictions = new ttypes.ShareRelationshipRestrictions();
        this.invitationRestrictions[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShareRelationships.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('ShareRelationships');
  if (this.invitations !== null && this.invitations !== undefined) {
    output.writeFieldBegin('invitations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitations.length);
    for (var iter167 in this.invitations) {
      if (this.invitations.hasOwnProperty(iter167)) {
        iter167 = this.invitations[iter167];
        iter167[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.memberships !== null && this.memberships !== undefined) {
    output.writeFieldBegin('memberships', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.memberships.length);
    for (var iter168 in this.memberships) {
      if (this.memberships.hasOwnProperty(iter168)) {
        iter168 = this.memberships[iter168];
        iter168[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationRestrictions !== null && this.invitationRestrictions !== undefined) {
    output.writeFieldBegin('invitationRestrictions', Thrift.Type.STRUCT, 3);
    this.invitationRestrictions[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManageNotebookSharesParameters = module.exports.ManageNotebookSharesParameters = function(args) {
  this.notebookGuid = null;
  this.inviteMessage = null;
  this.membershipsToUpdate = null;
  this.invitationsToCreateOrUpdate = null;
  this.unshares = null;
  if (args) {
    if (args.notebookGuid !== undefined && args.notebookGuid !== null) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.inviteMessage !== undefined && args.inviteMessage !== null) {
      this.inviteMessage = args.inviteMessage;
    }
    if (args.membershipsToUpdate !== undefined && args.membershipsToUpdate !== null) {
      this.membershipsToUpdate = Thrift.copyList(args.membershipsToUpdate, [ttypes.MemberShareRelationship]);
    }
    if (args.invitationsToCreateOrUpdate !== undefined && args.invitationsToCreateOrUpdate !== null) {
      this.invitationsToCreateOrUpdate = Thrift.copyList(args.invitationsToCreateOrUpdate, [ttypes.InvitationShareRelationship]);
    }
    if (args.unshares !== undefined && args.unshares !== null) {
      this.unshares = Thrift.copyList(args.unshares, [Types_ttypes.UserIdentity]);
    }
  }
};
ManageNotebookSharesParameters.prototype = {};
ManageNotebookSharesParameters.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.inviteMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.membershipsToUpdate = [];
        var _rtmp3170 = input.readListBegin();
        var _size169 = _rtmp3170.size || 0;
        for (var _i171 = 0; _i171 < _size169; ++_i171) {
          var elem172 = null;
          elem172 = new ttypes.MemberShareRelationship();
          elem172[Symbol.for("read")](input);
          this.membershipsToUpdate.push(elem172);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.invitationsToCreateOrUpdate = [];
        var _rtmp3174 = input.readListBegin();
        var _size173 = _rtmp3174.size || 0;
        for (var _i175 = 0; _i175 < _size173; ++_i175) {
          var elem176 = null;
          elem176 = new ttypes.InvitationShareRelationship();
          elem176[Symbol.for("read")](input);
          this.invitationsToCreateOrUpdate.push(elem176);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.unshares = [];
        var _rtmp3178 = input.readListBegin();
        var _size177 = _rtmp3178.size || 0;
        for (var _i179 = 0; _i179 < _size177; ++_i179) {
          var elem180 = null;
          elem180 = new Types_ttypes.UserIdentity();
          elem180[Symbol.for("read")](input);
          this.unshares.push(elem180);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNotebookSharesParameters.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('ManageNotebookSharesParameters');
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 1);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.inviteMessage !== null && this.inviteMessage !== undefined) {
    output.writeFieldBegin('inviteMessage', Thrift.Type.STRING, 2);
    output.writeString(this.inviteMessage);
    output.writeFieldEnd();
  }
  if (this.membershipsToUpdate !== null && this.membershipsToUpdate !== undefined) {
    output.writeFieldBegin('membershipsToUpdate', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.membershipsToUpdate.length);
    for (var iter181 in this.membershipsToUpdate) {
      if (this.membershipsToUpdate.hasOwnProperty(iter181)) {
        iter181 = this.membershipsToUpdate[iter181];
        iter181[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationsToCreateOrUpdate !== null && this.invitationsToCreateOrUpdate !== undefined) {
    output.writeFieldBegin('invitationsToCreateOrUpdate', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitationsToCreateOrUpdate.length);
    for (var iter182 in this.invitationsToCreateOrUpdate) {
      if (this.invitationsToCreateOrUpdate.hasOwnProperty(iter182)) {
        iter182 = this.invitationsToCreateOrUpdate[iter182];
        iter182[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.unshares !== null && this.unshares !== undefined) {
    output.writeFieldBegin('unshares', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.unshares.length);
    for (var iter183 in this.unshares) {
      if (this.unshares.hasOwnProperty(iter183)) {
        iter183 = this.unshares[iter183];
        iter183[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManageNotebookSharesError = module.exports.ManageNotebookSharesError = function(args) {
  this.userIdentity = null;
  this.userException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.userIdentity !== undefined && args.userIdentity !== null) {
      this.userIdentity = new Types_ttypes.UserIdentity(args.userIdentity);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
ManageNotebookSharesError.prototype = {};
ManageNotebookSharesError.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userIdentity = new Types_ttypes.UserIdentity();
        this.userIdentity[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNotebookSharesError.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('ManageNotebookSharesError');
  if (this.userIdentity !== null && this.userIdentity !== undefined) {
    output.writeFieldBegin('userIdentity', Thrift.Type.STRUCT, 1);
    this.userIdentity[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 2);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManageNotebookSharesResult = module.exports.ManageNotebookSharesResult = function(args) {
  this.errors = null;
  if (args) {
    if (args.errors !== undefined && args.errors !== null) {
      this.errors = Thrift.copyList(args.errors, [ttypes.ManageNotebookSharesError]);
    }
  }
};
ManageNotebookSharesResult.prototype = {};
ManageNotebookSharesResult.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.errors = [];
        var _rtmp3185 = input.readListBegin();
        var _size184 = _rtmp3185.size || 0;
        for (var _i186 = 0; _i186 < _size184; ++_i186) {
          var elem187 = null;
          elem187 = new ttypes.ManageNotebookSharesError();
          elem187[Symbol.for("read")](input);
          this.errors.push(elem187);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNotebookSharesResult.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('ManageNotebookSharesResult');
  if (this.errors !== null && this.errors !== undefined) {
    output.writeFieldBegin('errors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.errors.length);
    for (var iter188 in this.errors) {
      if (this.errors.hasOwnProperty(iter188)) {
        iter188 = this.errors[iter188];
        iter188[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SharedNoteTemplate = module.exports.SharedNoteTemplate = function(args) {
  this.noteGuid = null;
  this.recipientThreadId = null;
  this.recipientContacts = null;
  this.privilege = null;
  if (args) {
    if (args.noteGuid !== undefined && args.noteGuid !== null) {
      this.noteGuid = args.noteGuid;
    }
    if (args.recipientThreadId !== undefined && args.recipientThreadId !== null) {
      this.recipientThreadId = args.recipientThreadId;
    }
    if (args.recipientContacts !== undefined && args.recipientContacts !== null) {
      this.recipientContacts = Thrift.copyList(args.recipientContacts, [Types_ttypes.Contact]);
    }
    if (args.privilege !== undefined && args.privilege !== null) {
      this.privilege = args.privilege;
    }
  }
};
SharedNoteTemplate.prototype = {};
SharedNoteTemplate.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.recipientThreadId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.recipientContacts = [];
        var _rtmp3190 = input.readListBegin();
        var _size189 = _rtmp3190.size || 0;
        for (var _i191 = 0; _i191 < _size189; ++_i191) {
          var elem192 = null;
          elem192 = new Types_ttypes.Contact();
          elem192[Symbol.for("read")](input);
          this.recipientContacts.push(elem192);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharedNoteTemplate.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('SharedNoteTemplate');
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 1);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.recipientThreadId !== null && this.recipientThreadId !== undefined) {
    output.writeFieldBegin('recipientThreadId', Thrift.Type.I64, 4);
    output.writeI64(this.recipientThreadId);
    output.writeFieldEnd();
  }
  if (this.recipientContacts !== null && this.recipientContacts !== undefined) {
    output.writeFieldBegin('recipientContacts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.recipientContacts.length);
    for (var iter193 in this.recipientContacts) {
      if (this.recipientContacts.hasOwnProperty(iter193)) {
        iter193 = this.recipientContacts[iter193];
        iter193[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NotebookShareTemplate = module.exports.NotebookShareTemplate = function(args) {
  this.notebookGuid = null;
  this.recipientThreadId = null;
  this.recipientContacts = null;
  this.privilege = null;
  if (args) {
    if (args.notebookGuid !== undefined && args.notebookGuid !== null) {
      this.notebookGuid = args.notebookGuid;
    }
    if (args.recipientThreadId !== undefined && args.recipientThreadId !== null) {
      this.recipientThreadId = args.recipientThreadId;
    }
    if (args.recipientContacts !== undefined && args.recipientContacts !== null) {
      this.recipientContacts = Thrift.copyList(args.recipientContacts, [Types_ttypes.Contact]);
    }
    if (args.privilege !== undefined && args.privilege !== null) {
      this.privilege = args.privilege;
    }
  }
};
NotebookShareTemplate.prototype = {};
NotebookShareTemplate.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.recipientThreadId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.recipientContacts = [];
        var _rtmp3195 = input.readListBegin();
        var _size194 = _rtmp3195.size || 0;
        for (var _i196 = 0; _i196 < _size194; ++_i196) {
          var elem197 = null;
          elem197 = new Types_ttypes.Contact();
          elem197[Symbol.for("read")](input);
          this.recipientContacts.push(elem197);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotebookShareTemplate.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NotebookShareTemplate');
  if (this.notebookGuid !== null && this.notebookGuid !== undefined) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 1);
    output.writeString(this.notebookGuid);
    output.writeFieldEnd();
  }
  if (this.recipientThreadId !== null && this.recipientThreadId !== undefined) {
    output.writeFieldBegin('recipientThreadId', Thrift.Type.I64, 4);
    output.writeI64(this.recipientThreadId);
    output.writeFieldEnd();
  }
  if (this.recipientContacts !== null && this.recipientContacts !== undefined) {
    output.writeFieldBegin('recipientContacts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.recipientContacts.length);
    for (var iter198 in this.recipientContacts) {
      if (this.recipientContacts.hasOwnProperty(iter198)) {
        iter198 = this.recipientContacts[iter198];
        iter198[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateOrUpdateNotebookSharesResult = module.exports.CreateOrUpdateNotebookSharesResult = function(args) {
  this.updateSequenceNum = null;
  this.matchingShares = null;
  if (args) {
    if (args.updateSequenceNum !== undefined && args.updateSequenceNum !== null) {
      this.updateSequenceNum = args.updateSequenceNum;
    }
    if (args.matchingShares !== undefined && args.matchingShares !== null) {
      this.matchingShares = Thrift.copyList(args.matchingShares, [Types_ttypes.SharedNotebook]);
    }
  }
};
CreateOrUpdateNotebookSharesResult.prototype = {};
CreateOrUpdateNotebookSharesResult.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.matchingShares = [];
        var _rtmp3200 = input.readListBegin();
        var _size199 = _rtmp3200.size || 0;
        for (var _i201 = 0; _i201 < _size199; ++_i201) {
          var elem202 = null;
          elem202 = new Types_ttypes.SharedNotebook();
          elem202[Symbol.for("read")](input);
          this.matchingShares.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateOrUpdateNotebookSharesResult.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('CreateOrUpdateNotebookSharesResult');
  if (this.updateSequenceNum !== null && this.updateSequenceNum !== undefined) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 1);
    output.writeI32(this.updateSequenceNum);
    output.writeFieldEnd();
  }
  if (this.matchingShares !== null && this.matchingShares !== undefined) {
    output.writeFieldBegin('matchingShares', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.matchingShares.length);
    for (var iter203 in this.matchingShares) {
      if (this.matchingShares.hasOwnProperty(iter203)) {
        iter203 = this.matchingShares[iter203];
        iter203[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteShareRelationshipRestrictions = module.exports.NoteShareRelationshipRestrictions = function(args) {
  this.noSetReadNote = null;
  this.noSetModifyNote = null;
  this.noSetFullAccess = null;
  if (args) {
    if (args.noSetReadNote !== undefined && args.noSetReadNote !== null) {
      this.noSetReadNote = args.noSetReadNote;
    }
    if (args.noSetModifyNote !== undefined && args.noSetModifyNote !== null) {
      this.noSetModifyNote = args.noSetModifyNote;
    }
    if (args.noSetFullAccess !== undefined && args.noSetFullAccess !== null) {
      this.noSetFullAccess = args.noSetFullAccess;
    }
  }
};
NoteShareRelationshipRestrictions.prototype = {};
NoteShareRelationshipRestrictions.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetReadNote = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetModifyNote = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noSetFullAccess = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteShareRelationshipRestrictions.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteShareRelationshipRestrictions');
  if (this.noSetReadNote !== null && this.noSetReadNote !== undefined) {
    output.writeFieldBegin('noSetReadNote', Thrift.Type.BOOL, 1);
    output.writeBool(this.noSetReadNote);
    output.writeFieldEnd();
  }
  if (this.noSetModifyNote !== null && this.noSetModifyNote !== undefined) {
    output.writeFieldBegin('noSetModifyNote', Thrift.Type.BOOL, 2);
    output.writeBool(this.noSetModifyNote);
    output.writeFieldEnd();
  }
  if (this.noSetFullAccess !== null && this.noSetFullAccess !== undefined) {
    output.writeFieldBegin('noSetFullAccess', Thrift.Type.BOOL, 3);
    output.writeBool(this.noSetFullAccess);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteMemberShareRelationship = module.exports.NoteMemberShareRelationship = function(args) {
  this.displayName = null;
  this.recipientUserId = null;
  this.privilege = null;
  this.restrictions = null;
  this.sharerUserId = null;
  if (args) {
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.recipientUserId !== undefined && args.recipientUserId !== null) {
      this.recipientUserId = args.recipientUserId;
    }
    if (args.privilege !== undefined && args.privilege !== null) {
      this.privilege = args.privilege;
    }
    if (args.restrictions !== undefined && args.restrictions !== null) {
      this.restrictions = new ttypes.NoteShareRelationshipRestrictions(args.restrictions);
    }
    if (args.sharerUserId !== undefined && args.sharerUserId !== null) {
      this.sharerUserId = args.sharerUserId;
    }
  }
};
NoteMemberShareRelationship.prototype = {};
NoteMemberShareRelationship.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.recipientUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.restrictions = new ttypes.NoteShareRelationshipRestrictions();
        this.restrictions[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteMemberShareRelationship.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteMemberShareRelationship');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.recipientUserId !== null && this.recipientUserId !== undefined) {
    output.writeFieldBegin('recipientUserId', Thrift.Type.I32, 2);
    output.writeI32(this.recipientUserId);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.restrictions !== null && this.restrictions !== undefined) {
    output.writeFieldBegin('restrictions', Thrift.Type.STRUCT, 4);
    this.restrictions[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.sharerUserId !== null && this.sharerUserId !== undefined) {
    output.writeFieldBegin('sharerUserId', Thrift.Type.I32, 5);
    output.writeI32(this.sharerUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteInvitationShareRelationship = module.exports.NoteInvitationShareRelationship = function(args) {
  this.displayName = null;
  this.recipientIdentityId = null;
  this.privilege = null;
  this.sharerUserId = null;
  if (args) {
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.recipientIdentityId !== undefined && args.recipientIdentityId !== null) {
      this.recipientIdentityId = args.recipientIdentityId;
    }
    if (args.privilege !== undefined && args.privilege !== null) {
      this.privilege = args.privilege;
    }
    if (args.sharerUserId !== undefined && args.sharerUserId !== null) {
      this.sharerUserId = args.sharerUserId;
    }
  }
};
NoteInvitationShareRelationship.prototype = {};
NoteInvitationShareRelationship.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.recipientIdentityId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.sharerUserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteInvitationShareRelationship.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteInvitationShareRelationship');
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 1);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.recipientIdentityId !== null && this.recipientIdentityId !== undefined) {
    output.writeFieldBegin('recipientIdentityId', Thrift.Type.I64, 2);
    output.writeI64(this.recipientIdentityId);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.sharerUserId !== null && this.sharerUserId !== undefined) {
    output.writeFieldBegin('sharerUserId', Thrift.Type.I32, 5);
    output.writeI32(this.sharerUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NoteShareRelationships = module.exports.NoteShareRelationships = function(args) {
  this.invitations = null;
  this.memberships = null;
  this.invitationRestrictions = null;
  if (args) {
    if (args.invitations !== undefined && args.invitations !== null) {
      this.invitations = Thrift.copyList(args.invitations, [ttypes.NoteInvitationShareRelationship]);
    }
    if (args.memberships !== undefined && args.memberships !== null) {
      this.memberships = Thrift.copyList(args.memberships, [ttypes.NoteMemberShareRelationship]);
    }
    if (args.invitationRestrictions !== undefined && args.invitationRestrictions !== null) {
      this.invitationRestrictions = new ttypes.NoteShareRelationshipRestrictions(args.invitationRestrictions);
    }
  }
};
NoteShareRelationships.prototype = {};
NoteShareRelationships.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.invitations = [];
        var _rtmp3205 = input.readListBegin();
        var _size204 = _rtmp3205.size || 0;
        for (var _i206 = 0; _i206 < _size204; ++_i206) {
          var elem207 = null;
          elem207 = new ttypes.NoteInvitationShareRelationship();
          elem207[Symbol.for("read")](input);
          this.invitations.push(elem207);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.memberships = [];
        var _rtmp3209 = input.readListBegin();
        var _size208 = _rtmp3209.size || 0;
        for (var _i210 = 0; _i210 < _size208; ++_i210) {
          var elem211 = null;
          elem211 = new ttypes.NoteMemberShareRelationship();
          elem211[Symbol.for("read")](input);
          this.memberships.push(elem211);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invitationRestrictions = new ttypes.NoteShareRelationshipRestrictions();
        this.invitationRestrictions[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NoteShareRelationships.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('NoteShareRelationships');
  if (this.invitations !== null && this.invitations !== undefined) {
    output.writeFieldBegin('invitations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitations.length);
    for (var iter212 in this.invitations) {
      if (this.invitations.hasOwnProperty(iter212)) {
        iter212 = this.invitations[iter212];
        iter212[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.memberships !== null && this.memberships !== undefined) {
    output.writeFieldBegin('memberships', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.memberships.length);
    for (var iter213 in this.memberships) {
      if (this.memberships.hasOwnProperty(iter213)) {
        iter213 = this.memberships[iter213];
        iter213[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationRestrictions !== null && this.invitationRestrictions !== undefined) {
    output.writeFieldBegin('invitationRestrictions', Thrift.Type.STRUCT, 3);
    this.invitationRestrictions[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManageNoteSharesParameters = module.exports.ManageNoteSharesParameters = function(args) {
  this.noteGuid = null;
  this.membershipsToUpdate = null;
  this.invitationsToUpdate = null;
  this.membershipsToUnshare = null;
  this.invitationsToUnshare = null;
  if (args) {
    if (args.noteGuid !== undefined && args.noteGuid !== null) {
      this.noteGuid = args.noteGuid;
    }
    if (args.membershipsToUpdate !== undefined && args.membershipsToUpdate !== null) {
      this.membershipsToUpdate = Thrift.copyList(args.membershipsToUpdate, [ttypes.NoteMemberShareRelationship]);
    }
    if (args.invitationsToUpdate !== undefined && args.invitationsToUpdate !== null) {
      this.invitationsToUpdate = Thrift.copyList(args.invitationsToUpdate, [ttypes.NoteInvitationShareRelationship]);
    }
    if (args.membershipsToUnshare !== undefined && args.membershipsToUnshare !== null) {
      this.membershipsToUnshare = Thrift.copyList(args.membershipsToUnshare, [null]);
    }
    if (args.invitationsToUnshare !== undefined && args.invitationsToUnshare !== null) {
      this.invitationsToUnshare = Thrift.copyList(args.invitationsToUnshare, [null]);
    }
  }
};
ManageNoteSharesParameters.prototype = {};
ManageNoteSharesParameters.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.membershipsToUpdate = [];
        var _rtmp3215 = input.readListBegin();
        var _size214 = _rtmp3215.size || 0;
        for (var _i216 = 0; _i216 < _size214; ++_i216) {
          var elem217 = null;
          elem217 = new ttypes.NoteMemberShareRelationship();
          elem217[Symbol.for("read")](input);
          this.membershipsToUpdate.push(elem217);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.invitationsToUpdate = [];
        var _rtmp3219 = input.readListBegin();
        var _size218 = _rtmp3219.size || 0;
        for (var _i220 = 0; _i220 < _size218; ++_i220) {
          var elem221 = null;
          elem221 = new ttypes.NoteInvitationShareRelationship();
          elem221[Symbol.for("read")](input);
          this.invitationsToUpdate.push(elem221);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.membershipsToUnshare = [];
        var _rtmp3223 = input.readListBegin();
        var _size222 = _rtmp3223.size || 0;
        for (var _i224 = 0; _i224 < _size222; ++_i224) {
          var elem225 = null;
          elem225 = input.readI32();
          this.membershipsToUnshare.push(elem225);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.invitationsToUnshare = [];
        var _rtmp3227 = input.readListBegin();
        var _size226 = _rtmp3227.size || 0;
        for (var _i228 = 0; _i228 < _size226; ++_i228) {
          var elem229 = null;
          elem229 = input.readI64();
          this.invitationsToUnshare.push(elem229);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNoteSharesParameters.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('ManageNoteSharesParameters');
  if (this.noteGuid !== null && this.noteGuid !== undefined) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 1);
    output.writeString(this.noteGuid);
    output.writeFieldEnd();
  }
  if (this.membershipsToUpdate !== null && this.membershipsToUpdate !== undefined) {
    output.writeFieldBegin('membershipsToUpdate', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.membershipsToUpdate.length);
    for (var iter230 in this.membershipsToUpdate) {
      if (this.membershipsToUpdate.hasOwnProperty(iter230)) {
        iter230 = this.membershipsToUpdate[iter230];
        iter230[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationsToUpdate !== null && this.invitationsToUpdate !== undefined) {
    output.writeFieldBegin('invitationsToUpdate', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitationsToUpdate.length);
    for (var iter231 in this.invitationsToUpdate) {
      if (this.invitationsToUpdate.hasOwnProperty(iter231)) {
        iter231 = this.invitationsToUpdate[iter231];
        iter231[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.membershipsToUnshare !== null && this.membershipsToUnshare !== undefined) {
    output.writeFieldBegin('membershipsToUnshare', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.membershipsToUnshare.length);
    for (var iter232 in this.membershipsToUnshare) {
      if (this.membershipsToUnshare.hasOwnProperty(iter232)) {
        iter232 = this.membershipsToUnshare[iter232];
        output.writeI32(iter232);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.invitationsToUnshare !== null && this.invitationsToUnshare !== undefined) {
    output.writeFieldBegin('invitationsToUnshare', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.invitationsToUnshare.length);
    for (var iter233 in this.invitationsToUnshare) {
      if (this.invitationsToUnshare.hasOwnProperty(iter233)) {
        iter233 = this.invitationsToUnshare[iter233];
        output.writeI64(iter233);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManageNoteSharesError = module.exports.ManageNoteSharesError = function(args) {
  this.identityID = null;
  this.userID = null;
  this.userException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.EDAMNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.identityID !== undefined && args.identityID !== null) {
      this.identityID = args.identityID;
    }
    if (args.userID !== undefined && args.userID !== null) {
      this.userID = args.userID;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
ManageNoteSharesError.prototype = {};
ManageNoteSharesError.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.identityID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException();
        this.userException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException();
        this.notFoundException[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNoteSharesError.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('ManageNoteSharesError');
  if (this.identityID !== null && this.identityID !== undefined) {
    output.writeFieldBegin('identityID', Thrift.Type.I64, 1);
    output.writeI64(this.identityID);
    output.writeFieldEnd();
  }
  if (this.userID !== null && this.userID !== undefined) {
    output.writeFieldBegin('userID', Thrift.Type.I32, 2);
    output.writeI32(this.userID);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 3);
    this.userException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 4);
    this.notFoundException[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManageNoteSharesResult = module.exports.ManageNoteSharesResult = function(args) {
  this.errors = null;
  if (args) {
    if (args.errors !== undefined && args.errors !== null) {
      this.errors = Thrift.copyList(args.errors, [ttypes.ManageNoteSharesError]);
    }
  }
};
ManageNoteSharesResult.prototype = {};
ManageNoteSharesResult.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.errors = [];
        var _rtmp3235 = input.readListBegin();
        var _size234 = _rtmp3235.size || 0;
        for (var _i236 = 0; _i236 < _size234; ++_i236) {
          var elem237 = null;
          elem237 = new ttypes.ManageNoteSharesError();
          elem237[Symbol.for("read")](input);
          this.errors.push(elem237);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManageNoteSharesResult.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('ManageNoteSharesResult');
  if (this.errors !== null && this.errors !== undefined) {
    output.writeFieldBegin('errors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.errors.length);
    for (var iter238 in this.errors) {
      if (this.errors.hasOwnProperty(iter238)) {
        iter238 = this.errors[iter238];
        iter238[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

