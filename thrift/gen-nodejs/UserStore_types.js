//
// Autogenerated by Thrift Compiler (0.22.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var Types_ttypes = require('./Types_types.js');
var Errors_ttypes = require('./Errors_types.js');


var ttypes = module.exports = {};
var PublicUserInfo = module.exports.PublicUserInfo = function(args) {
  this.userId = null;
  this.serviceLevel = null;
  this.username = null;
  this.noteStoreUrl = null;
  this.webApiUrlPrefix = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userId is unset!');
    }
    if (args.serviceLevel !== undefined && args.serviceLevel !== null) {
      this.serviceLevel = args.serviceLevel;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.noteStoreUrl !== undefined && args.noteStoreUrl !== null) {
      this.noteStoreUrl = args.noteStoreUrl;
    }
    if (args.webApiUrlPrefix !== undefined && args.webApiUrlPrefix !== null) {
      this.webApiUrlPrefix = args.webApiUrlPrefix;
    }
  }
};
PublicUserInfo.prototype = {};
PublicUserInfo.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.serviceLevel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.noteStoreUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.webApiUrlPrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserInfo.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('PublicUserInfo');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1);
    output.writeI32(this.userId);
    output.writeFieldEnd();
  }
  if (this.serviceLevel !== null && this.serviceLevel !== undefined) {
    output.writeFieldBegin('serviceLevel', Thrift.Type.I32, 7);
    output.writeI32(this.serviceLevel);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 4);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.noteStoreUrl !== null && this.noteStoreUrl !== undefined) {
    output.writeFieldBegin('noteStoreUrl', Thrift.Type.STRING, 5);
    output.writeString(this.noteStoreUrl);
    output.writeFieldEnd();
  }
  if (this.webApiUrlPrefix !== null && this.webApiUrlPrefix !== undefined) {
    output.writeFieldBegin('webApiUrlPrefix', Thrift.Type.STRING, 6);
    output.writeString(this.webApiUrlPrefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserUrls = module.exports.UserUrls = function(args) {
  this.noteStoreUrl = null;
  this.webApiUrlPrefix = null;
  this.userStoreUrl = null;
  this.utilityUrl = null;
  this.messageStoreUrl = null;
  this.userWebSocketUrl = null;
  if (args) {
    if (args.noteStoreUrl !== undefined && args.noteStoreUrl !== null) {
      this.noteStoreUrl = args.noteStoreUrl;
    }
    if (args.webApiUrlPrefix !== undefined && args.webApiUrlPrefix !== null) {
      this.webApiUrlPrefix = args.webApiUrlPrefix;
    }
    if (args.userStoreUrl !== undefined && args.userStoreUrl !== null) {
      this.userStoreUrl = args.userStoreUrl;
    }
    if (args.utilityUrl !== undefined && args.utilityUrl !== null) {
      this.utilityUrl = args.utilityUrl;
    }
    if (args.messageStoreUrl !== undefined && args.messageStoreUrl !== null) {
      this.messageStoreUrl = args.messageStoreUrl;
    }
    if (args.userWebSocketUrl !== undefined && args.userWebSocketUrl !== null) {
      this.userWebSocketUrl = args.userWebSocketUrl;
    }
  }
};
UserUrls.prototype = {};
UserUrls.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.noteStoreUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.webApiUrlPrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userStoreUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.utilityUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.messageStoreUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.userWebSocketUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserUrls.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('UserUrls');
  if (this.noteStoreUrl !== null && this.noteStoreUrl !== undefined) {
    output.writeFieldBegin('noteStoreUrl', Thrift.Type.STRING, 1);
    output.writeString(this.noteStoreUrl);
    output.writeFieldEnd();
  }
  if (this.webApiUrlPrefix !== null && this.webApiUrlPrefix !== undefined) {
    output.writeFieldBegin('webApiUrlPrefix', Thrift.Type.STRING, 2);
    output.writeString(this.webApiUrlPrefix);
    output.writeFieldEnd();
  }
  if (this.userStoreUrl !== null && this.userStoreUrl !== undefined) {
    output.writeFieldBegin('userStoreUrl', Thrift.Type.STRING, 3);
    output.writeString(this.userStoreUrl);
    output.writeFieldEnd();
  }
  if (this.utilityUrl !== null && this.utilityUrl !== undefined) {
    output.writeFieldBegin('utilityUrl', Thrift.Type.STRING, 4);
    output.writeString(this.utilityUrl);
    output.writeFieldEnd();
  }
  if (this.messageStoreUrl !== null && this.messageStoreUrl !== undefined) {
    output.writeFieldBegin('messageStoreUrl', Thrift.Type.STRING, 5);
    output.writeString(this.messageStoreUrl);
    output.writeFieldEnd();
  }
  if (this.userWebSocketUrl !== null && this.userWebSocketUrl !== undefined) {
    output.writeFieldBegin('userWebSocketUrl', Thrift.Type.STRING, 6);
    output.writeString(this.userWebSocketUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthenticationResult = module.exports.AuthenticationResult = function(args) {
  this.currentTime = null;
  this.authenticationToken = null;
  this.expiration = null;
  this.user = null;
  this.publicUserInfo = null;
  this.noteStoreUrl = null;
  this.webApiUrlPrefix = null;
  this.secondFactorRequired = null;
  this.secondFactorDeliveryHint = null;
  this.urls = null;
  if (args) {
    if (args.currentTime !== undefined && args.currentTime !== null) {
      this.currentTime = args.currentTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currentTime is unset!');
    }
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field authenticationToken is unset!');
    }
    if (args.expiration !== undefined && args.expiration !== null) {
      this.expiration = args.expiration;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expiration is unset!');
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = new Types_ttypes.User(args.user);
    }
    if (args.publicUserInfo !== undefined && args.publicUserInfo !== null) {
      this.publicUserInfo = new ttypes.PublicUserInfo(args.publicUserInfo);
    }
    if (args.noteStoreUrl !== undefined && args.noteStoreUrl !== null) {
      this.noteStoreUrl = args.noteStoreUrl;
    }
    if (args.webApiUrlPrefix !== undefined && args.webApiUrlPrefix !== null) {
      this.webApiUrlPrefix = args.webApiUrlPrefix;
    }
    if (args.secondFactorRequired !== undefined && args.secondFactorRequired !== null) {
      this.secondFactorRequired = args.secondFactorRequired;
    }
    if (args.secondFactorDeliveryHint !== undefined && args.secondFactorDeliveryHint !== null) {
      this.secondFactorDeliveryHint = args.secondFactorDeliveryHint;
    }
    if (args.urls !== undefined && args.urls !== null) {
      this.urls = new ttypes.UserUrls(args.urls);
    }
  }
};
AuthenticationResult.prototype = {};
AuthenticationResult.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expiration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new Types_ttypes.User();
        this.user[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicUserInfo = new ttypes.PublicUserInfo();
        this.publicUserInfo[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.noteStoreUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.webApiUrlPrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.secondFactorRequired = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.secondFactorDeliveryHint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.urls = new ttypes.UserUrls();
        this.urls[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationResult.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('AuthenticationResult');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 2);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.expiration !== null && this.expiration !== undefined) {
    output.writeFieldBegin('expiration', Thrift.Type.I64, 3);
    output.writeI64(this.expiration);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 4);
    this.user[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.publicUserInfo !== null && this.publicUserInfo !== undefined) {
    output.writeFieldBegin('publicUserInfo', Thrift.Type.STRUCT, 5);
    this.publicUserInfo[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.noteStoreUrl !== null && this.noteStoreUrl !== undefined) {
    output.writeFieldBegin('noteStoreUrl', Thrift.Type.STRING, 6);
    output.writeString(this.noteStoreUrl);
    output.writeFieldEnd();
  }
  if (this.webApiUrlPrefix !== null && this.webApiUrlPrefix !== undefined) {
    output.writeFieldBegin('webApiUrlPrefix', Thrift.Type.STRING, 7);
    output.writeString(this.webApiUrlPrefix);
    output.writeFieldEnd();
  }
  if (this.secondFactorRequired !== null && this.secondFactorRequired !== undefined) {
    output.writeFieldBegin('secondFactorRequired', Thrift.Type.BOOL, 8);
    output.writeBool(this.secondFactorRequired);
    output.writeFieldEnd();
  }
  if (this.secondFactorDeliveryHint !== null && this.secondFactorDeliveryHint !== undefined) {
    output.writeFieldBegin('secondFactorDeliveryHint', Thrift.Type.STRING, 9);
    output.writeString(this.secondFactorDeliveryHint);
    output.writeFieldEnd();
  }
  if (this.urls !== null && this.urls !== undefined) {
    output.writeFieldBegin('urls', Thrift.Type.STRUCT, 10);
    this.urls[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BootstrapSettings = module.exports.BootstrapSettings = function(args) {
  this.serviceHost = null;
  this.marketingUrl = null;
  this.supportUrl = null;
  this.accountEmailDomain = null;
  this.enableFacebookSharing = null;
  this.enableGiftSubscriptions = null;
  this.enableSupportTickets = null;
  this.enableSharedNotebooks = null;
  this.enableSingleNoteSharing = null;
  this.enableSponsoredAccounts = null;
  this.enableTwitterSharing = null;
  this.enableLinkedInSharing = null;
  this.enablePublicNotebooks = null;
  this.enableGoogle = null;
  if (args) {
    if (args.serviceHost !== undefined && args.serviceHost !== null) {
      this.serviceHost = args.serviceHost;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serviceHost is unset!');
    }
    if (args.marketingUrl !== undefined && args.marketingUrl !== null) {
      this.marketingUrl = args.marketingUrl;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field marketingUrl is unset!');
    }
    if (args.supportUrl !== undefined && args.supportUrl !== null) {
      this.supportUrl = args.supportUrl;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field supportUrl is unset!');
    }
    if (args.accountEmailDomain !== undefined && args.accountEmailDomain !== null) {
      this.accountEmailDomain = args.accountEmailDomain;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accountEmailDomain is unset!');
    }
    if (args.enableFacebookSharing !== undefined && args.enableFacebookSharing !== null) {
      this.enableFacebookSharing = args.enableFacebookSharing;
    }
    if (args.enableGiftSubscriptions !== undefined && args.enableGiftSubscriptions !== null) {
      this.enableGiftSubscriptions = args.enableGiftSubscriptions;
    }
    if (args.enableSupportTickets !== undefined && args.enableSupportTickets !== null) {
      this.enableSupportTickets = args.enableSupportTickets;
    }
    if (args.enableSharedNotebooks !== undefined && args.enableSharedNotebooks !== null) {
      this.enableSharedNotebooks = args.enableSharedNotebooks;
    }
    if (args.enableSingleNoteSharing !== undefined && args.enableSingleNoteSharing !== null) {
      this.enableSingleNoteSharing = args.enableSingleNoteSharing;
    }
    if (args.enableSponsoredAccounts !== undefined && args.enableSponsoredAccounts !== null) {
      this.enableSponsoredAccounts = args.enableSponsoredAccounts;
    }
    if (args.enableTwitterSharing !== undefined && args.enableTwitterSharing !== null) {
      this.enableTwitterSharing = args.enableTwitterSharing;
    }
    if (args.enableLinkedInSharing !== undefined && args.enableLinkedInSharing !== null) {
      this.enableLinkedInSharing = args.enableLinkedInSharing;
    }
    if (args.enablePublicNotebooks !== undefined && args.enablePublicNotebooks !== null) {
      this.enablePublicNotebooks = args.enablePublicNotebooks;
    }
    if (args.enableGoogle !== undefined && args.enableGoogle !== null) {
      this.enableGoogle = args.enableGoogle;
    }
  }
};
BootstrapSettings.prototype = {};
BootstrapSettings.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceHost = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.marketingUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.supportUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.accountEmailDomain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.enableFacebookSharing = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.enableGiftSubscriptions = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.enableSupportTickets = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.enableSharedNotebooks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.enableSingleNoteSharing = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.enableSponsoredAccounts = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.enableTwitterSharing = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.enableLinkedInSharing = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.enablePublicNotebooks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.enableGoogle = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BootstrapSettings.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('BootstrapSettings');
  if (this.serviceHost !== null && this.serviceHost !== undefined) {
    output.writeFieldBegin('serviceHost', Thrift.Type.STRING, 1);
    output.writeString(this.serviceHost);
    output.writeFieldEnd();
  }
  if (this.marketingUrl !== null && this.marketingUrl !== undefined) {
    output.writeFieldBegin('marketingUrl', Thrift.Type.STRING, 2);
    output.writeString(this.marketingUrl);
    output.writeFieldEnd();
  }
  if (this.supportUrl !== null && this.supportUrl !== undefined) {
    output.writeFieldBegin('supportUrl', Thrift.Type.STRING, 3);
    output.writeString(this.supportUrl);
    output.writeFieldEnd();
  }
  if (this.accountEmailDomain !== null && this.accountEmailDomain !== undefined) {
    output.writeFieldBegin('accountEmailDomain', Thrift.Type.STRING, 4);
    output.writeString(this.accountEmailDomain);
    output.writeFieldEnd();
  }
  if (this.enableFacebookSharing !== null && this.enableFacebookSharing !== undefined) {
    output.writeFieldBegin('enableFacebookSharing', Thrift.Type.BOOL, 5);
    output.writeBool(this.enableFacebookSharing);
    output.writeFieldEnd();
  }
  if (this.enableGiftSubscriptions !== null && this.enableGiftSubscriptions !== undefined) {
    output.writeFieldBegin('enableGiftSubscriptions', Thrift.Type.BOOL, 6);
    output.writeBool(this.enableGiftSubscriptions);
    output.writeFieldEnd();
  }
  if (this.enableSupportTickets !== null && this.enableSupportTickets !== undefined) {
    output.writeFieldBegin('enableSupportTickets', Thrift.Type.BOOL, 7);
    output.writeBool(this.enableSupportTickets);
    output.writeFieldEnd();
  }
  if (this.enableSharedNotebooks !== null && this.enableSharedNotebooks !== undefined) {
    output.writeFieldBegin('enableSharedNotebooks', Thrift.Type.BOOL, 8);
    output.writeBool(this.enableSharedNotebooks);
    output.writeFieldEnd();
  }
  if (this.enableSingleNoteSharing !== null && this.enableSingleNoteSharing !== undefined) {
    output.writeFieldBegin('enableSingleNoteSharing', Thrift.Type.BOOL, 9);
    output.writeBool(this.enableSingleNoteSharing);
    output.writeFieldEnd();
  }
  if (this.enableSponsoredAccounts !== null && this.enableSponsoredAccounts !== undefined) {
    output.writeFieldBegin('enableSponsoredAccounts', Thrift.Type.BOOL, 10);
    output.writeBool(this.enableSponsoredAccounts);
    output.writeFieldEnd();
  }
  if (this.enableTwitterSharing !== null && this.enableTwitterSharing !== undefined) {
    output.writeFieldBegin('enableTwitterSharing', Thrift.Type.BOOL, 11);
    output.writeBool(this.enableTwitterSharing);
    output.writeFieldEnd();
  }
  if (this.enableLinkedInSharing !== null && this.enableLinkedInSharing !== undefined) {
    output.writeFieldBegin('enableLinkedInSharing', Thrift.Type.BOOL, 12);
    output.writeBool(this.enableLinkedInSharing);
    output.writeFieldEnd();
  }
  if (this.enablePublicNotebooks !== null && this.enablePublicNotebooks !== undefined) {
    output.writeFieldBegin('enablePublicNotebooks', Thrift.Type.BOOL, 13);
    output.writeBool(this.enablePublicNotebooks);
    output.writeFieldEnd();
  }
  if (this.enableGoogle !== null && this.enableGoogle !== undefined) {
    output.writeFieldBegin('enableGoogle', Thrift.Type.BOOL, 16);
    output.writeBool(this.enableGoogle);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BootstrapProfile = module.exports.BootstrapProfile = function(args) {
  this.name = null;
  this.settings = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new ttypes.BootstrapSettings(args.settings);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field settings is unset!');
    }
  }
};
BootstrapProfile.prototype = {};
BootstrapProfile.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new ttypes.BootstrapSettings();
        this.settings[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BootstrapProfile.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('BootstrapProfile');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 2);
    this.settings[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BootstrapInfo = module.exports.BootstrapInfo = function(args) {
  this.profiles = null;
  if (args) {
    if (args.profiles !== undefined && args.profiles !== null) {
      this.profiles = Thrift.copyList(args.profiles, [ttypes.BootstrapProfile]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field profiles is unset!');
    }
  }
};
BootstrapInfo.prototype = {};
BootstrapInfo.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.profiles = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.BootstrapProfile();
          elem3[Symbol.for("read")](input);
          this.profiles.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BootstrapInfo.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('BootstrapInfo');
  if (this.profiles !== null && this.profiles !== undefined) {
    output.writeFieldBegin('profiles', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.profiles.length);
    for (var iter4 in this.profiles) {
      if (this.profiles.hasOwnProperty(iter4)) {
        iter4 = this.profiles[iter4];
        iter4[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.EDAM_VERSION_MAJOR = 1;
ttypes.EDAM_VERSION_MINOR = 28;
